"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[238],{3138:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,concentratedLiquiditySteps:()=>g,contentTitle:()=>d,default:()=>f,frontMatter:()=>c,legacySetupGuide:()=>m,metadata:()=>i,setupGuide:()=>h,splashPoolSteps:()=>u,toc:()=>y});const i=JSON.parse('{"id":"SDKs/Whirlpool Management/Create Pool","title":"Create Pool","description":"For more details, refer to our Environment Setup Guide.","source":"@site/docs/03-SDKs/03-Whirlpool Management/01-Create Pool.mdx","sourceDirName":"03-SDKs/03-Whirlpool Management","slug":"/SDKs/Whirlpool Management/Create Pool","permalink":"/SDKs/Whirlpool Management/Create Pool","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-SDKs/03-Whirlpool Management/01-Create Pool.mdx","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_label":"Create Liquidity Pools","hide_table_of_contents":true},"sidebar":"sidebar","previous":{"title":"Environment Setup","permalink":"/SDKs/Environment Setup"},"next":{"title":"Monitor Liquidity Pools","permalink":"/SDKs/Whirlpool Management/Monitor pools"}}');var o=t(1085),s=t(1184),r=t(95),a=t(4435),l=t(8156);const c={sidebar_label:"Create Liquidity Pools",hide_table_of_contents:!0},d="Creating Liquidity Pools on Orca",p={},h="\nBefore creating a Splash Pool or a Concentrated Liquidity Pool, ensure you have completed the environment setup:\n- **RPC Setup**: Use a Solana RPC client to communicate with the blockchain.\n- **Wallet Creation**: Create a wallet to interact with the Solana network.\n- **Devnet Airdrop**: Fund your wallet with a Solana devnet airdrop to cover transaction fees.\n\nFor more details, refer to our Environment Setup Guide.\n",u="\n### Creating Splash Pools\n\nSplash Pools are the easiest way to get started:\n\n1. **Token Mint Addresses**: Provide the mint addresses of the two tokens that will make up the liquidity pool. The order of the tokens is important: the first token will be priced in terms of the second token. This means that the price you set will reflect how many units of the second token are needed to equal one unit of the first token. For example, if you set the price to 0.0001 SOL, this means that one unit of the first token is worth 0.0001 units of the second token (SOL). Make sure to verify the order of your tokens.\n2. **Initial Price**: Set the initial price of token 1 in terms of token 2.\n3. **Funder**: This will be your wallet, which will fund the initialization process.\n4. **Create Instructions**: Use the appropriate function to generate the required pool creation instructions.\n",g="\n### Creating Concentrated Liquidity Pools\n\nConcentrated Liquidity Pools offer more flexibility:\n\n1. **Token Mint Addresses**: Provide the two token mints.\n2. **Tick Spacing**: Set the tick spacing, which defines the intervals for price ticks. Visit the Whirlpools Parameters page to learn more about the available values of tick spacing and their corresponding fee rates.\n3. **Initial Price**: Specify the initial price of token 1 in terms of token 2.\n4. **Funder**: This can be your wallet, which will fund the pool initialization. If the funder is not specified, the default wallet will be used. You can configure the default wallet through the SDK.\n5. **Create instructions**: Use the appropriate function to create the pool.\n",m="\nBefore creating a Whirlpool, ensure you have completed the environment setup:\n- **Client Setup**: Create a WhirlpoolClient instance.\n- **Wallet Connection**: Connect a wallet to interact with the Solana network.\n- **Token Ordering**: Ensure your token mints are properly ordered.\n\nWhirlpools is set up such that anyone is able to set up a liquidity pool within a WhirlpoolsConfig space.\n",y=[{value:"1. Introduction to Pool Types",id:"1-introduction-to-pool-types",level:2},{value:"Overview",id:"overview",level:3},{value:"Splash Pools vs. Concentrated Liquidity Pools",id:"splash-pools-vs-concentrated-liquidity-pools",level:3},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Creating Splash Pools",id:"creating-splash-pools",level:3},{value:"Creating Concentrated Liquidity Pools",id:"creating-concentrated-liquidity-pools",level:3},{value:"Important Considerations",id:"important-considerations",level:3},{value:"Comparison of Pool Types",id:"comparison-of-pool-types",level:3},{value:"3. Usage Examples",id:"3-usage-examples",level:2},{value:"Launching a Token Pair with a Splash Pool",id:"launching-a-token-pair-with-a-splash-pool",level:3},{value:"Creating a Concentrated Liquidity Pool for Efficiency",id:"creating-a-concentrated-liquidity-pool-for-efficiency",level:3},{value:"4. Next Steps",id:"4-next-steps",level:2}];function x(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"creating-liquidity-pools-on-orca",children:"Creating Liquidity Pools on Orca"})}),"\n",(0,o.jsxs)(n.p,{children:["Creating liquidity pools on Orca is an essential step for launching your token and enabling trading. In this guide, we'll explore two types of liquidity pools available in the Orca ecosystem, ",(0,o.jsx)(n.strong,{children:"Splash Pools"})," and ",(0,o.jsx)(n.strong,{children:"Concentrated Liquidity Pools"}),", and help you understand how to create them, their differences, and which one best suits your needs."]}),"\n",(0,o.jsx)(n.h2,{id:"1-introduction-to-pool-types",children:"1. Introduction to Pool Types"}),"\n",(0,o.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"Liquidity pools are a foundational concept in DeFi, enabling users to trade tokens without relying on traditional order books. On Orca, liquidity pools provide the means for traders to swap between two tokens, while liquidity providers earn fees by supplying the tokens to the pool."}),"\n",(0,o.jsx)(n.h3,{id:"splash-pools-vs-concentrated-liquidity-pools",children:"Splash Pools vs. Concentrated Liquidity Pools"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Splash Pools"}),": Splash Pools are the simplest type of liquidity pool. They are ideal for those looking to launch a new token with minimal parameters. You only need to provide the mint addresses of the two tokens and set the initial price. Splash Pools offer an easy entry point into liquidity provision, making them especially appealing for community-driven projects like memecoins. These projects often prioritize community engagement over technical complexity, and Splash Pools provide a straightforward way to get started."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Concentrated Liquidity Pools:"})," Concentrated Liquidity Pools are more advanced and allow liquidity providers to concentrate their liquidity within specific price ranges. This results in higher capital efficiency but requires a deeper understanding of how to manage liquidity. Concentrated Liquidity Pools are better suited for experienced users who want greater control over their liquidity."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),"\n",(0,o.jsxs)(r.A,{groupId:"sdk-type",children:[(0,o.jsxs)(a.A,{value:"rust",label:"Rust",children:[(0,o.jsx)(l.oz,{children:h}),(0,o.jsx)(l.oz,{children:u}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    create_splash_pool_instructions, set_whirlpools_config_address, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::{pubkey::Pubkey, signature::Signer, signer::keypair::Keypair};\nuse std::str::FromStr;\nuse tokio;\nuse orca_tx_sender::{\n    build_and_send_transaction,\n    set_rpc, get_rpc_client\n};\nuse solana_sdk::commitment_config::CommitmentLevel;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    set_rpc("https://api.devnet.solana.com").await?;\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    \n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n    let initial_price = Some(0.01);\n    let wallet = Keypair::new(); // CAUTION: This wallet is not persistent.\n    let funder = Some(wallet.pubkey());\n    let rpc = get_rpc_client()?;\n\n    let result =\n        create_splash_pool_instructions(&rpc, token_a, token_b, initial_price, funder)\n            .await?;\n\n    // The instructions include new Tick Array accounts that need to be created\n    // and signed for with their corresponding Keypair.\n    let mut signers: Vec<&dyn Signer> = vec![&wallet];\n    signers.extend(result.additional_signers.iter().map(|kp| kp as &dyn Signer));\n\n    println!("Pool Address: {:?}", result.pool_address);\n    println!(\n        "Initialization Cost: {} lamports",\n        result.initialization_cost\n    );\n    println!("Signers: {:?}", signers);\n    \n    let signature = build_and_send_transaction(\n        result.instructions,\n        &signers,\n        Some(CommitmentLevel::Confirmed),\n        None, // No address lookup tables\n    ).await?;\n    \n    println!("Transaction sent: {}", signature);\n    Ok(())\n}\n'})}),(0,o.jsx)(l.oz,{children:g}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    create_concentrated_liquidity_pool_instructions, set_whirlpools_config_address,\n    WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::{pubkey::Pubkey, signature::Signer, signer::keypair::Keypair};\nuse std::str::FromStr;\nuse tokio;\nuse orca_tx_sender::{\n    build_and_send_transaction,\n    set_rpc, get_rpc_client\n};\nuse solana_sdk::commitment_config::CommitmentLevel;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    set_rpc("https://api.devnet.solana.com").await?;\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    \n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n    let tick_spacing = 64;\n    let initial_price = Some(0.01);\n    let wallet = Keypair::new(); // CAUTION: This wallet is not persistent.\n    let funder = Some(wallet.pubkey());\n    let rpc = get_rpc_client()?;\n\n    let result = create_concentrated_liquidity_pool_instructions(\n        &rpc,\n        token_a,\n        token_b,\n        tick_spacing,\n        initial_price,\n        funder,\n    )\n    .await?;\n\n    println!("Pool Address: {:?}", result.pool_address);\n    println!(\n        "Initialization Cost: {} lamports",\n        result.initialization_cost\n    );\n    \n    let signature = build_and_send_transaction(\n        result.instructions,\n        &[&wallet],\n        Some(CommitmentLevel::Confirmed),\n        None, // No address lookup tables\n    ).await?;\n    \n    println!("Transaction sent: {}", signature);\n    Ok(())\n}\n'})})]}),(0,o.jsxs)(a.A,{value:"ts-kit",label:"TypeScript Kit",children:[(0,o.jsx)(l.oz,{children:h}),(0,o.jsx)(l.oz,{children:u}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { createSplashPool, setWhirlpoolsConfig, setRpc, setPayerFromBytes } from '@orca-so/whirlpools';\nimport { generateKeyPairSigner, createSolanaRpc, devnet, address } from '@solana/kit';\nimport secret from \"wallet.json\";\n\nawait setWhirlpoolsConfig('solanaDevnet');\nawait setRpc('https://api.devnet.solana.com');\nconst signer = await setPayerFromBytes(new Uint8Array(secret));\n\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\"); // devUSDC\nconst initialPrice = 0.01;\n\nconst { poolAddress, instructions, initializationCost, callback: sendTx } = await createSplashPool(\n    devnetRpc,\n    tokenMintOne,\n    tokenMintTwo,\n    initialPrice,\n    signer\n);\n\n// Use the callback to submit the transaction\nconst txId = await sendTx();\n\nconsole.log(`Pool Address: ${poolAddress}`);\nconsole.log(`Initialization Cost: ${initializationCost} lamports`);\nconsole.log(`Transaction ID: ${txId}`);\n"})}),(0,o.jsx)(l.oz,{children:g}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"import { createConcentratedLiquidityPoolInstructions, setWhirlpoolsConfig, setRpc, setPayerFromBytes } from '@orca-so/whirlpools';\nimport { generateKeyPairSigner, createSolanaRpc, devnet, address } from '@solana/kit';\nimport secret from \"wallet.json\";\n\nawait setWhirlpoolsConfig('solanaDevnet');\nawait setRpc('https://api.devnet.solana.com');\nconst signer = await setPayerFromBytes(new Uint8Array(secret));\n\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\"); // devUSDC\nconst tickSpacing = 64;\nconst initialPrice = 0.01;\n\nconst { poolAddress, instructions, initializationCost, callback: sendTx } = await createConcentratedLiquidityPool(\n    devnetRpc,\n    tokenMintOne,\n    tokenMintTwo,\n    tickSpacing,\n    initialPrice,\n    signer\n);\n\n// Use the callback to submit the transaction\nconst txId = await sendTx();\n\n\nconsole.log(`Pool Address: ${poolAddress}`);\nconsole.log(`Initialization Cost: ${initializationCost} lamports`);\nconsole.log(`Transaction ID: ${txId}`);\n"})})]}),(0,o.jsxs)(a.A,{value:"ts-legacy",label:"TypeScript Legacy",children:[(0,o.jsx)(l.oz,{children:m}),(0,o.jsx)(n.h3,{id:"creating-splash-pools",children:"Creating Splash Pools"}),(0,o.jsx)(n.p,{children:"Splash Pools are the easiest way to get started. Follow these steps to create one using the Legacy SDK:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Token Addresses"}),": Define the two token mint addresses. They need to be cardinally ordered with the ",(0,o.jsx)(n.a,{href:"https://dev.orca.so/legacy/classes/PoolUtil.html#orderMints",children:(0,o.jsx)(n.code,{children:"orderMints"})})," function."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Set Initial Price"}),": Set the price of the first token in terms of the second token."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create the Pool"}),": Use the ",(0,o.jsx)(n.code,{children:"createSplashPool"})," function to create the pool."]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { WhirlpoolContext, ORCA_WHIRLPOOL_PROGRAM_ID} from "@orca-so/whirlpools-sdk";\nimport { PublicKey, Connection } from "@solana/web3.js";\nimport { Decimal } from "decimal.js";\nimport { AnchorProvider, Wallet } from "@coral-xyz/anchor";\n\n// UNIX/Linux/Mac\n// bash$ export ANCHOR_PROVIDER_URL=https://api.devnet.solana.com\n// bash$ export ANCHOR_WALLET=wallet.json\n\nconst connection = new Connection("https://api.devnet.solana.com");\nconst provider = new AnchorProvider(connection, wallet, {});\nconst ctx = WhirlpoolContext.withProvider(provider, ORCA_WHIRLPOOL_PROGRAM_ID);\nconst client = ctx.getClient();\nconst devnetWhirlpoolsConfig = new PublicKey("FcrweFY1G9HJAHG5inkGB6pKg1HZ6x9UC2WioAfWrGkR");\nconst tokenAddressA = new PublicKey("So11111111111111111111111111111111111111112"); // SOL\nconst tokenAddressB = new PublicKey("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k"); // devUSDC\nconst initialPrice = new Decimal(0.01);\n\nconst { poolKey, tx } = await client.createSplashPool(\n  devnetWhirlpoolsConfig,\n  tokenAddressA,\n  tokenAddressB,\n  initialPrice,\n  ctx.wallet.publicKey\n);\n\nconst txId = await tx.buildAndExecute();\nconsole.log(`Pool created at: ${poolKey.toBase58()}`);\nconsole.log(`Transaction ID: ${txId}`);\n'})}),(0,o.jsx)(n.h3,{id:"creating-concentrated-liquidity-pools",children:"Creating Concentrated Liquidity Pools"}),(0,o.jsx)(n.p,{children:"Concentrated Liquidity Pools offer more control. Follow these steps to create one:"}),(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Token Addresses"}),": Define the two token mint addresses."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Define Tick Spacing"}),": Set the tick spacing based on your fee tier."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Convert Price to Tick Index"}),": Calculate the tick index from your desired price."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create the Pool"}),": Use the ",(0,o.jsx)(n.code,{children:"createPool"})," function to create the concentrated liquidity pool."]}),"\n"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { WhirlpoolContext, ORCA_WHIRLPOOL_PROGRAM_ID} from "@orca-so/whirlpools-sdk";\nimport { PublicKey, Connection } from "@solana/web3.js";\nimport { Decimal } from "decimal.js";\nimport { AnchorProvider, Wallet } from "@coral-xyz/anchor";\n\n// bash$ export ANCHOR_PROVIDER_URL=https://api.devnet.solana.com\n// bash$ export ANCHOR_WALLET=wallet.json\n\nconst connection = new Connection("https://api.devnet.solana.com");\nconst provider = new AnchorProvider(connection, wallet, {});\nconst ctx = WhirlpoolContext.withProvider(provider, ORCA_WHIRLPOOL_PROGRAM_ID);\nconst client = ctx.getClient();\nconst devnetWhirlpoolsConfig = new PublicKey("FcrweFY1G9HJAHG5inkGB6pKg1HZ6x9UC2WioAfWrGkR");\nconst tokenAddressA = new PublicKey("So11111111111111111111111111111111111111112"); // SOL\nconst tokenAddressB = new PublicKey("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k"); // devUSDC\nconst decimalsA = 9;\nconst decimalsB = 6;\nconst tickSpacing = 64;\nconst initialPrice = new Decimal(0.01);\nconst initialTickIndex = PriceMath.priceToTickIndex(initialPrice, decimalsA, decimalsB),\n\nconst { poolKey, tx: createPoolTxBuilder } = await client.createPool(\n  devnetWhirlpoolsConfig,\n  tokenAddressA,\n  tokenAddressB,\n  tickSpacing,\n  initialTickIndex,\n  ctx.wallet.publicKey\n);\n\nconst createPoolTxId = await createPoolTxBuilder.buildAndExecute();\nconsole.log(`Pool created at: ${poolKey.toBase58()}`);\nconsole.log(`Transaction ID: ${createPoolTxId}`);\n'})}),(0,o.jsx)(n.h3,{id:"important-considerations",children:"Important Considerations"}),(0,o.jsx)(n.p,{children:"When creating pools with the Legacy SDK, keep these factors in mind:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Token Ordering"}),": Tokens must be cardinally ordered. Use the ",(0,o.jsx)(n.code,{children:"orderMints"})," helper."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Price Representation"}),": For concentrated pools, price must be converted to a tick index."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Fee Tiers"}),": Different tick spacings correspond to different fee tiers."]}),"\n"]})]})]}),"\n",(0,o.jsx)(n.h3,{id:"comparison-of-pool-types",children:"Comparison of Pool Types"}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"Feature"}),(0,o.jsx)(n.th,{children:"Splash Pools"}),(0,o.jsx)(n.th,{children:"Concentrated Liquidity Pools"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Complexity"}),(0,o.jsx)(n.td,{children:"Low"}),(0,o.jsx)(n.td,{children:"High"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Initial Parameters"}),(0,o.jsx)(n.td,{children:"Token mints, price"}),(0,o.jsx)(n.td,{children:"Token mints, tick spacing, price"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Capital Efficiency"}),(0,o.jsx)(n.td,{children:"Moderate"}),(0,o.jsx)(n.td,{children:"High"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:"Ideal For"}),(0,o.jsx)(n.td,{children:"Beginners"}),(0,o.jsx)(n.td,{children:"Advanced Users"})]})]})]}),"\n",(0,o.jsx)(n.h2,{id:"3-usage-examples",children:"3. Usage Examples"}),"\n",(0,o.jsx)(n.h3,{id:"launching-a-token-pair-with-a-splash-pool",children:"Launching a Token Pair with a Splash Pool"}),"\n",(0,o.jsx)(n.p,{children:"Suppose you want to launch a new memecoin and pair it with USDC. You can leverage the simplicity of Splash Pools to quickly set up the pool with an initial price. This is ideal if you want to keep things simple and start earning trading fees with minimal configuration. For example, if a development team is building a launchpad for memecoins, Splash Pools are an ideal solution."}),"\n",(0,o.jsx)(n.h3,{id:"creating-a-concentrated-liquidity-pool-for-efficiency",children:"Creating a Concentrated Liquidity Pool for Efficiency"}),"\n",(0,o.jsx)(n.p,{children:"If you want to maximize capital efficiency, you can use the flexibility of Concentrated Liquidity Pools to define specific price ranges for your liquidity. This approach is beneficial when you expect price movements within certain bounds and want to concentrate liquidity accordingly. For example, a DeFi protocol might use a Concentrated Liquidity Pool to facilitate a stablecoin-stablecoin pair, where the price is expected to remain within a tight range. By concentrating liquidity in this range, the protocol can maximize returns for liquidity providers and reduce slippage for traders."}),"\n",(0,o.jsx)(n.h2,{id:"4-next-steps",children:"4. Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"After creating a liquidity pool, the pool is still empty and requires liquidity for people to trade against. To make the pool functional, open a position and add liquidity. This enables traders to swap between tokens and helps you start earning fees."})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(x,{...e})}):x(e)}}}]);