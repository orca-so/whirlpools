"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[895],{856:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/balance01-1e5921cf936e28ef9c973ef2e3452b04.png"},872:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/token-account-structure-60480af1a43c683c1b192e6d555eada3.png"},1184:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var o=t(4041);const a={},c=o.createContext(a);function i(e){const n=o.useContext(c);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),o.createElement(c.Provider,{value:n},e.children)}},5162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>r});const o=JSON.parse('{"id":"Examples/Tour de Whirlpool/Check Balances","title":"Check Balances","description":"In this section let\'s set up the wallet to enable checking SOL and Token balances.","source":"@site/docs/05-Examples/01-Tour de Whirlpool/04-Check Balances.md","sourceDirName":"05-Examples/01-Tour de Whirlpool","slug":"/Examples/Tour de Whirlpool/Check Balances","permalink":"/Examples/Tour de Whirlpool/Check Balances","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/05-Examples/01-Tour de Whirlpool/04-Check Balances.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"sidebar","previous":{"title":"Obtain SOL and Tokens","permalink":"/Examples/Tour de Whirlpool/Obtain Sol and Tokens"},"next":{"title":"Send Tokens","permalink":"/Examples/Tour de Whirlpool/Send Tokens"}}');var a=t(1085),c=t(1184);const i={},s="Check Balances",l={},r=[{value:"Program Implementation",id:"program-implementation",level:2},{value:"Checking SOL Balance",id:"checking-sol-balance",level:2},{value:"Code",id:"code",level:3},{value:"Execution Result",id:"execution-result",level:3},{value:"Key Points",id:"key-points",level:3},{value:"API Used",id:"api-used",level:3},{value:"Checking Token Balances",id:"checking-token-balances",level:2},{value:"Code",id:"code-1",level:3},{value:"Execution Result",id:"execution-result-1",level:3},{value:"Key Points",id:"key-points-1",level:3},{value:"getTokenAccountsByOwner in depth",id:"gettokenaccountsbyowner-in-depth",level:3},{value:"APIs Used",id:"apis-used",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"check-balances",children:"Check Balances"})}),"\n",(0,a.jsx)(n.p,{children:"In this section let's set up the wallet to enable checking SOL and Token balances."}),"\n",(0,a.jsx)(n.h2,{id:"program-implementation",children:"Program Implementation"}),"\n",(0,a.jsx)(n.p,{children:"We can check the balances for SOL and tokens by opening Phantom."}),"\n",(0,a.jsx)(n.p,{children:"Let's perform the same check using a program."}),"\n",(0,a.jsx)(n.h2,{id:"checking-sol-balance",children:"Checking SOL Balance"}),"\n",(0,a.jsx)(n.p,{children:"Let's start with checking the SOL balance from a program."}),"\n",(0,a.jsx)(n.h3,{id:"code",children:"Code"}),"\n",(0,a.jsxs)(n.p,{children:["Open your ",(0,a.jsx)(n.code,{children:"tour_de_whirlpool"})," folder in Visual Studio Code, or your preferred development environment. Create a file called ",(0,a.jsx)(n.code,{children:"011_get_sol_balance.ts"})," under the src folder with the following contents."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { Keypair, Connection } from "@solana/web3.js";\nimport secret from "../wallet.json";\n\nconst RPC_ENDPOINT_URL = "https://api.devnet.solana.com";\nconst COMMITMENT = \'confirmed\';\n\nasync function main() {\n  // Create a connection for sending RPC requests to Devnet\n  const connection = new Connection(RPC_ENDPOINT_URL, COMMITMENT);\n\n  // Read in the private key from wallet.json (The public and private key pair will be managed using the Keypair class)\n  const keypair = Keypair.fromSecretKey(new Uint8Array(secret));\n\n  // Display the RPC and the wallet\'s public key\n  // When displaying the public key, use base58 encoding\n  console.log("endpoint:", connection.rpcEndpoint);\n  console.log("wallet pubkey:", keypair.publicKey.toBase58());\n\n  // Obtain the SOL balance\n  // Use the getBalance method from the Connection class\n  // https://solana-labs.github.io/solana-web3.js/v1.x/classes/Connection.html#getBalance\n  const sol_balance = await connection.getBalance(keypair.publicKey);\n\n  // Display the SOL balance\n  // Since SOL is internally managed as an integer value and denominated in lamports,\n  // divide by 10^9 to obtain a value denominated in SOL.\n  console.log("lamports:", sol_balance);\n  console.log("SOL:", sol_balance / 10**9);\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"execution-result",children:"Execution Result"}),"\n",(0,a.jsx)(n.p,{children:"Run the code, and then verify that the public key and SOL balance match the Phantom UI."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ ts-node src/011_get_sol_balance.ts\nendpoint: https://api.devnet.solana.com\nwallet pubkey: FptVFacYhPrwScJayvKXvwjGeZRbefnnEcgmSQkoRAXB\nlamports: 2191782899\nSOL: 2.191782899\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"balance01",src:t(856).A+"",width:"356",height:"540"})}),"\n",(0,a.jsx)(n.h3,{id:"key-points",children:"Key Points"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["You can interact with Solana's Devnet using the RPC endpoint, \"",(0,a.jsx)(n.a,{href:"https://api.devnet.solana.com",children:"https://api.devnet.solana.com"}),'"']}),"\n",(0,a.jsx)(n.li,{children:"Method for reading in a private key (read in wallet.json and create an instance of the Keypair class)"}),"\n",(0,a.jsx)(n.li,{children:"Use the toBase58() method to display the public key in base58 encoding"}),"\n",(0,a.jsx)(n.li,{children:"Use the Connection class's getBalance method to obtain the SOL balance"}),"\n",(0,a.jsx)(n.li,{children:"SOL is denominated in lamports internally"}),"\n",(0,a.jsx)(n.li,{children:"1 SOL = 1,000,000,000 lamports"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"api-used",children:"API Used"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getBalance",children:"https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getBalance"})}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"checking-token-balances",children:"Checking Token Balances"}),"\n",(0,a.jsx)(n.p,{children:"Next, let's check token balances from a program."}),"\n",(0,a.jsx)(n.h3,{id:"code-1",children:"Code"}),"\n",(0,a.jsxs)(n.p,{children:["Create a file called ",(0,a.jsx)(n.code,{children:"012_get_token_balance.ts"})," under the src folder with the following contents."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-tsx",children:'import { Keypair, Connection } from "@solana/web3.js";\nimport { TOKEN_PROGRAM_ID } from "@solana/spl-token";\nimport { DecimalUtil } from "@orca-so/common-sdk";\nimport { unpackAccount } from "@solana/spl-token";\nimport BN from "bn.js";\nimport secret from "../wallet.json";\n\nconst RPC_ENDPOINT_URL = "https://api.devnet.solana.com";\nconst COMMITMENT = \'confirmed\';\n\nasync function main() {\n  // Initialize a connection to the RPC and read in private key\n  const connection = new Connection(RPC_ENDPOINT_URL, COMMITMENT);\n  const keypair = Keypair.fromSecretKey(new Uint8Array(secret));\n  console.log("endpoint:", connection.rpcEndpoint);\n  console.log("wallet pubkey:", keypair.publicKey.toBase58());\n\n  // https://everlastingsong.github.io/nebula/\n  // devToken specification\n  const token_defs = {\n    "BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k": {name: "devUSDC", decimals: 6},\n    "H8UekPGwePSmQ3ttuYGPU1szyFfjZR4N53rymSFwpLPm": {name: "devUSDT", decimals: 6},\n    "Jd4M8bfJG3sAkd82RsGWyEXoaBXQP7njFzBwEaCTuDa":  {name: "devSAMO", decimals: 9},\n    "Afn8YB1p4NsoZeS5XJBZ18LTfEy5NFPwN46wapZcBQr6": {name: "devTMAC", decimals: 6},\n  };\n\n  // Obtain the token accounts from the wallet\'s public key\n  //\n  // {\n  //   context: { apiVersion: \'1.10.24\', slot: 140791186 },\n  //   value: [\n  //     { account: [Object], pubkey: [PublicKey] },\n  //     { account: [Object], pubkey: [PublicKey] },\n  //     { account: [Object], pubkey: [PublicKey] },\n  //     { account: [Object], pubkey: [PublicKey] }\n  //   ]\n  // }\n  const accounts = await connection.getTokenAccountsByOwner(\n    keypair.publicKey,\n    { programId: TOKEN_PROGRAM_ID }\n  );\n  console.log("getTokenAccountsByOwner:", accounts);\n\n  // Deserialize token account data\n  for (let i=0; i<accounts.value.length; i++) {\n    const value = accounts.value[i];\n\n    // Deserialize\n    const parsed_token_account = unpackAccount(value.pubkey, value.account);\n    // Use the mint address to determine which token account is for which token\n    const mint = parsed_token_account.mint;\n    const token_def = token_defs[mint.toBase58()];\n    // Ignore non-devToken accounts\n    if ( token_def === undefined ) continue;\n\n    // The balance is "amount"\n    const amount = parsed_token_account.amount;\n    // The balance is managed as an integer value, so it must be converted for UI display\n    const ui_amount = DecimalUtil.fromBN(new BN(amount.toString()), token_def.decimals);\n\n    console.log(\n      "TokenAccount:", value.pubkey.toBase58(),\n      "\\n  mint:", mint.toBase58(),\n      "\\n  name:", token_def.name,\n      "\\n  amount:", amount.toString(),\n      "\\n  ui_amount:", ui_amount.toString()\n    );\n  }\n}\n\nmain();\n'})}),"\n",(0,a.jsx)(n.h3,{id:"execution-result-1",children:"Execution Result"}),"\n",(0,a.jsx)(n.p,{children:"Run the code, and then verify that the Phantom UI displays the same token balances."}),"\n",(0,a.jsx)(n.p,{children:'The address displayed after "TokenAccount" will differ for different wallet addresses.'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ ts-node src/012_get_token_balance.ts\nendpoint: https://api.devnet.solana.com\nwallet pubkey: FptVFacYhPrwScJayvKXvwjGeZRbefnnEcgmSQkoRAXB getTokenAccountsByOwner: {\n    context: { apiVersion: '1.10.29', slot: 151582140 },\n    value: [ { account: [Object], pubkey: [PublicKey] },\n        { account: [Object], pubkey: [PublicKey] },\n        { account: [Object], pubkey: [PublicKey] },\n        { account: [Object], pubkey: [PublicKey] }\n    ] }\nTokenAccount: B3PXuJ7FyXJ9wu97WZ2b3vt1tHoPQayaQbrTpPKRjUky\n    mint: Afn8YB1p4NsoZeS5XJBZ18LTfEy5NFPwN46wapZcBQr6\n    name: devTMAC\n    amount: 151240169\n    ui_amount: 151.240169\nTokenAccount: FzAVSbhRDnncdqWLUzsxXpRM6wmB1h2Jb6obJZuRgpiw\n    mint: BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\n    name: devUSDC\n    amount: 15099547\n    ui_amount: 15.099547\nTokenAccount: 2uDMLemoyarwUCrnzzhJ4y5YFfeLpUYusgdDAZ4tv78w\n    mint: H8UekPGwePSmQ3ttuYGPU1szyFfjZR4N53rymSFwpLPm\n    name: devUSDT\n    amount: 17102615\n    ui_amount: 17.102615\nTokenAccount: H5vU48wbEWtxsdqYZtcYLcAaEZ57jjcokoJKMct2LCAE\n    mint: Jd4M8bfJG3sAkd82RsGWyEXoaBXQP7njFzBwEaCTuDa\n    name: devSAMO\n    amount: 1322051824431\n    ui_amount: 1322.051824431\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"balance02",src:t(7715).A+"",width:"356",height:"540"})}),"\n",(0,a.jsx)(n.h3,{id:"key-points-1",children:"Key Points"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Use the getTokenAccountsByOwner() method of the Connection class to obtain token balances from a specified account."}),"\n",(0,a.jsx)(n.li,{children:"The data in the account you obtain is TokenAccount data and needs to be deserialized."}),"\n",(0,a.jsx)(n.li,{children:"You can deserialize the data using the deserializeTokenAccount method from TokenUtil."}),"\n",(0,a.jsx)(n.li,{children:'You can determine which TokenAccount is for which Token using the "mint" field.'}),"\n",(0,a.jsx)(n.li,{children:"Just like SOL balances are denominated in lamports, token account balances are converted into integer values by moving the decimal point."}),"\n",(0,a.jsx)(n.li,{children:'The number of usable digits after the decimal point is defined for each token and can be referred to as "decimal" or "scale".'}),"\n",(0,a.jsx)(n.li,{children:"Use the fromU64 method (convert from U64 format) in DecimalUtil for conversions that include moving the position of the decimal point, including lamports to SOL."}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"gettokenaccountsbyowner-in-depth",children:"getTokenAccountsByOwner in depth"}),"\n",(0,a.jsx)(n.p,{children:"In Solana, all information is handled by accounts. Programs manage what will be stored inside accounts. The TokenProgram, which manages tokens, defines two types of accounts for storing data, TokenAccount and Mint."}),"\n",(0,a.jsx)(n.p,{children:"Because the token balance is stored in an account that holds TokenAccount information, getTokenAccountsByOwner will search for accounts that meet the criteria below."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"The account is owned by the TokenProgram."}),"\n",(0,a.jsx)(n.li,{children:"The data stored in the account is TokenAccount data."}),"\n",(0,a.jsx)(n.li,{children:"The token owner address, stored in the TokenAccount owner field, is the address of the specified wallet."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Since one TokenAccount can only store one token balance, the account structure looks like the following diagram."}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"token-account-structure",src:t(872).A+"",width:"522",height:"486"})}),"\n",(0,a.jsx)(n.h3,{id:"apis-used",children:"APIs Used"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getTokenAccountsByOwner",children:"https://solana-labs.github.io/solana-web3.js/classes/Connection.html#getTokenAccountsByOwner"})}),"\n",(0,a.jsx)(n.li,{children:"TokenUtil.deserializeTokenAccount"}),"\n",(0,a.jsx)(n.li,{children:"DecimalUtil.fromU64"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This completes the Basic Wallet Functionality (Checking Balances) section!"})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},7715:(e,n,t)=>{t.d(n,{A:()=>o});const o=t.p+"assets/images/balance02-7dd2655f2cc51fa786e6754c757582c6.png"}}]);