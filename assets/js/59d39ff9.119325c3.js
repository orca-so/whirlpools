"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[792],{9591:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>u,contentTitle:()=>d,default:()=>y,frontMatter:()=>c,introText:()=>p,metadata:()=>t,nextStepsText:()=>f,overviewText:()=>h,startingGuideText:()=>m,toc:()=>x,usageExampleText:()=>g});const t=JSON.parse('{"id":"SDKs/Position Management/Close Position","title":"Close Position","description":"This guide explains how to use the SDK to close a position.","source":"@site/docs/03-SDKs/04-Position Management/04-Close Position.mdx","sourceDirName":"03-SDKs/04-Position Management","slug":"/SDKs/Position Management/Close Position","permalink":"/SDKs/Position Management/Close Position","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-SDKs/04-Position Management/04-Close Position.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_label":"Close Position","hide_table_of_contents":true},"sidebar":"sidebar","previous":{"title":"Harvest","permalink":"/SDKs/Position Management/Harvest"},"next":{"title":"Monitor Positions","permalink":"/SDKs/Position Management/Monitor Positions"}}');var i=n(1085),s=n(1184),l=n(95),r=n(4435),a=n(8156);const c={sidebar_label:"Close Position",hide_table_of_contents:!0},d="Close a Position",u={},p="\nOnce you've provided liquidity in a pool, there may come a time when you want to close your position entirely. The SDK allows you to fully remove liquidity from the pool, collect any outstanding fees and rewards, and close the position. This is useful when you want to exit the pool, either to realize profits or to reallocate capital to other opportunities.\n\nThis guide explains how to use the SDK to close a position.\n",h="\n## 1. Overview of Closing a Position\nWhen using the SDK to fully close a liquidity position, you generate all the necessary instructions. It performs the following key actions:\n\n1. Collect Fees: Retrieves any fees earned from trades involving your liquidity.\n2. Collect Rewards: Retrieves any rewards you've accumulated for the pool.\n3. Decrease Liquidity: Removes any remaining liquidity in the position.\n4. Close Position: Closes the position and returns the tokens in your account.\n",m="\n## 2. Getting Started Guide\n### Closing a Position\nTo close a position and withdraw all liquidity, follow these steps:\n1. **RPC Client**: Use a Solana RPC client to interact with the blockchain.\n2. **Position Mint**: Provide the mint address of the NFT representing your position. This NFT serves as proof of ownership and represents the liquidity in the position.\n3. **Parameters for Liquidity**: Define the parameters for decreasing liquidity. This can be specified as a liquidity amount or as specific token amounts.\n4. **Slippage Tolerance**: Set the maximum slippage tolerance (optional, defaults to 1%). Slippage refers to the difference between the expected token amounts you receive when closing a position and the actual amounts returned to your wallet. A lower slippage tolerance reduces the risk of receiving fewer tokens than expected but may lead to failed transactions if the market moves too quickly. For example, if you expect to receive 100 units of Token A and 1,000 units of Token B when closing your position, with a 1% slippage tolerance, the minimum amounts returned would be 99 Token A and 990 Token B.\n5. **Authority**: This can be your wallet, which will fund the pool initialization. If the authority is not specified, the default wallet will be used. You can configure the default wallet through the SDK.\n6. **Create Instructions**: Use the appropriate function to generate the necessary instructions.\n",g="\n## 3. Usage Example\nSuppose your trading strategy predicts that the current price range will lead to divergence loss, and you need to close the position to avoid further losses. Using the SDK, you can generate the instructions to collect all accumulated fees, rewards, and remove liquidity to prevent further losses.\n",f="\n## 4. Next Steps\nAfter closing a position, you can:\n\n- [Open a New Position](01-Open%20Position.mdx): If you want to redeploy your capital, you can open a new position in a different price range or pool.\n- [Fetch All Positions](02-Fetch%20Positions.mdx): Check all your remaining positions to manage your overall liquidity strategy.\n- Reinvest the funds from the closed position into other opportunities based on market conditions.\n",x=[{value:"Whirlpool Client - Sample Code",id:"whirlpool-client---sample-code",level:2},{value:"Instruction - Sample Code",id:"instruction---sample-code",level:2},{value:"Common Errors",id:"common-errors",level:2}];function w(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"close-a-position",children:"Close a Position"})}),"\n",(0,i.jsxs)(l.A,{groupId:"sdk-type",children:[(0,i.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,i.jsx)(a.oz,{children:p}),(0,i.jsx)(a.oz,{children:h}),(0,i.jsx)(a.oz,{children:m}),(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-rust",children:'use crate::utils::load_wallet;\nuse orca_whirlpools::{\n    close_position_instructions, set_whirlpools_config_address, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\nuse solana_sdk::signature::Signer;\nuse orca_tx_sender::{\n    build_and_send_transaction,\n    set_rpc, get_rpc_client\n};\nuse solana_sdk::commitment_config::CommitmentLevel;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    set_rpc("https://api.devnet.solana.com").await?;\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let wallet = load_wallet();\n    let rpc = get_rpc_client()?;\n\n    let position_mint_address =\n        Pubkey::from_str("HqoV7Qv27REUtmd9UKSJGGmCRNx3531t33bDG1BUfo9K").unwrap();\n\n    let result = close_position_instructions(\n        &rpc,\n        position_mint_address,\n        Some(100),\n        Some(wallet.pubkey()),\n    )\n    .await?;\n\n    // The instructions may include new token accounts that need to be created\n    // and signed for with their corresponding Keypair.\n    let mut signers: Vec<&dyn Signer> = vec![&wallet];\n    signers.extend(result.additional_signers.iter().map(|kp| kp as &dyn Signer));\n\n    println!("Quote token max B: {:?}", result.quote.token_est_b);\n    println!("Fees Quote: {:?}", result.fees_quote);\n    println!("Rewards Quote: {:?}", result.rewards_quote);\n    println!("Number of Instructions: {}", result.instructions.len());\n    println!("Signers: {:?}", signers);\n\n    \n    let signature = build_and_send_transaction(\n        result.instructions,\n        &signers,\n        Some(CommitmentLevel::Confirmed),\n        None, // No address lookup tables\n    ).await?;\n    \n    println!("Close position transaction sent: {}", signature);\n    Ok(())\n}\n'})}),(0,i.jsx)(a.oz,{children:g}),(0,i.jsx)(a.oz,{children:f})]}),(0,i.jsxs)(r.A,{value:"typescript-kit",label:"TypeScript Kit",children:[(0,i.jsx)(a.oz,{children:p}),(0,i.jsx)(a.oz,{children:h}),(0,i.jsx)(a.oz,{children:m}),(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-tsx",children:"import { closePosition, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address, setRpc, setPayerFromBytes } from '@solana/kit';\nimport secret from \"wallet.json\";\n\nawait setWhirlpoolsConfig('solanaDevnet');\nawait setRpc('https://api.devnet.solana.com');\nconst signer = await setPayerFromBytes(new Uint8Array(secret));\nconst positionMint = address(\"HqoV7Qv27REUtmd9UKSJGGmCRNx3531t33bDG1BUfo9K\");\n\nconst { instructions, quote, feesQuote, rewardsQuote, callback: sendTx } = await closePosition(\n  devnetRpc,\n  positionMint,\n  100,\n  signer\n);\n\n// Use the callback to submit the transaction \nconst txId = await sendTx();\n\nconsole.log(`Quote token max B: ${quote.tokenEstB}`);\nconsole.log(`Fees owed token A: ${feesQuote.feeOwedA}`);\nconsole.log(`Rewards '1' owed: ${rewardsQuote.rewards[0].rewardsOwed}`);\nconsole.log(`Number of instructions:, ${instructions.length}`);\nconsole.log(`Transaction ID: ${txId}`);\n"})}),(0,i.jsx)(a.oz,{children:g}),(0,i.jsx)(a.oz,{children:f})]}),(0,i.jsxs)(r.A,{value:"typescript-legacy",label:"TypeScript Legacy",children:[(0,i.jsx)(o.h1,{id:"closing-a-position",children:"Closing a Position"}),(0,i.jsxs)(o.p,{children:["To close a position, you must first withdraw all liquidity and collect all fees and rewards from the position. You can then call the ",(0,i.jsx)(o.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#closePosition",children:(0,i.jsx)(o.code,{children:"closePosition"})})," instruction to close and burn the position NFT."]}),(0,i.jsxs)(o.p,{children:["The parameters of ",(0,i.jsx)(o.code,{children:"closePosition"})," are identical to the ones in ",(0,i.jsx)(o.code,{children:"openPosition"}),"."]}),(0,i.jsx)(o.h2,{id:"whirlpool-client---sample-code",children:"Whirlpool Client - Sample Code"}),(0,i.jsxs)(o.p,{children:["The ",(0,i.jsx)(o.a,{href:"https://dev.orca.so/legacy/interfaces/WhirlpoolClient.html",children:(0,i.jsx)(o.code,{children:"WhirlpoolClient"})})," version of ",(0,i.jsx)(o.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#closePosition",children:(0,i.jsx)(o.code,{children:"closePosition"})})," will automatically call ",(0,i.jsx)(o.code,{children:"decrease_liquidity"})," and ",(0,i.jsx)(o.code,{children:"close_position"})," for you. Note that you still have to manually call ",(0,i.jsx)(o.code,{children:"collect_fees"})," and ",(0,i.jsx)(o.code,{children:"collect_reward"})," to make sure the position is empty."]}),(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-tsx",children:"const client = new WhirlpoolClient(context, fetcher);\nconst poolAddress = PDAUtil.getPool(...)\nconst positionAddress = PDAUtil.getPosition(...);\n\nconst pool = client.getPool(poolAddress);\nconst tx = await pool.closePosition(positionAddress, Percentage.fromFraction(1, 100))\nawait tx.buildAndExecute();\n"})}),(0,i.jsx)(o.h2,{id:"instruction---sample-code",children:"Instruction - Sample Code"}),(0,i.jsx)(o.pre,{children:(0,i.jsx)(o.code,{className:"language-tsx",children:"const poolAddress = PDAUtil.getPool(...)\nconst positionAddress = PDAUtil.getPosition(...);\nconst position = await fetcher.getPosition(positionAddress);\n// Must manually call update_fee_and_rewards -> collect_fees -> collect_rewards\n// Must manually call decrease_liquidity\nconst tx = await toTx(ctx, WhirlpoolIx.closePositionTx(ctx, {\n    positionAuthority: ctx.wallet.publicKey,\n    receiver: ctx.wallet.publicKey,\n    positionTokenAccount,\n    position: positionAddress,\n    positionMint: position.positionMint,\n}))\nawait tx.buildAndExecute();\n"})}),(0,i.jsx)(o.h2,{id:"common-errors",children:"Common Errors"}),(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsxs)(o.li,{children:[(0,i.jsx)(o.code,{children:"ClosePositionNotEmpty"})," (0x1775) - Position still has liquidity in it. Withdraw all before calling this instruction."]}),"\n"]})]})]})]})}function y(e={}){const{wrapper:o}={...(0,s.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}}}]);