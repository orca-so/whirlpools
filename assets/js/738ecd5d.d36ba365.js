"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[442],{3679:(o,e,n)=>{n.r(e),n.d(e,{allPoolsFetching:()=>m,assets:()=>h,byAddressFetching:()=>f,concentratedPoolFetching:()=>j,contentTitle:()=>d,default:()=>P,frontMatter:()=>c,initializedPoolsInfo:()=>u,metadata:()=>t,monitoringIntro:()=>p,splashPoolFetching:()=>g,toc:()=>v});const t=JSON.parse('{"id":"SDKs/Whirlpool Management/Monitor pools","title":"Monitor pools","description":"When fetching all pools for a token pair, which iterates through all possible tick spacings, both initialized and uninitialized pools can be returned, allowing you to identify pools that have not yet been created.","source":"@site/docs/03-SDKs/03-Whirlpool Management/02-Monitor pools.mdx","sourceDirName":"03-SDKs/03-Whirlpool Management","slug":"/SDKs/Whirlpool Management/Monitor pools","permalink":"/SDKs/Whirlpool Management/Monitor pools","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-SDKs/03-Whirlpool Management/02-Monitor pools.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_label":"Monitor Liquidity Pools","hide_table_of_contents":true},"sidebar":"sidebar","previous":{"title":"Create Liquidity Pools","permalink":"/SDKs/Whirlpool Management/Create Pool"},"next":{"title":"Open Position","permalink":"/SDKs/Position Management/Open Position"}}');var i=n(1085),l=n(1184),s=n(95),a=n(4435),r=n(8156);const c={sidebar_label:"Monitor Liquidity Pools",hide_table_of_contents:!0},d="Monitoring Liquidity Pools on Orca",h={},p="\nMonitoring and fetching details about liquidity pools is crucial for understanding their current state, whether you want to gather insights about a Splash Pool, a Concentrated Liquidity Pool, or all pools between specific token pairs.\n",u="\n### Initialized vs. Uninitialized Pools\nEach token pair can have multiple pools based on different tick spacings, corresponding to various fee tiers. When fetching pool data, it's possible to request a pool with a tick spacing that hasn't been used to create a pool for the given token pair. In this case, you'll receive a pool object with default parameters and an indication that the pool has not been set up.\n\nWhen fetching all pools for a token pair, which iterates through all possible tick spacings, both initialized and uninitialized pools can be returned, allowing you to identify pools that have not yet been created.\n",f="\n### Fetching a pool by Address\n\nIf you already have the address of a Whirlpool:\n\n1. **Whirlpool Address**: Provide the address of the specific Whirlpool you want to fetch.\n2. **Fetch Pool Details**: Use the function to fetch the details of the Whirlpool at the provided address.\n",g="\n### Fetching a Splash Pool by Token Pair\n\n1. **Token Mint Addresses**: Provide the mint addresses of the two tokens that make up the liquidity pool.\n2. **Fetch Pool Details**: Use the appropriate function to fetch the details of the specified Splash Pool.\n",j="\n### Fetching a Concentrated Liquidity Pool by Token Pair\n\n1. **Token Mint Addresses**: Provide the mint addresses of the two tokens that make up the liquidity pool.\n2. **Tick Spacing**: Specify the tick spacing, which defines the intervals for price ticks.\n3. **Fetch Pool Details**: Use the appropriate function to fetch the details of the specified Concentrated Liquidity Pool.\n",m="\n### Fetching Pools by Token Pairs\n1. **Token Mint Addresses**: Provide the mint addresses of the two tokens that make up the liquidity pool.\n2. **Fetch Pool Details**: Use the appropriate function to fetch the details of all pools for the specified token pair.\n",v=[{value:"1. Overview of Pool Monitoring",id:"1-overview-of-pool-monitoring",level:2},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Reading Whirlpool Accounts",id:"reading-whirlpool-accounts",level:3},{value:"Fetching Accounts",id:"fetching-accounts",level:3},{value:"1. Account Fetcher",id:"1-account-fetcher",level:3},{value:"2. Parsing fetched AccountInfo data",id:"2-parsing-fetched-accountinfo-data",level:3},{value:"Whirlpool Client",id:"whirlpool-client",level:3},{value:"Deriving Account Addresses",id:"deriving-account-addresses",level:3},{value:"3. Using Pool Data",id:"3-using-pool-data",level:2},{value:"4. Best Practices",id:"4-best-practices",level:2}];function k(o){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...o.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"monitoring-liquidity-pools-on-orca",children:"Monitoring Liquidity Pools on Orca"})}),"\n",(0,i.jsx)(r.oz,{children:p}),"\n",(0,i.jsx)(e.h2,{id:"1-overview-of-pool-monitoring",children:"1. Overview of Pool Monitoring"}),"\n",(0,i.jsx)(e.p,{children:"Fetching liquidity pool details helps developers gain insight into the current state of the pool, whether it is initialized or uninitialized, and retrieve relevant metrics like liquidity, price, and fee rates."}),"\n",(0,i.jsx)(e.p,{children:"The SDKs offer three main functions to help developers monitor the pools:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fetch Splash Pool"}),": Fetches the details of a specific Splash Pool."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fetch Concentrated Liquidity Pool"}),": Fetches the details of a specific Concentrated Liquidity Pool."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Fetch Pools"}),": Fetches all possible liquidity pools between two token mints, with various tick spacings."]}),"\n"]}),"\n",(0,i.jsx)(r.oz,{children:u}),"\n",(0,i.jsx)(e.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),"\n",(0,i.jsxs)(s.A,{groupId:"sdk-type",children:[(0,i.jsxs)(a.A,{value:"rust",label:"Rust",children:[(0,i.jsx)(r.oz,{children:f}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_whirlpool, set_whirlpools_config_address, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let whirlpool_address = Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap(); // SOL/devUSDC\n\n    let whirlpool = fetch_whirlpool(&rpc, whirlpool_address).await.unwrap();\n    \n    println!("Pool data: {:?}", whirlpool.data);\n}\n'})}),(0,i.jsx)(r.oz,{children:g}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_splash_pool, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n\n    let pool_info = fetch_splash_pool(&rpc, token_a, token_b).await.unwrap();\n\n    match pool_info {\n        PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n        PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n    }\n}\n'})}),(0,i.jsx)(r.oz,{children:j}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_concentrated_liquidity_pool, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n    let tick_spacing = 64;\n\n    let pool_info = fetch_concentrated_liquidity_pool(&rpc, token_a, token_b, tick_spacing).await.unwrap();\n\n    match pool_info {\n        PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n        PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n    }\n}\n'})}),(0,i.jsx)(r.oz,{children:m}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_whirlpools_by_token_pair, set_whirlpools_config_address, PoolInfo, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let token_a = Pubkey::from_str("So11111111111111111111111111111111111111112").unwrap();\n    let token_b = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap(); // devUSDC\n\n    let pool_infos = fetch_whirlpools_by_token_pair(&rpc, token_a, token_b)\n        .await\n        .unwrap();\n\n    for pool_info in pool_infos {\n        match pool_info {\n            PoolInfo::Initialized(pool) => println!("Pool is initialized: {:?}", pool),\n            PoolInfo::Uninitialized(pool) => println!("Pool is not initialized: {:?}", pool),\n        }\n    }\n}\n'})})]}),(0,i.jsxs)(a.A,{value:"ts-kit",label:"TypeScript Kit",children:[(0,i.jsx)(r.oz,{children:f}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { fetchWhirlpool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst whirlpoolAddress = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\"); // SOL/devUSDC\n\nconst whirlpool = await fetchWhirlpool(\n  devnetRpc,\n  whirlpoolAddress\n);\n\nconsole.log(\"Pool data:\", whirlpool.data);\n"})}),(0,i.jsx)(r.oz,{children:g}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { fetchSplashPool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\"); //devUSDC\n\nconst poolInfo = await fetchSplashPool(\n  devnetRpc,\n  tokenMintOne,\n  tokenMintTwo\n);\n\nif (poolInfo.initialized) {\n  console.log(\"Pool is initialized:\", poolInfo);\n} else {\n  console.log(\"Pool is not initialized:\", poolInfo);\n};\n"})}),(0,i.jsx)(r.oz,{children:j}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { fetchConcentratedLiquidityPool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\n\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\nconst tickSpacing = 64;\n\nconst poolInfo = await fetchConcentratedLiquidityPool(\n  devnetRpc,\n  tokenMintOne,\n  tokenMintTwo,\n  tickSpacing\n);\n\nif (poolInfo.initialized) {\n  console.log(\"Pool is initialized:\", poolInfo);\n} else {\n  console.log(\"Pool is not initialized:\", poolInfo);\n};\n"})}),(0,i.jsx)(r.oz,{children:m}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"import { fetchWhirlpoolsByTokenPair, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\n\nconst tokenMintOne = address(\"So11111111111111111111111111111111111111112\");\nconst tokenMintTwo = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\n\nconst poolInfos = await fetchWhirlpoolsByTokenPair(\n  devnetRpc,\n  tokenMintOne,\n  tokenMintTwo\n);\n\npoolInfos.forEach((poolInfo) => {\n  if (poolInfo.initialized) {\n    console.log(\"Pool is initialized:\", poolInfo);\n  } else {\n    console.log(\"Pool is not initialized:\", poolInfo);\n  }\n});\n"})})]}),(0,i.jsxs)(a.A,{value:"ts-legacy",label:"TypeScript Legacy",children:[(0,i.jsx)(e.h3,{id:"reading-whirlpool-accounts",children:"Reading Whirlpool Accounts"}),(0,i.jsx)(e.p,{children:"The SDK provides the following methods to fetch and parse data from Whirlpool accounts on-chain."}),(0,i.jsx)(e.h3,{id:"fetching-accounts",children:"Fetching Accounts"}),(0,i.jsx)(e.p,{children:"The TypeScript SDK has types setup to help you parse the corresponding accounts on-chain."}),(0,i.jsx)(e.h3,{id:"1-account-fetcher",children:"1. Account Fetcher"}),(0,i.jsxs)(e.p,{children:["Use the ",(0,i.jsx)(e.a,{href:"https://dev.orca.so/legacy/classes/WhirlpoolAccountFetcher.html",children:"AccountFetcher"})," class's get functions to fetch and parse the Whirlpool account that you need. Note that this class also provides caching options."]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"const fetcher = new WhirlpoolAccountFetcher(connection);\nconst config: WhirlpoolsConfigData = await fetcher.getConfig(CONFIG_PUBLIC_KEY);\n\nconst poolAddress = PDAUtil.getPool(...);\nconst pool: WhirlpoolData = await fetcher.getPool(poolAddress);\n"})}),(0,i.jsx)(e.h3,{id:"2-parsing-fetched-accountinfo-data",children:"2. Parsing fetched AccountInfo data"}),(0,i.jsxs)(e.p,{children:["If you already have the Buffer from fetching the AccountInfo, use the Parsables classes (eg. ",(0,i.jsx)(e.a,{href:"https://dev.orca.so/legacy/classes/ParsableWhirlpool.html",children:"ParsableWhirlpool"}),") in the SDK to parse account buffer data into readable types."]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"const whirlpoolAccountInfo: Buffer = ...\nconst whirlpool: WhirlpoolData = ParsableWhirlpool.parse(accountInfoData)\n"})}),(0,i.jsx)(e.h3,{id:"whirlpool-client",children:"Whirlpool Client"}),(0,i.jsxs)(e.p,{children:["If you are already using ",(0,i.jsx)(e.a,{href:"https://dev.orca.so/legacy/interfaces/WhirlpoolClient.html",children:"WhirlpoolClient"}),", you can fetch the data from the ",(0,i.jsx)(e.code,{children:"Whirlpool"})," or ",(0,i.jsx)(e.code,{children:"Position"})," class directly."]}),(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-tsx",children:"const context = new WhirlpoolContext(...);\nconst fetcher = new AccountFetcher(context.provider.connection);\nconst client = buildWhirlpoolClient(context, fetcher);\nconst pool = await client.getPool(poolAddress);\nconst position = await client.getPosition(positionAddress);\n\nconst poolData: WhirlpoolData = pool.getData();\nconst positionData: PositionData = position.getData();\n\n// Perform Action...\n\nconst newestData = pool.refreshData();\n"})}),(0,i.jsx)(e.h3,{id:"deriving-account-addresses",children:"Deriving Account Addresses"}),(0,i.jsxs)(e.p,{children:["Almost all Whirlpools accounts are Program Derived Addresses. Use the ",(0,i.jsx)(e.a,{href:"https://dev.orca.so/legacy/classes/PDAUtil.html",children:"PDAUtil"})," class to derive the required addresses to access on-chain accounts."]})]})]}),"\n",(0,i.jsx)(e.h2,{id:"3-using-pool-data",children:"3. Using Pool Data"}),"\n",(0,i.jsx)(e.p,{children:"After fetching pool information, you can use it to:"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Check if Pool Exists"}),": Determine if a pool for a specific token pair and tick spacing has been created."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Monitor Liquidity"}),": Track the amount of liquidity in the pool over time."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Track Prices"}),": Monitor the current price of tokens in the pool."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Calculate Fees"}),": Calculate expected fees based on the pool's fee rate and volume."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Data Analytics"}),": Build analytics dashboards tracking pool performance and metrics."]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"4-best-practices",children:"4. Best Practices"}),"\n",(0,i.jsx)(e.p,{children:"When monitoring pools, consider these best practices:"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Caching"}),": Implement caching to reduce RPC calls, especially for frequently accessed pools."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Error Handling"}),": Properly handle cases where pools might not exist."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Batch Requests"}),": When possible, batch your requests to reduce the number of RPC calls."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Rate Limiting"}),": Be mindful of RPC rate limits when monitoring multiple pools."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Data Freshness"}),": Determine how recent the data needs to be for your application."]}),"\n"]})]})}function P(o={}){const{wrapper:e}={...(0,l.R)(),...o.components};return e?(0,i.jsx)(e,{...o,children:(0,i.jsx)(k,{...o})}):k(o)}}}]);