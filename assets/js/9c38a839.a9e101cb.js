"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[125],{9958:(o,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>x,fetchingPositionsSection:()=>f,frontMatter:()=>c,implementationExampleSection:()=>v,introText:()=>h,metadata:()=>e,nextStepsSection:()=>y,overviewSection:()=>u,toc:()=>_,walletPositionsSection:()=>m,whirlpoolPositionsSection:()=>g,workingWithDataSection:()=>w});const e=JSON.parse('{"id":"SDKs/Position Management/Monitor Positions","title":"Monitor Positions","description":"With position monitoring, you can:","source":"@site/docs/03-SDKs/04-Position Management/05-Monitor Positions.mdx","sourceDirName":"03-SDKs/04-Position Management","slug":"/SDKs/Position Management/Monitor Positions","permalink":"/SDKs/Position Management/Monitor Positions","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-SDKs/04-Position Management/05-Monitor Positions.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Monitor Positions","hide_table_of_contents":true},"sidebar":"sidebar","previous":{"title":"Close Position","permalink":"/SDKs/Position Management/Close Position"},"next":{"title":"Trade","permalink":"/SDKs/Trade"}}');var t=i(1085),s=i(1184),a=i(95),r=i(4435),l=i(8156);const c={sidebar_label:"Monitor Positions",hide_table_of_contents:!0},d=void 0,p={},h="\nRetrieving details about positions held in liquidity pools is an essential part of managing your liquidity and monitoring performance. This guide explains how to use the SDK to gather information about all active positions held by a given wallet.\n",u="\n## 1. Overview of Position Monitoring\nMonitoring positions helps developers retrieve information on liquidity positions associated with a specific wallet. It scans the Solana blockchain for token accounts owned by the wallet, determines which ones represent positions, and decodes the data to provide detailed information about each position.\n\nWith position monitoring, you can:\n- Identify all liquidity positions held by a wallet\n- Gather information about liquidity, price ranges, and fees earned\n- Track position performance over time\n- Make informed decisions about adjusting or closing positions\n",f="\n## 2. Fetching Positions\n",m="\n### Fetching Positions for a Wallet\n    \nFetching positions is a straightforward process:\n\n1. **RPC Client**: Use a Solana RPC client to interact with the blockchain.\n2. **Wallet Address**: Provide the wallet address of the user whose positions you want to fetch.\n3. **Fetch Positions**: Use the appropriate function to retrieve all positions held by the specified wallet.\n",g="\n### Fetching Positions in a Whirlpool\n    \nTo fetch all positions in a specific Whirlpool:\n\n1. **RPC Client**: Use a Solana RPC client to interact with the blockchain.\n2. **Whirlpool Address**: Provide the whirlpool address for the positions you want to fetch.\n3. **Fetch Positions**: Use the appropriate function to retrieve all positions in a whirlpool.\n",w="\n## 3. Working with Position Data\n\nAfter fetching position information, you can use it to:\n\n1. **Track Position Performance**: Monitor the performance of each position over time, including fees earned and value changes.\n2. **Identify Optimal Actions**: Determine when to adjust liquidity, harvest rewards, or close positions based on performance metrics.\n3. **Calculate Returns**: Compute the return on investment for each position by comparing current value to initial deposit.\n4. **Build Trading Strategies**: Develop automated strategies for position management based on market conditions.\n5. **Portfolio Analytics**: Create dashboards to visualize position performance across multiple pools.\n",v="\n## 4. Implementation Example\n\nSuppose you're building a portfolio tracker for Whirlpool positions. You can create a monitoring service that periodically:\n\n1. Fetches all positions for a user's wallet\n2. Calculates current value and accumulated fees for each position\n3. Compares performance against market benchmarks\n4. Alerts users when positions require attention (e.g., out of range, significant fee accumulation)\n\nThis monitoring capability is essential for both manual traders and algorithmic strategies.\n",y="\n## 5. Next Steps\n\nAfter monitoring positions, you might want to:\n\n- [Adjust Liquidity](03-Adjust%20Liquidity.mdx): Modify the amount of liquidity in positions based on their performance.\n- [Harvest Rewards](04-Harvest.mdx): Collect accumulated fees and rewards from profitable positions.\n- [Close Position](04-Close%20Position.mdx): Exit positions that are no longer aligned with your strategy.\n\nBy effectively monitoring positions, you gain the insights needed to optimize your liquidity management strategy and maximize returns.\n",_=[{value:"Identifying Wallet Positions",id:"identifying-wallet-positions",level:2}];function P(o){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...o.components};return(0,t.jsxs)(a.A,{groupId:"sdk-type",children:[(0,t.jsxs)(r.A,{value:"rust",label:"Rust",children:[(0,t.jsx)(l.oz,{children:h}),(0,t.jsx)(l.oz,{children:u}),(0,t.jsx)(l.oz,{children:f}),(0,t.jsx)(l.oz,{children:m}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_positions_for_owner, set_whirlpools_config_address, WhirlpoolsConfigInput\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let owner_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n\n    let positions = fetch_positions_for_owner(&rpc, owner_address)\n        .await\n        .unwrap();\n\n    println!("Positions: {:?}", positions);\n}\n'})}),(0,t.jsx)(l.oz,{children:g}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use orca_whirlpools::{\n    fetch_positions_in_whirlpool, set_whirlpools_config_address, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let whirlpool_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n\n    let positions = fetch_positions_in_whirlpool(&rpc, whirlpool_address)\n        .await\n        .unwrap();\n\n    println!("Positions: {:?}", positions);\n}\n'})}),(0,t.jsx)(l.oz,{children:w}),(0,t.jsx)(l.oz,{children:v}),(0,t.jsx)(l.oz,{children:y})]}),(0,t.jsxs)(r.A,{value:"ts",label:"TypeScript Kit",default:!0,children:[(0,t.jsx)(l.oz,{children:h}),(0,t.jsx)(l.oz,{children:u}),(0,t.jsx)(l.oz,{children:f}),(0,t.jsx)(l.oz,{children:m}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { fetchPositionsForOwner, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst owner = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\"); // set an owner address\n\nconst positions = await fetchPositionsForOwner(devnetRpc, owner);\n\nconsole.log(positions);\n"})}),(0,t.jsx)(l.oz,{children:g}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import { fetchPositionsInWhirlpool, setWhirlpoolsConfig } from '@orca-so/whirlpools';\nimport { createSolanaRpc, devnet, address } from '@solana/kit';\n\nawait setWhirlpoolsConfig('solanaDevnet');\nconst devnetRpc = createSolanaRpc(devnet('https://api.devnet.solana.com'));\nconst whirlpoolAddress = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\");\n\nconst positions = await fetchPositionsInWhirlpool(devnetRpc, whirlpoolAddress);\n\nconsole.log(positions);\n"})}),(0,t.jsx)(l.oz,{children:w}),(0,t.jsx)(l.oz,{children:v}),(0,t.jsx)(l.oz,{children:y})]}),(0,t.jsxs)(r.A,{value:"ts-legacy",label:"TypeScript Legacy",children:[(0,t.jsx)(n.h2,{id:"identifying-wallet-positions",children:"Identifying Wallet Positions"}),(0,t.jsxs)(n.p,{children:["To fetch all position accounts of a wallet, you can use ",(0,t.jsx)(n.a,{href:"https://dev.orca.so/legacy/functions/_orca-so_whirlpools-sdk.getAllPositionAccountsByOwner.html",children:(0,t.jsx)(n.code,{children:"getAllPositionAccountsByOwner"})}),"."]}),(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," This documentation section is currently being expanded. More detailed examples and usage patterns will be added in future updates."]}),"\n"]})]})]})}function x(o={}){const{wrapper:n}={...(0,s.R)(),...o.components};return n?(0,t.jsx)(n,{...o,children:(0,t.jsx)(P,{...o})}):P(o)}}}]);