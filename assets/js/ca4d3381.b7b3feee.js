"use strict";(self.webpackChunk_orca_so_whirlpools_docs=self.webpackChunk_orca_so_whirlpools_docs||[]).push([[724],{95:(e,t,n)=>{n.d(t,{A:()=>v});var o=n(4041),i=n(4357),a=n(5245),r=n(6090),s=n(3190),l=n(838),c=n(6423),u=n(6326);function d(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:o,default:i}}=e;return{value:t,label:n,attributes:o,default:i}}))}(n);return function(e){const t=(0,c.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const i=(0,r.W6)(),a=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l.aZ)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(i.location.search);t.set(a,e),i.replace({...i.location,search:t.toString()})}),[a,i])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:i}=e,a=h(e),[r,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const o=n.find((e=>e.default))??n[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:t,tabValues:a}))),[c,d]=m({queryString:n,groupId:i}),[x,f]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[i,a]=(0,u.Dv)(n);return[i,(0,o.useCallback)((e=>{n&&a.set(e)}),[n,a])]}({groupId:i}),w=(()=>{const e=c??x;return p({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{w&&l(w)}),[w]);return{selectedValue:r,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),f(e)}),[d,f,a]),tabValues:a}}var f=n(1310);const w={tabList:"tabList_M0Dn",tabItem:"tabItem_ysIP"};var g=n(1085);function j(e){let{className:t,block:n,selectedValue:o,selectValue:r,tabValues:s}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.a_)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),i=s[n].value;i!==o&&(c(t),r(i))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:a}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,ref:e=>{l.push(e)},onKeyDown:d,onClick:u,...a,className:(0,i.A)("tabs__item",w.tabItem,a?.className,{"tabs__item--active":o===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function k(e){const t=x(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",w.tabList),children:[(0,g.jsx)(j,{...t,...e}),(0,g.jsx)(y,{...t,...e})]})}function v(e){const t=(0,f.A)();return(0,g.jsx)(k,{...e,children:d(e.children)},String(t))}},1184:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var o=n(4041);const i={},a=o.createContext(i);function r(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(a.Provider,{value:t},e.children)}},4435:(e,t,n)=>{n.d(t,{A:()=>r});n(4041);var o=n(4357);const i={tabItem:"tabItem_OMyP"};var a=n(1085);function r(e){let{children:t,hidden:n,className:r}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,o.A)(i.tabItem,r),hidden:n,children:t})}},7102:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"SDKs/Trade","title":"Executing a Token Swap","description":"You can use the SDK to execute a token swap on Orca. Whether you\'re swapping a specific amount of input tokens or looking to receive a precise amount of output tokens, this function handles the preparation of token accounts, liquidity data, and instruction assembly. It also manages slippage tolerance to ensure that swaps are executed within acceptable price changes.","source":"@site/docs/03-SDKs/05-Trade.mdx","sourceDirName":"03-SDKs","slug":"/SDKs/Trade","permalink":"/SDKs/Trade","draft":false,"unlisted":false,"editUrl":"https://github.com/orca-so/whirlpools/tree/main/docs/whirlpool/docs/03-SDKs/05-Trade.mdx","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_label":"Trade","hide_table_of_contents":true},"sidebar":"sidebar","previous":{"title":"Monitor Positions","permalink":"/SDKs/Position Management/Monitor Positions"},"next":{"title":"Send Transactions","permalink":"/SDKs/Send Transaction"}}');var i=n(1085),a=n(1184),r=n(95),s=n(4435);const l={sidebar_label:"Trade",hide_table_of_contents:!0},c="Executing a Token Swap",u={},d=[{value:"1. Overview of Executing a Token Swap",id:"1-overview-of-executing-a-token-swap",level:2},{value:"2. Getting Started Guide",id:"2-getting-started-guide",level:2},{value:"Executing a Token Swap",id:"executing-a-token-swap-1",level:3},{value:"3. Example Usage",id:"3-example-usage",level:2},{value:"4. Next Steps",id:"4-next-steps",level:2},{value:"1. Overview of Executing a Token Swap",id:"1-overview-of-executing-a-token-swap-1",level:2},{value:"2. Getting Started Guide",id:"2-getting-started-guide-1",level:2},{value:"Executing a Token Swap",id:"executing-a-token-swap-2",level:3},{value:"3. Example Usage",id:"3-example-usage-1",level:2},{value:"4. Next Steps",id:"4-next-steps-1",level:2},{value:"Trade with WhirlpoolClient",id:"trade-with-whirlpoolclient",level:2},{value:"Generating a swap quote by input or output token",id:"generating-a-swap-quote-by-input-or-output-token",level:3},{value:"Adding a developer fee to the swap",id:"adding-a-developer-fee-to-the-swap",level:3},{value:"The Manual Way",id:"the-manual-way",level:2},{value:"Trade Parameters",id:"trade-parameters",level:3},{value:"Tick Arrays",id:"tick-arrays",level:3},{value:"Common Usage Examples",id:"common-usage-examples",level:3}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"executing-a-token-swap",children:"Executing a Token Swap"})}),"\n",(0,i.jsx)(t.p,{children:"You can use the SDK to execute a token swap on Orca. Whether you're swapping a specific amount of input tokens or looking to receive a precise amount of output tokens, this function handles the preparation of token accounts, liquidity data, and instruction assembly. It also manages slippage tolerance to ensure that swaps are executed within acceptable price changes."}),"\n",(0,i.jsx)(t.p,{children:"This guide explains how to use the SDK to perform a token swap in an Orca Whirlpool."}),"\n",(0,i.jsxs)(r.A,{groupId:"sdk-type",children:[(0,i.jsxs)(s.A,{value:"rust",label:"Rust",children:[(0,i.jsx)(t.h2,{id:"1-overview-of-executing-a-token-swap",children:"1. Overview of Executing a Token Swap"}),(0,i.jsx)(t.p,{children:"The SDK allows you to swap tokens between different pools on Orca. It handles the calculation of token amounts, manages slippage, and assembles the necessary instructions for executing the swap."}),(0,i.jsx)(t.p,{children:"With this function, you can:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Swap an exact amount of input tokens for the maximum possible output."}),"\n",(0,i.jsx)(t.li,{children:"Specify the desired amount of output tokens and determine the necessary input."}),"\n",(0,i.jsx)(t.li,{children:"Control slippage to manage your risk during volatile market conditions."}),"\n"]}),(0,i.jsx)(t.h2,{id:"2-getting-started-guide",children:"2. Getting Started Guide"}),(0,i.jsx)(t.p,{children:"Before executing a token swap, ensure you have completed the environment setup:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"RPC Setup"}),": Use a Solana RPC client to communicate with the blockchain."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Wallet Creation"}),": Create a wallet to interact with the Solana network."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Devnet Airdrop"}),": Fund your wallet with a Solana devnet airdrop to cover transaction fees."]}),"\n"]}),(0,i.jsxs)(t.p,{children:["For more details, refer to our ",(0,i.jsx)(t.a,{href:"/SDKs/Environment%20Setup",children:"Environment Setup Guide"})]}),(0,i.jsx)(t.h3,{id:"executing-a-token-swap-1",children:"Executing a Token Swap"}),(0,i.jsx)(t.p,{children:"To execute a token swap in an Orca Whirlpool, follow these steps:"}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"RPC Client"}),": Use a Solana RPC client to interact with the blockchain."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pool Address"}),": Provide the address of the Orca Whirlpool pool where the swap will take place."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Swap Parameters"}),": Define the swap parameters. You only need to provide one of these parameters, and the function will compute the others in the returned quote based on the current price of the pool:"]}),"\n"]}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"inputAmount"}),": Specify the amount of tokens to swap (if exact input)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"outputAmount"}),": Specify the desired amount of tokens to receive (if exact output)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"mint"}),": Provide the mint address of the token you want to swap out."]}),"\n"]}),(0,i.jsxs)(t.ol,{start:"4",children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Slippage tolerance"}),": Set the maximum slippage tolerance (optional, defaults to 1%). Slippage refers to the difference between the expected amounts of tokens received or sent during the swap and the actual amounts executed. A lower slippage tolerance reduces the risk of receiving fewer tokens than expected, but may lead to failed transactions if the market moves too quickly. For example, if you expect to receive 1,000 units of Token B for 100 units of Token A, with a 1% slippage tolerance, the maximum Token A spent will be 101, and the minimum Token B received will be 990."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Signer"}),": This can be your wallet, which will fund the pool initialization. If a signer is not specified, the default wallet will be used. You can configure the default wallet through the SDK."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Create Instructions"}),": Use the appropriate function to generate the necessary instructions for the swap."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-rust",children:'use crate::utils::load_wallet;\nuse orca_whirlpools::{\n    set_whirlpools_config_address, swap_instructions, SwapType, WhirlpoolsConfigInput,\n};\nuse solana_client::nonblocking::rpc_client::RpcClient;\nuse solana_sdk::pubkey::Pubkey;\nuse std::str::FromStr;\n\n#[tokio::main]\nasync fn main() {\n    set_whirlpools_config_address(WhirlpoolsConfigInput::SolanaDevnet).unwrap();\n    let rpc = RpcClient::new("https://api.devnet.solana.com".to_string());\n    let wallet = load_wallet();\n    let whirlpool_address =\n        Pubkey::from_str("3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt").unwrap();\n    let mint_address = Pubkey::from_str("BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k").unwrap();\n    let input_amount = 1_000_000;\n\n    let result = swap_instructions(\n        &rpc,\n        whirlpool_address,\n        input_amount,\n        mint_address,\n        SwapType::ExactIn,\n        Some(100),\n        Some(wallet.pubkey()),\n    )\n    .await\n    .unwrap();\n\n    // The instructions may include new token accounts that need to be created\n    // and signed for with their corresponding Keypair.\n    let mut signers: Vec<&dyn Signer> = vec![&wallet];\n    signers.extend(result.additional_signers.iter().map(|kp| kp as &dyn Signer));\n\n    let signature = build_and_send_transaction(\n        result.instructions,\n        &signers,\n        Some(CommitmentLevel::Confirmed),\n        None, // No address lookup tables\n    ).await?;\n\n    println!("Quote estimated token out: {:?}", result.quote);\n    println!("Number of Instructions: {}", result.instructions.len());\n    println!("Signers: {:?}", signers);        \n    println!("Transaction sent: {}", signature);\n'})}),(0,i.jsxs)(t.ol,{start:"7",children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Submit Transaction"}),": Include the generated instructions in a Solana transaction and send it to the network using the Solana SDK."]}),"\n"]}),(0,i.jsx)(t.h2,{id:"3-example-usage",children:"3. Example Usage"}),(0,i.jsx)(t.p,{children:"Suppose you are developing an arbitrage bot that looks for price discrepancies between different liquidity pools on Orca. By using the SDK, the bot can retrieve the quote object for a potential swap, which includes details about the token amounts and expected output. The bot can quickly compare quotes from multiple pools to identify arbitrage opportunities and execute profitable swaps."}),(0,i.jsx)(t.h2,{id:"4-next-steps",children:"4. Next Steps"}),(0,i.jsx)(t.p,{children:"After successfully executing a token swap, you might want to:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/SDKs/Position%20Management/Open%20Position",children:"Open a Position"}),": Provide liquidity to the pool and earn fees."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/SDKs/Position%20Management/Monitor%20Positions",children:"Monitor Positions"}),": Track your position's performance over time."]}),"\n",(0,i.jsx)(t.li,{children:"Build more complex trading strategies by combining multiple swaps."}),"\n"]}),(0,i.jsx)(t.p,{children:"By effectively using the SDK's swap functionality, you can create powerful trading applications on Orca Whirlpools."})]}),(0,i.jsxs)(s.A,{value:"ts",label:"TypeScript Kit",children:[(0,i.jsx)(t.h2,{id:"1-overview-of-executing-a-token-swap-1",children:"1. Overview of Executing a Token Swap"}),(0,i.jsx)(t.p,{children:"The SDK allows you to swap tokens between different pools on Orca. It handles the calculation of token amounts, manages slippage, and assembles the necessary instructions for executing the swap."}),(0,i.jsx)(t.p,{children:"With this function, you can:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Swap an exact amount of input tokens for the maximum possible output."}),"\n",(0,i.jsx)(t.li,{children:"Specify the desired amount of output tokens and determine the necessary input."}),"\n",(0,i.jsx)(t.li,{children:"Control slippage to manage your risk during volatile market conditions."}),"\n"]}),(0,i.jsx)(t.h2,{id:"2-getting-started-guide-1",children:"2. Getting Started Guide"}),(0,i.jsx)(t.p,{children:"Before executing a token swap, ensure you have completed the environment setup:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"RPC Setup"}),": Use a Solana RPC client to communicate with the blockchain."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Wallet Creation"}),": Create a wallet to interact with the Solana network."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Devnet Airdrop"}),": Fund your wallet with a Solana devnet airdrop to cover transaction fees."]}),"\n"]}),(0,i.jsxs)(t.p,{children:["For more details, refer to our ",(0,i.jsx)(t.a,{href:"/SDKs/Environment%20Setup",children:"Environment Setup Guide"})]}),(0,i.jsx)(t.h3,{id:"executing-a-token-swap-2",children:"Executing a Token Swap"}),(0,i.jsx)(t.p,{children:"To execute a token swap in an Orca Whirlpool, follow these steps:"}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"RPC Client"}),": Use a Solana RPC client to interact with the blockchain."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Pool Address"}),": Provide the address of the Orca Whirlpool pool where the swap will take place."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Swap Parameters"}),": Define the swap parameters. You only need to provide one of these parameters, and the function will compute the others in the returned quote based on the current price of the pool:"]}),"\n"]}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"inputAmount"}),": Specify the amount of tokens to swap (if exact input)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"outputAmount"}),": Specify the desired amount of tokens to receive (if exact output)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"mint"}),": Provide the mint address of the token you want to swap out."]}),"\n"]}),(0,i.jsxs)(t.ol,{start:"4",children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Slippage tolerance"}),": Set the maximum slippage tolerance (optional, defaults to 1%). Slippage refers to the difference between the expected amounts of tokens received or sent during the swap and the actual amounts executed. A lower slippage tolerance reduces the risk of receiving fewer tokens than expected, but may lead to failed transactions if the market moves too quickly. For example, if you expect to receive 1,000 units of Token B for 100 units of Token A, with a 1% slippage tolerance, the maximum Token A spent will be 101, and the minimum Token B received will be 990."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Signer"}),": This can be your wallet, which will fund the pool initialization. If a signer is not specified, the default wallet will be used. You can configure the default wallet through the SDK."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Create Instructions"}),": Use the appropriate function to generate the necessary instructions for the swap."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Submit Transaction"}),": Use the callback to submit the transaction."]}),"\n"]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"import { setWhirlpoolsConfig, swap } from '@orca-so/whirlpools';\nimport { createSolanaRpc, address, setRpc, setPayerFromBytes } from '@solana/kit';\nimport secret from \"wallet.json\";\n\nawait setWhirlpoolsConfig('solanaDevnet');\nawait setRpc('https://api.devnet.solana.com');\nconst signer = await setPayerFromBytes(new Uint8Array(secret));\nconst whirlpoolAddress = address(\"3KBZiL2g8C7tiJ32hTv5v3KM7aK9htpqTw4cTXz1HvPt\");\nconst mintAddress = address(\"BRjpCHtyQLNCo8gqRUr8jtdAj5AjPYQaoqbvcZiHok1k\");\nconst inputAmount = 1_000_000n;\n\nconst { instructions, quote, callback: sendTx } = await swap(\n  devnetRpc,\n  { inputAmount, mint: mintAddress },\n  whirlpoolAddress,\n  100,\n  signer\n);\n\n// Use the callback to submit the transaction\nconst txId = await sendTx();\n\nconsole.log(`Quote estimated token out: ${quote.tokenEstOut}`);\nconsole.log(`Number of instructions:, ${instructions.length}`);\nconsole.log(`Transaction ID: ${txId}`);\n"})}),(0,i.jsx)(t.h2,{id:"3-example-usage-1",children:"3. Example Usage"}),(0,i.jsx)(t.p,{children:"Suppose you are developing an arbitrage bot that looks for price discrepancies between different liquidity pools on Orca. By using the SDK, the bot can retrieve the quote object for a potential swap, which includes details about the token amounts and expected output. The bot can quickly compare quotes from multiple pools to identify arbitrage opportunities and execute profitable swaps."}),(0,i.jsx)(t.h2,{id:"4-next-steps-1",children:"4. Next Steps"}),(0,i.jsx)(t.p,{children:"After successfully executing a token swap, you might want to:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/SDKs/Position%20Management/Open%20Position",children:"Open a Position"}),": Provide liquidity to the pool and earn fees."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"/SDKs/Position%20Management/Monitor%20Positions",children:"Monitor Positions"}),": Track your position's performance over time."]}),"\n",(0,i.jsx)(t.li,{children:"Build more complex trading strategies by combining multiple swaps."}),"\n"]}),(0,i.jsx)(t.p,{children:"By effectively using the SDK's swap functionality, you can create powerful trading applications on Orca Whirlpools."})]}),(0,i.jsxs)(s.A,{value:"ts-legacy",label:"TypeScript Legacy",children:[(0,i.jsxs)(t.p,{children:["Before we begin, you should have an understanding of what ticks are and how they are stored. If not, you can reference ",(0,i.jsx)(t.a,{href:"/Architecture%20Overview/Price%20&%20Ticks",children:"Price & Ticks"}),"."]}),(0,i.jsx)(t.h2,{id:"trade-with-whirlpoolclient",children:"Trade with WhirlpoolClient"}),(0,i.jsx)(t.p,{children:"You can use the swap quote and WhirlpoolClient to easily perform a trade."}),(0,i.jsxs)(t.p,{children:["Learn more about ",(0,i.jsx)(t.code,{children:"amountSpecifiedIsInput"})," , ",(0,i.jsx)(t.code,{children:"aToB"})," in the section below."]}),(0,i.jsx)(t.h3,{id:"generating-a-swap-quote-by-input-or-output-token",children:"Generating a swap quote by input or output token"}),(0,i.jsx)(t.p,{children:"Generate quote with one of the quote functions:"}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/functions/swapQuoteByInputToken.html",children:(0,i.jsx)(t.code,{children:"swapQuoteByInputToken"})})," if you want an estimate on the amount of outputToken received on an amount of inputToken."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/functions/swapQuoteByInputToken.html",children:(0,i.jsx)(t.code,{children:"swapQuoteByOutputToken"})})," if you want an estimate on the amount of inputToken needed to receive a set amount of outputToken."]}),"\n"]}),(0,i.jsxs)(t.p,{children:["The resulting ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/types/SwapQuote.html",children:(0,i.jsx)(t.code,{children:"SwapQuote"})})," object contains the estimations on the expected amount of tokenIn, tokenOut, fees, projected ending sqrtPrice. When you are ready, plug the quote object directly into the swapIx to perform the trade."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"const whirlpoolPda = PDAUtil.getWhirlpool(...);\nconst whirlpoolClient = buildWhirlpoolClient(ctx);\nconst whirlpool = await whirlpoolClient.getPool(whirlpoolPda.publicKey, true);\n// use getData or refreshData, depending on whether you think your data is stale.\nconst whirlpoolData = await whirlpool.getData();\n\nconst inputTokenQuote = await swapQuoteByInputToken(\n  whirlpool,\n  whirlpoolData.tokenMintB,\n  new u64(190000000),\n  Percentage.fromFraction(1, 1000), // 0.1%\n  ctx.program.programId,\n  fetcher,\n  true\n);\n\n// Send out the transaction\nconst txId = await (await whirlpool.swap(inputTokenQuote)).buildAndExecute();\n"})}),(0,i.jsx)(t.h3,{id:"adding-a-developer-fee-to-the-swap",children:"Adding a developer fee to the swap"}),(0,i.jsxs)(t.p,{children:["The SDK also provides ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/functions/swapQuoteByInputTokenWithDevFees.html",children:(0,i.jsx)(t.code,{children:"swapQuoteByInputTokenWithDevFees"})})," & ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#swapWithDevFees",children:(0,i.jsx)(t.code,{children:"swapWithDevFees"})})," function to let developers take a fee as a percentage of the input asset. This feature is a convenient way to calculate the percentage, build a transfer instruction for the fee, and use the remaining input asset in a swap instruction."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"// Wallet used to collect developer fees\nconst DEV_WALLET = new PublicKey(...)\n\nconst whirlpoolPda = PDAUtil.getWhirlpool(...);\nconst whirlpoolClient = buildWhirlpoolClient(ctx);\nconst whirlpool = await whirlpoolClient.getPool(whirlpoolPda.publicKey, true);\n// use getData or refreshData, depending on whether you think your data is stale.\nconst whirlpoolData = await whirlpool.getData();\n\nconst inputTokenQuote = await swapQuoteByInputTokenWithDevFees(\n  whirlpool,\n  whirlpoolData.tokenMintB,\n  new u64(190000000),\n  Percentage.fromFraction(1, 1000), // 0.1%\n  ctx.program.programId,\n  fetcher,\n  Percentage.fromFraction(2, 1000), // 0.2% of the input asset will be sent to DEV_WALLET\n  true\n);\n\n// Send out the transaction\nconst txId = await (await whirlpool.swapWithDevFees(inputTokenQuote, DEV_WALLET)).buildAndExecute();\n"})}),(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"\u2139\ufe0f The developer fee transfer is performed by the SPL Token program or System program, and not the Whirlpools program."}),"\n"]}),(0,i.jsxs)(t.p,{children:["Best practice is to ",(0,i.jsx)(t.a,{href:"https://solanacookbook.com/references/token.html#how-to-create-a-token-account",children:"pre-create Associated Token Accounts (ATA)"})," for each token type which will be sent to the developer wallet. Also, if the fee will be payed in SOL, make sure that the developer wallet has at least 0.001 SOL to ensure that the wallet account will meet rent exemption."]}),(0,i.jsx)(t.h2,{id:"the-manual-way",children:"The Manual Way"}),(0,i.jsx)(t.p,{children:"Manually constructing your own parameters gives you more flexibility in defining the boundaries of your trade."}),(0,i.jsx)(t.h3,{id:"trade-parameters",children:"Trade Parameters"}),(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/interfaces/Whirlpool.html#swap",children:(0,i.jsx)(t.code,{children:"swap"})})," instruction requires the following input (and other common accounts) to execute the trade."]}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"export type SwapInput = {\n  amount: u64;\n  otherAmountThreshold: u64;\n  sqrtPriceLimit: BN;\n  amountSpecifiedIsInput: boolean;\n  aToB: boolean;\n  tickArray0: PublicKey;\n  tickArray1: PublicKey;\n  tickArray2: PublicKey;\n};\n"})}),(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Decide the trade direction with ",(0,i.jsx)(t.code,{children:"aToB"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"If true, you are trading from token A to B"}),"\n",(0,i.jsx)(t.li,{children:"If false, you are trading from token B to A"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Decide the token you would like to cap with ",(0,i.jsx)(t.code,{children:"amountSpecifiedIsInput"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If true, ",(0,i.jsx)(t.code,{children:"amount"})," is the value representing the token being traded from. This amount is subject to trade fees before the trade calculation."]}),"\n",(0,i.jsxs)(t.li,{children:["If false, ",(0,i.jsx)(t.code,{children:"amount"})," is the value representing the token being traded to. This amount is the required token out amount from a trade after fees."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Decide whether you want to cap the other token of the trade using ",(0,i.jsx)(t.code,{children:"otherAmountThreshold"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If ",(0,i.jsx)(t.code,{children:"amountSpecifiedIsInput"})," is true, this amount represents the minimum amount of output token expected from this trade. If you do not want to cap, use 0."]}),"\n",(0,i.jsxs)(t.li,{children:["If ",(0,i.jsx)(t.code,{children:"amountSpecifiedIsInput"})," is false, this amount represents the maximum amount of input token that can be used to trade to an expected amount of the output token. If you do not want to cap, use the maximum amount of tokens in your wallet."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Decide the price limit that you would like to cap this trade to with ",(0,i.jsx)(t.code,{children:"sqrtPriceLimit"}),".","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["If ",(0,i.jsx)(t.code,{children:"aToB"})," is true, the trade will push the price lower. This amount is minimum sqrt-price that the trade will trade to if input token amount is sufficient."]}),"\n",(0,i.jsxs)(t.li,{children:["If ",(0,i.jsx)(t.code,{children:"aToB"})," is false, the trade will push the price higher. This amount is the maximum sqrt-price that the trade will trade to if the input token amount is sufficient."]}),"\n",(0,i.jsxs)(t.li,{children:["If you don't have a cap and want to trade as much as you've defined with ",(0,i.jsx)(t.code,{children:"amount"})," and ",(0,i.jsx)(t.code,{children:"otherAmountThreshold"}),", use the minimum price of your tick-array range for ",(0,i.jsx)(t.code,{children:"bToA"})," and maximum price of your tick-range for ",(0,i.jsx)(t.code,{children:"aToB"}),". If you don't mind hitting tick-array errors or you know your swap won't move the price too much, you can use ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/variables/MIN_SQRT_PRICE.html",children:(0,i.jsx)(t.code,{children:"MIN_SQRT_PRICE"})})," or ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/variables/MAX_SQRT_PRICE.html",children:(0,i.jsx)(t.code,{children:"MAX_SQRT_PRICE"})}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["sqrt-price is a x64 number. So your number would need to multiplied by 2^64. Use ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/classes/PriceMath.html",children:(0,i.jsx)(t.code,{children:"PriceMath"})})," utils here to help you do the conversion."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"amount"})," and ",(0,i.jsx)(t.code,{children:"otherAmountThreshold"})," are u64 numbers. So make sure you shift your expected token numbers by the token's decimal."]}),"\n"]}),(0,i.jsx)(t.h3,{id:"tick-arrays",children:"Tick Arrays"}),(0,i.jsxs)(t.p,{children:["The tick-array parameters are a sequence of tick-arrays that your swap may traverse through. ",(0,i.jsx)(t.code,{children:"tickArray0"})," will always be the PublicKey of the TickArray that houses the current tick-index."]}),(0,i.jsxs)(t.p,{children:["In almost all cases, you can use the ",(0,i.jsx)(t.a,{href:"https://dev.orca.so/legacy/classes/SwapUtils.html#getTickArrays",children:(0,i.jsx)(t.code,{children:"SwapUtils.getTickArrays"})})," to generate the sequence of tick-arrays that you need."]}),(0,i.jsx)(t.p,{children:"If you opt for building it yourself and you know that your swap is small enough that it's unlikely to traverse through an array, simply provide the same tickArray0 account for all 3 accounts. Once you have the sequence of tick-array public keys, you can use the AccountFetcher to check that the tick-arrays are initialized."}),(0,i.jsxs)(t.p,{children:["To learn more about tick-arrays and how its traversal works, read ",(0,i.jsx)(t.a,{href:"/Architecture%20Overview/Understanding%20Tick%20Arrays",children:"Understanding Tick Arrays"}),"."]}),(0,i.jsx)(t.h3,{id:"common-usage-examples",children:"Common Usage Examples"}),(0,i.jsx)(t.p,{children:"Assume all tokens below have a decimal of 6"}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["Trading 100 token A for some amount of token B.","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"aToB = true\namount = 100 * Math.pow(10, 6)\namountSpecifiedIsInput  = true\notherAmountThreshold = 0\nsqrt_price_limit = MIN_SQRT_PRICE\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Trading a max amount of 50 token B for 100 token A","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"aToB = false\namount = 100 * Math.pow(10, 6)\namountSpecifiedIsInput  = false\notherAmountThreshold = 50\nsqrt_price_limit = MAX_SQRT_PRICE\n"})}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["Trade whatever amount needed to move the price from current sqrt-price 50_x64 to sqrt_price 250_x64","\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:"aToB = true\namount = maxAmmountWallet\namountSpecifiedIsInput  = true\notherAmountThreshold = 0\nsqrt_price_limit = 250_x64\n"})}),"\n"]}),"\n"]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);