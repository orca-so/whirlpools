//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_program::pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct InitializeAdaptiveFeeTier {
      
              
          pub whirlpools_config: solana_program::pubkey::Pubkey,
          
              
          pub adaptive_fee_tier: solana_program::pubkey::Pubkey,
          
              
          pub funder: solana_program::pubkey::Pubkey,
          
              
          pub fee_authority: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
      }

impl InitializeAdaptiveFeeTier {
  pub fn instruction(&self, args: InitializeAdaptiveFeeTierInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeAdaptiveFeeTierInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whirlpools_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.adaptive_fee_tier,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&InitializeAdaptiveFeeTierInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeAdaptiveFeeTierInstructionData {
            discriminator: [u8; 8],
                                                                              }

impl InitializeAdaptiveFeeTierInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [77, 99, 208, 200, 141, 123, 117, 48],
                                                                                                                                                                                          }
  }
}

impl Default for InitializeAdaptiveFeeTierInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeAdaptiveFeeTierInstructionArgs {
                  pub fee_tier_index: u16,
                pub tick_spacing: u16,
                pub initialize_pool_authority: Pubkey,
                pub delegated_fee_authority: Pubkey,
                pub default_base_fee_rate: u16,
                pub filter_period: u16,
                pub decay_period: u16,
                pub reduction_factor: u16,
                pub adaptive_fee_control_factor: u32,
                pub max_volatility_accumulator: u32,
                pub tick_group_size: u16,
                pub major_swap_threshold_ticks: u16,
      }


/// Instruction builder for `InitializeAdaptiveFeeTier`.
///
/// ### Accounts:
///
          ///   0. `[]` whirlpools_config
                ///   1. `[writable]` adaptive_fee_tier
                      ///   2. `[writable, signer]` funder
                ///   3. `[signer]` fee_authority
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeAdaptiveFeeTierBuilder {
            whirlpools_config: Option<solana_program::pubkey::Pubkey>,
                adaptive_fee_tier: Option<solana_program::pubkey::Pubkey>,
                funder: Option<solana_program::pubkey::Pubkey>,
                fee_authority: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                        fee_tier_index: Option<u16>,
                tick_spacing: Option<u16>,
                initialize_pool_authority: Option<Pubkey>,
                delegated_fee_authority: Option<Pubkey>,
                default_base_fee_rate: Option<u16>,
                filter_period: Option<u16>,
                decay_period: Option<u16>,
                reduction_factor: Option<u16>,
                adaptive_fee_control_factor: Option<u32>,
                max_volatility_accumulator: Option<u32>,
                tick_group_size: Option<u16>,
                major_swap_threshold_ticks: Option<u16>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeAdaptiveFeeTierBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn whirlpools_config(&mut self, whirlpools_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.whirlpools_config = Some(whirlpools_config);
                    self
    }
            #[inline(always)]
    pub fn adaptive_fee_tier(&mut self, adaptive_fee_tier: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.adaptive_fee_tier = Some(adaptive_fee_tier);
                    self
    }
            #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.funder = Some(funder);
                    self
    }
            #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.fee_authority = Some(fee_authority);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn fee_tier_index(&mut self, fee_tier_index: u16) -> &mut Self {
        self.fee_tier_index = Some(fee_tier_index);
        self
      }
                #[inline(always)]
      pub fn tick_spacing(&mut self, tick_spacing: u16) -> &mut Self {
        self.tick_spacing = Some(tick_spacing);
        self
      }
                #[inline(always)]
      pub fn initialize_pool_authority(&mut self, initialize_pool_authority: Pubkey) -> &mut Self {
        self.initialize_pool_authority = Some(initialize_pool_authority);
        self
      }
                #[inline(always)]
      pub fn delegated_fee_authority(&mut self, delegated_fee_authority: Pubkey) -> &mut Self {
        self.delegated_fee_authority = Some(delegated_fee_authority);
        self
      }
                #[inline(always)]
      pub fn default_base_fee_rate(&mut self, default_base_fee_rate: u16) -> &mut Self {
        self.default_base_fee_rate = Some(default_base_fee_rate);
        self
      }
                #[inline(always)]
      pub fn filter_period(&mut self, filter_period: u16) -> &mut Self {
        self.filter_period = Some(filter_period);
        self
      }
                #[inline(always)]
      pub fn decay_period(&mut self, decay_period: u16) -> &mut Self {
        self.decay_period = Some(decay_period);
        self
      }
                #[inline(always)]
      pub fn reduction_factor(&mut self, reduction_factor: u16) -> &mut Self {
        self.reduction_factor = Some(reduction_factor);
        self
      }
                #[inline(always)]
      pub fn adaptive_fee_control_factor(&mut self, adaptive_fee_control_factor: u32) -> &mut Self {
        self.adaptive_fee_control_factor = Some(adaptive_fee_control_factor);
        self
      }
                #[inline(always)]
      pub fn max_volatility_accumulator(&mut self, max_volatility_accumulator: u32) -> &mut Self {
        self.max_volatility_accumulator = Some(max_volatility_accumulator);
        self
      }
                #[inline(always)]
      pub fn tick_group_size(&mut self, tick_group_size: u16) -> &mut Self {
        self.tick_group_size = Some(tick_group_size);
        self
      }
                #[inline(always)]
      pub fn major_swap_threshold_ticks(&mut self, major_swap_threshold_ticks: u16) -> &mut Self {
        self.major_swap_threshold_ticks = Some(major_swap_threshold_ticks);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = InitializeAdaptiveFeeTier {
                              whirlpools_config: self.whirlpools_config.expect("whirlpools_config is not set"),
                                        adaptive_fee_tier: self.adaptive_fee_tier.expect("adaptive_fee_tier is not set"),
                                        funder: self.funder.expect("funder is not set"),
                                        fee_authority: self.fee_authority.expect("fee_authority is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitializeAdaptiveFeeTierInstructionArgs {
                                                              fee_tier_index: self.fee_tier_index.clone().expect("fee_tier_index is not set"),
                                                                  tick_spacing: self.tick_spacing.clone().expect("tick_spacing is not set"),
                                                                  initialize_pool_authority: self.initialize_pool_authority.clone().expect("initialize_pool_authority is not set"),
                                                                  delegated_fee_authority: self.delegated_fee_authority.clone().expect("delegated_fee_authority is not set"),
                                                                  default_base_fee_rate: self.default_base_fee_rate.clone().expect("default_base_fee_rate is not set"),
                                                                  filter_period: self.filter_period.clone().expect("filter_period is not set"),
                                                                  decay_period: self.decay_period.clone().expect("decay_period is not set"),
                                                                  reduction_factor: self.reduction_factor.clone().expect("reduction_factor is not set"),
                                                                  adaptive_fee_control_factor: self.adaptive_fee_control_factor.clone().expect("adaptive_fee_control_factor is not set"),
                                                                  max_volatility_accumulator: self.max_volatility_accumulator.clone().expect("max_volatility_accumulator is not set"),
                                                                  tick_group_size: self.tick_group_size.clone().expect("tick_group_size is not set"),
                                                                  major_swap_threshold_ticks: self.major_swap_threshold_ticks.clone().expect("major_swap_threshold_ticks is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_adaptive_fee_tier` CPI accounts.
  pub struct InitializeAdaptiveFeeTierCpiAccounts<'a, 'b> {
          
                    
              pub whirlpools_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub adaptive_fee_tier: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub funder: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub fee_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `initialize_adaptive_fee_tier` CPI instruction.
pub struct InitializeAdaptiveFeeTierCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub whirlpools_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub adaptive_fee_tier: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub funder: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub fee_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeAdaptiveFeeTierInstructionArgs,
  }

impl<'a, 'b> InitializeAdaptiveFeeTierCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: InitializeAdaptiveFeeTierCpiAccounts<'a, 'b>,
              args: InitializeAdaptiveFeeTierInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              whirlpools_config: accounts.whirlpools_config,
              adaptive_fee_tier: accounts.adaptive_fee_tier,
              funder: accounts.funder,
              fee_authority: accounts.fee_authority,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whirlpools_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.adaptive_fee_tier.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&InitializeAdaptiveFeeTierInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.whirlpools_config.clone());
                        account_infos.push(self.adaptive_fee_tier.clone());
                        account_infos.push(self.funder.clone());
                        account_infos.push(self.fee_authority.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeAdaptiveFeeTier` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` whirlpools_config
                ///   1. `[writable]` adaptive_fee_tier
                      ///   2. `[writable, signer]` funder
                ///   3. `[signer]` fee_authority
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeAdaptiveFeeTierCpiBuilder<'a, 'b> {
  instruction: Box<InitializeAdaptiveFeeTierCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeAdaptiveFeeTierCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeAdaptiveFeeTierCpiBuilderInstruction {
      __program: program,
              whirlpools_config: None,
              adaptive_fee_tier: None,
              funder: None,
              fee_authority: None,
              system_program: None,
                                            fee_tier_index: None,
                                tick_spacing: None,
                                initialize_pool_authority: None,
                                delegated_fee_authority: None,
                                default_base_fee_rate: None,
                                filter_period: None,
                                decay_period: None,
                                reduction_factor: None,
                                adaptive_fee_control_factor: None,
                                max_volatility_accumulator: None,
                                tick_group_size: None,
                                major_swap_threshold_ticks: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn whirlpools_config(&mut self, whirlpools_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.whirlpools_config = Some(whirlpools_config);
                    self
    }
      #[inline(always)]
    pub fn adaptive_fee_tier(&mut self, adaptive_fee_tier: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.adaptive_fee_tier = Some(adaptive_fee_tier);
                    self
    }
      #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.funder = Some(funder);
                    self
    }
      #[inline(always)]
    pub fn fee_authority(&mut self, fee_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.fee_authority = Some(fee_authority);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn fee_tier_index(&mut self, fee_tier_index: u16) -> &mut Self {
        self.instruction.fee_tier_index = Some(fee_tier_index);
        self
      }
                #[inline(always)]
      pub fn tick_spacing(&mut self, tick_spacing: u16) -> &mut Self {
        self.instruction.tick_spacing = Some(tick_spacing);
        self
      }
                #[inline(always)]
      pub fn initialize_pool_authority(&mut self, initialize_pool_authority: Pubkey) -> &mut Self {
        self.instruction.initialize_pool_authority = Some(initialize_pool_authority);
        self
      }
                #[inline(always)]
      pub fn delegated_fee_authority(&mut self, delegated_fee_authority: Pubkey) -> &mut Self {
        self.instruction.delegated_fee_authority = Some(delegated_fee_authority);
        self
      }
                #[inline(always)]
      pub fn default_base_fee_rate(&mut self, default_base_fee_rate: u16) -> &mut Self {
        self.instruction.default_base_fee_rate = Some(default_base_fee_rate);
        self
      }
                #[inline(always)]
      pub fn filter_period(&mut self, filter_period: u16) -> &mut Self {
        self.instruction.filter_period = Some(filter_period);
        self
      }
                #[inline(always)]
      pub fn decay_period(&mut self, decay_period: u16) -> &mut Self {
        self.instruction.decay_period = Some(decay_period);
        self
      }
                #[inline(always)]
      pub fn reduction_factor(&mut self, reduction_factor: u16) -> &mut Self {
        self.instruction.reduction_factor = Some(reduction_factor);
        self
      }
                #[inline(always)]
      pub fn adaptive_fee_control_factor(&mut self, adaptive_fee_control_factor: u32) -> &mut Self {
        self.instruction.adaptive_fee_control_factor = Some(adaptive_fee_control_factor);
        self
      }
                #[inline(always)]
      pub fn max_volatility_accumulator(&mut self, max_volatility_accumulator: u32) -> &mut Self {
        self.instruction.max_volatility_accumulator = Some(max_volatility_accumulator);
        self
      }
                #[inline(always)]
      pub fn tick_group_size(&mut self, tick_group_size: u16) -> &mut Self {
        self.instruction.tick_group_size = Some(tick_group_size);
        self
      }
                #[inline(always)]
      pub fn major_swap_threshold_ticks(&mut self, major_swap_threshold_ticks: u16) -> &mut Self {
        self.instruction.major_swap_threshold_ticks = Some(major_swap_threshold_ticks);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = InitializeAdaptiveFeeTierInstructionArgs {
                                                              fee_tier_index: self.instruction.fee_tier_index.clone().expect("fee_tier_index is not set"),
                                                                  tick_spacing: self.instruction.tick_spacing.clone().expect("tick_spacing is not set"),
                                                                  initialize_pool_authority: self.instruction.initialize_pool_authority.clone().expect("initialize_pool_authority is not set"),
                                                                  delegated_fee_authority: self.instruction.delegated_fee_authority.clone().expect("delegated_fee_authority is not set"),
                                                                  default_base_fee_rate: self.instruction.default_base_fee_rate.clone().expect("default_base_fee_rate is not set"),
                                                                  filter_period: self.instruction.filter_period.clone().expect("filter_period is not set"),
                                                                  decay_period: self.instruction.decay_period.clone().expect("decay_period is not set"),
                                                                  reduction_factor: self.instruction.reduction_factor.clone().expect("reduction_factor is not set"),
                                                                  adaptive_fee_control_factor: self.instruction.adaptive_fee_control_factor.clone().expect("adaptive_fee_control_factor is not set"),
                                                                  max_volatility_accumulator: self.instruction.max_volatility_accumulator.clone().expect("max_volatility_accumulator is not set"),
                                                                  tick_group_size: self.instruction.tick_group_size.clone().expect("tick_group_size is not set"),
                                                                  major_swap_threshold_ticks: self.instruction.major_swap_threshold_ticks.clone().expect("major_swap_threshold_ticks is not set"),
                                    };
        let instruction = InitializeAdaptiveFeeTierCpi {
        __program: self.instruction.__program,
                  
          whirlpools_config: self.instruction.whirlpools_config.expect("whirlpools_config is not set"),
                  
          adaptive_fee_tier: self.instruction.adaptive_fee_tier.expect("adaptive_fee_tier is not set"),
                  
          funder: self.instruction.funder.expect("funder is not set"),
                  
          fee_authority: self.instruction.fee_authority.expect("fee_authority is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeAdaptiveFeeTierCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            whirlpools_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                adaptive_fee_tier: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                fee_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        fee_tier_index: Option<u16>,
                tick_spacing: Option<u16>,
                initialize_pool_authority: Option<Pubkey>,
                delegated_fee_authority: Option<Pubkey>,
                default_base_fee_rate: Option<u16>,
                filter_period: Option<u16>,
                decay_period: Option<u16>,
                reduction_factor: Option<u16>,
                adaptive_fee_control_factor: Option<u32>,
                max_volatility_accumulator: Option<u32>,
                tick_group_size: Option<u16>,
                major_swap_threshold_ticks: Option<u16>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

