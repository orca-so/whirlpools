//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const INITIALIZE_DYNAMIC_TICK_ARRAY_DISCRIMINATOR: [u8; 8] = [41, 33, 165, 200, 120, 231, 142, 50];

/// Accounts.
#[derive(Debug)]
pub struct InitializeDynamicTickArray {
      
              
          pub whirlpool: solana_pubkey::Pubkey,
          
              
          pub funder: solana_pubkey::Pubkey,
          
              
          pub tick_array: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl InitializeDynamicTickArray {
  pub fn instruction(&self, args: InitializeDynamicTickArrayInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: InitializeDynamicTickArrayInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.whirlpool,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.funder,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.tick_array,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = InitializeDynamicTickArrayInstructionData::new().try_to_vec().unwrap();
          let mut args = args.try_to_vec().unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeDynamicTickArrayInstructionData {
            discriminator: [u8; 8],
                  }

impl InitializeDynamicTickArrayInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [41, 33, 165, 200, 120, 231, 142, 50],
                                              }
  }

    pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
  }

impl Default for InitializeDynamicTickArrayInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct InitializeDynamicTickArrayInstructionArgs {
                  pub start_tick_index: i32,
                pub idempotent: bool,
      }

impl InitializeDynamicTickArrayInstructionArgs {
  pub(crate) fn try_to_vec(&self) -> Result<Vec<u8>, std::io::Error> {
    borsh::to_vec(self)
  }
}


/// Instruction builder for `InitializeDynamicTickArray`.
///
/// ### Accounts:
///
          ///   0. `[]` whirlpool
                      ///   1. `[writable, signer]` funder
                ///   2. `[writable]` tick_array
                ///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct InitializeDynamicTickArrayBuilder {
            whirlpool: Option<solana_pubkey::Pubkey>,
                funder: Option<solana_pubkey::Pubkey>,
                tick_array: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        start_tick_index: Option<i32>,
                idempotent: Option<bool>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl InitializeDynamicTickArrayBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: solana_pubkey::Pubkey) -> &mut Self {
                        self.whirlpool = Some(whirlpool);
                    self
    }
            #[inline(always)]
    pub fn funder(&mut self, funder: solana_pubkey::Pubkey) -> &mut Self {
                        self.funder = Some(funder);
                    self
    }
            #[inline(always)]
    pub fn tick_array(&mut self, tick_array: solana_pubkey::Pubkey) -> &mut Self {
                        self.tick_array = Some(tick_array);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn start_tick_index(&mut self, start_tick_index: i32) -> &mut Self {
        self.start_tick_index = Some(start_tick_index);
        self
      }
                #[inline(always)]
      pub fn idempotent(&mut self, idempotent: bool) -> &mut Self {
        self.idempotent = Some(idempotent);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = InitializeDynamicTickArray {
                              whirlpool: self.whirlpool.expect("whirlpool is not set"),
                                        funder: self.funder.expect("funder is not set"),
                                        tick_array: self.tick_array.expect("tick_array is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = InitializeDynamicTickArrayInstructionArgs {
                                                              start_tick_index: self.start_tick_index.clone().expect("start_tick_index is not set"),
                                                                  idempotent: self.idempotent.clone().expect("idempotent is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `initialize_dynamic_tick_array` CPI accounts.
  pub struct InitializeDynamicTickArrayCpiAccounts<'a, 'b> {
          
                    
              pub whirlpool: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub funder: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub tick_array: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `initialize_dynamic_tick_array` CPI instruction.
pub struct InitializeDynamicTickArrayCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub whirlpool: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub funder: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub tick_array: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: InitializeDynamicTickArrayInstructionArgs,
  }

impl<'a, 'b> InitializeDynamicTickArrayCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: InitializeDynamicTickArrayCpiAccounts<'a, 'b>,
              args: InitializeDynamicTickArrayInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              whirlpool: accounts.whirlpool,
              funder: accounts.funder,
              tick_array: accounts.tick_array,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(4+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.whirlpool.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.funder.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.tick_array.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = InitializeDynamicTickArrayInstructionData::new().try_to_vec().unwrap();
          let mut args = self.__args.try_to_vec().unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(5 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.whirlpool.clone());
                        account_infos.push(self.funder.clone());
                        account_infos.push(self.tick_array.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `InitializeDynamicTickArray` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` whirlpool
                      ///   1. `[writable, signer]` funder
                ///   2. `[writable]` tick_array
          ///   3. `[]` system_program
#[derive(Clone, Debug)]
pub struct InitializeDynamicTickArrayCpiBuilder<'a, 'b> {
  instruction: Box<InitializeDynamicTickArrayCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeDynamicTickArrayCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(InitializeDynamicTickArrayCpiBuilderInstruction {
      __program: program,
              whirlpool: None,
              funder: None,
              tick_array: None,
              system_program: None,
                                            start_tick_index: None,
                                idempotent: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.whirlpool = Some(whirlpool);
                    self
    }
      #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.funder = Some(funder);
                    self
    }
      #[inline(always)]
    pub fn tick_array(&mut self, tick_array: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.tick_array = Some(tick_array);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn start_tick_index(&mut self, start_tick_index: i32) -> &mut Self {
        self.instruction.start_tick_index = Some(start_tick_index);
        self
      }
                #[inline(always)]
      pub fn idempotent(&mut self, idempotent: bool) -> &mut Self {
        self.instruction.idempotent = Some(idempotent);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = InitializeDynamicTickArrayInstructionArgs {
                                                              start_tick_index: self.instruction.start_tick_index.clone().expect("start_tick_index is not set"),
                                                                  idempotent: self.instruction.idempotent.clone().expect("idempotent is not set"),
                                    };
        let instruction = InitializeDynamicTickArrayCpi {
        __program: self.instruction.__program,
                  
          whirlpool: self.instruction.whirlpool.expect("whirlpool is not set"),
                  
          funder: self.instruction.funder.expect("funder is not set"),
                  
          tick_array: self.instruction.tick_array.expect("tick_array is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct InitializeDynamicTickArrayCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            whirlpool: Option<&'b solana_account_info::AccountInfo<'a>>,
                funder: Option<&'b solana_account_info::AccountInfo<'a>>,
                tick_array: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        start_tick_index: Option<i32>,
                idempotent: Option<bool>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

