//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct OpenBundledPosition {
      
              
          pub bundled_position: solana_program::pubkey::Pubkey,
          
              
          pub position_bundle: solana_program::pubkey::Pubkey,
          
              
          pub position_bundle_token_account: solana_program::pubkey::Pubkey,
          
              
          pub position_bundle_authority: solana_program::pubkey::Pubkey,
          
              
          pub whirlpool: solana_program::pubkey::Pubkey,
          
              
          pub funder: solana_program::pubkey::Pubkey,
          
              
          pub system_program: solana_program::pubkey::Pubkey,
          
              
          pub rent: solana_program::pubkey::Pubkey,
      }

impl OpenBundledPosition {
  pub fn instruction(&self, args: OpenBundledPositionInstructionArgs) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: OpenBundledPositionInstructionArgs, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            self.bundled_position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_bundle,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_bundle_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_bundle_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.whirlpool,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.funder,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&OpenBundledPositionInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenBundledPositionInstructionData {
            discriminator: [u8; 8],
                        }

impl OpenBundledPositionInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [169, 113, 126, 171, 213, 172, 212, 49],
                                                            }
  }
}

impl Default for OpenBundledPositionInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct OpenBundledPositionInstructionArgs {
                  pub bundle_index: u16,
                pub tick_lower_index: i32,
                pub tick_upper_index: i32,
      }


/// Instruction builder for `OpenBundledPosition`.
///
/// ### Accounts:
///
                ///   0. `[writable]` bundled_position
                ///   1. `[writable]` position_bundle
          ///   2. `[]` position_bundle_token_account
                ///   3. `[signer]` position_bundle_authority
          ///   4. `[]` whirlpool
                      ///   5. `[writable, signer]` funder
                ///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   7. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct OpenBundledPositionBuilder {
            bundled_position: Option<solana_program::pubkey::Pubkey>,
                position_bundle: Option<solana_program::pubkey::Pubkey>,
                position_bundle_token_account: Option<solana_program::pubkey::Pubkey>,
                position_bundle_authority: Option<solana_program::pubkey::Pubkey>,
                whirlpool: Option<solana_program::pubkey::Pubkey>,
                funder: Option<solana_program::pubkey::Pubkey>,
                system_program: Option<solana_program::pubkey::Pubkey>,
                rent: Option<solana_program::pubkey::Pubkey>,
                        bundle_index: Option<u16>,
                tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
        __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl OpenBundledPositionBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn bundled_position(&mut self, bundled_position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.bundled_position = Some(bundled_position);
                    self
    }
            #[inline(always)]
    pub fn position_bundle(&mut self, position_bundle: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_bundle = Some(position_bundle);
                    self
    }
            #[inline(always)]
    pub fn position_bundle_token_account(&mut self, position_bundle_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_bundle_token_account = Some(position_bundle_token_account);
                    self
    }
            #[inline(always)]
    pub fn position_bundle_authority(&mut self, position_bundle_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_bundle_authority = Some(position_bundle_authority);
                    self
    }
            #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.whirlpool = Some(whirlpool);
                    self
    }
            #[inline(always)]
    pub fn funder(&mut self, funder: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.funder = Some(funder);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
#[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn bundle_index(&mut self, bundle_index: u16) -> &mut Self {
        self.bundle_index = Some(bundle_index);
        self
      }
                #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.tick_upper_index = Some(tick_upper_index);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = OpenBundledPosition {
                              bundled_position: self.bundled_position.expect("bundled_position is not set"),
                                        position_bundle: self.position_bundle.expect("position_bundle is not set"),
                                        position_bundle_token_account: self.position_bundle_token_account.expect("position_bundle_token_account is not set"),
                                        position_bundle_authority: self.position_bundle_authority.expect("position_bundle_authority is not set"),
                                        whirlpool: self.whirlpool.expect("whirlpool is not set"),
                                        funder: self.funder.expect("funder is not set"),
                                        system_program: self.system_program.unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
                                        rent: self.rent.unwrap_or(solana_program::pubkey!("SysvarRent111111111111111111111111111111111")),
                      };
          let args = OpenBundledPositionInstructionArgs {
                                                              bundle_index: self.bundle_index.clone().expect("bundle_index is not set"),
                                                                  tick_lower_index: self.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `open_bundled_position` CPI accounts.
  pub struct OpenBundledPositionCpiAccounts<'a, 'b> {
          
                    
              pub bundled_position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position_bundle: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position_bundle_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position_bundle_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub whirlpool: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub funder: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `open_bundled_position` CPI instruction.
pub struct OpenBundledPositionCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub bundled_position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position_bundle: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position_bundle_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position_bundle_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub whirlpool: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub funder: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub rent: &'b solana_program::account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: OpenBundledPositionInstructionArgs,
  }

impl<'a, 'b> OpenBundledPositionCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: OpenBundledPositionCpiAccounts<'a, 'b>,
              args: OpenBundledPositionInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              bundled_position: accounts.bundled_position,
              position_bundle: accounts.position_bundle,
              position_bundle_token_account: accounts.position_bundle_token_account,
              position_bundle_authority: accounts.position_bundle_authority,
              whirlpool: accounts.whirlpool,
              funder: accounts.funder,
              system_program: accounts.system_program,
              rent: accounts.rent,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new(
            *self.bundled_position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_bundle.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_bundle_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_bundle_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.whirlpool.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funder.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&OpenBundledPositionInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.bundled_position.clone());
                        account_infos.push(self.position_bundle.clone());
                        account_infos.push(self.position_bundle_token_account.clone());
                        account_infos.push(self.position_bundle_authority.clone());
                        account_infos.push(self.whirlpool.clone());
                        account_infos.push(self.funder.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.rent.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `OpenBundledPosition` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` bundled_position
                ///   1. `[writable]` position_bundle
          ///   2. `[]` position_bundle_token_account
                ///   3. `[signer]` position_bundle_authority
          ///   4. `[]` whirlpool
                      ///   5. `[writable, signer]` funder
          ///   6. `[]` system_program
          ///   7. `[]` rent
#[derive(Clone, Debug)]
pub struct OpenBundledPositionCpiBuilder<'a, 'b> {
  instruction: Box<OpenBundledPositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> OpenBundledPositionCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(OpenBundledPositionCpiBuilderInstruction {
      __program: program,
              bundled_position: None,
              position_bundle: None,
              position_bundle_token_account: None,
              position_bundle_authority: None,
              whirlpool: None,
              funder: None,
              system_program: None,
              rent: None,
                                            bundle_index: None,
                                tick_lower_index: None,
                                tick_upper_index: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn bundled_position(&mut self, bundled_position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.bundled_position = Some(bundled_position);
                    self
    }
      #[inline(always)]
    pub fn position_bundle(&mut self, position_bundle: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_bundle = Some(position_bundle);
                    self
    }
      #[inline(always)]
    pub fn position_bundle_token_account(&mut self, position_bundle_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_bundle_token_account = Some(position_bundle_token_account);
                    self
    }
      #[inline(always)]
    pub fn position_bundle_authority(&mut self, position_bundle_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_bundle_authority = Some(position_bundle_authority);
                    self
    }
      #[inline(always)]
    pub fn whirlpool(&mut self, whirlpool: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.whirlpool = Some(whirlpool);
                    self
    }
      #[inline(always)]
    pub fn funder(&mut self, funder: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.funder = Some(funder);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent = Some(rent);
                    self
    }
                    #[inline(always)]
      pub fn bundle_index(&mut self, bundle_index: u16) -> &mut Self {
        self.instruction.bundle_index = Some(bundle_index);
        self
      }
                #[inline(always)]
      pub fn tick_lower_index(&mut self, tick_lower_index: i32) -> &mut Self {
        self.instruction.tick_lower_index = Some(tick_lower_index);
        self
      }
                #[inline(always)]
      pub fn tick_upper_index(&mut self, tick_upper_index: i32) -> &mut Self {
        self.instruction.tick_upper_index = Some(tick_upper_index);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
          let args = OpenBundledPositionInstructionArgs {
                                                              bundle_index: self.instruction.bundle_index.clone().expect("bundle_index is not set"),
                                                                  tick_lower_index: self.instruction.tick_lower_index.clone().expect("tick_lower_index is not set"),
                                                                  tick_upper_index: self.instruction.tick_upper_index.clone().expect("tick_upper_index is not set"),
                                    };
        let instruction = OpenBundledPositionCpi {
        __program: self.instruction.__program,
                  
          bundled_position: self.instruction.bundled_position.expect("bundled_position is not set"),
                  
          position_bundle: self.instruction.position_bundle.expect("position_bundle is not set"),
                  
          position_bundle_token_account: self.instruction.position_bundle_token_account.expect("position_bundle_token_account is not set"),
                  
          position_bundle_authority: self.instruction.position_bundle_authority.expect("position_bundle_authority is not set"),
                  
          whirlpool: self.instruction.whirlpool.expect("whirlpool is not set"),
                  
          funder: self.instruction.funder.expect("funder is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          rent: self.instruction.rent.expect("rent is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct OpenBundledPositionCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            bundled_position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position_bundle: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position_bundle_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position_bundle_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                whirlpool: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                funder: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                        bundle_index: Option<u16>,
                tick_lower_index: Option<i32>,
                tick_upper_index: Option<i32>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

