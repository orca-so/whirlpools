//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct TransferLockedPosition {
      
              
          pub position_authority: solana_program::pubkey::Pubkey,
          
              
          pub receiver: solana_program::pubkey::Pubkey,
          
              
          pub position: solana_program::pubkey::Pubkey,
          
              
          pub position_mint: solana_program::pubkey::Pubkey,
          
              
          pub position_token_account: solana_program::pubkey::Pubkey,
          
              
          pub destination_token_account: solana_program::pubkey::Pubkey,
          
              
          pub lock_config: solana_program::pubkey::Pubkey,
          
              
          pub token2022_program: solana_program::pubkey::Pubkey,
      }

impl TransferLockedPosition {
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_program::instruction::AccountMeta]) -> solana_program::instruction::Instruction {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_authority,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.receiver,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.position_mint,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.position_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.destination_token_account,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            self.lock_config,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token2022_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&TransferLockedPositionInstructionData::new()).unwrap();
    
    solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct TransferLockedPositionInstructionData {
            discriminator: [u8; 8],
      }

impl TransferLockedPositionInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [179, 121, 229, 46, 67, 138, 194, 138],
                  }
  }
}

impl Default for TransferLockedPositionInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `TransferLockedPosition`.
///
/// ### Accounts:
///
                ///   0. `[signer]` position_authority
                ///   1. `[writable]` receiver
          ///   2. `[]` position
          ///   3. `[]` position_mint
                ///   4. `[writable]` position_token_account
                ///   5. `[writable]` destination_token_account
                ///   6. `[writable]` lock_config
          ///   7. `[]` token2022_program
#[derive(Clone, Debug, Default)]
pub struct TransferLockedPositionBuilder {
            position_authority: Option<solana_program::pubkey::Pubkey>,
                receiver: Option<solana_program::pubkey::Pubkey>,
                position: Option<solana_program::pubkey::Pubkey>,
                position_mint: Option<solana_program::pubkey::Pubkey>,
                position_token_account: Option<solana_program::pubkey::Pubkey>,
                destination_token_account: Option<solana_program::pubkey::Pubkey>,
                lock_config: Option<solana_program::pubkey::Pubkey>,
                token2022_program: Option<solana_program::pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl TransferLockedPositionBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn position_authority(&mut self, position_authority: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_authority = Some(position_authority);
                    self
    }
            #[inline(always)]
    pub fn receiver(&mut self, receiver: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.receiver = Some(receiver);
                    self
    }
            #[inline(always)]
    pub fn position(&mut self, position: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position = Some(position);
                    self
    }
            #[inline(always)]
    pub fn position_mint(&mut self, position_mint: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_mint = Some(position_mint);
                    self
    }
            #[inline(always)]
    pub fn position_token_account(&mut self, position_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.position_token_account = Some(position_token_account);
                    self
    }
            #[inline(always)]
    pub fn destination_token_account(&mut self, destination_token_account: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.destination_token_account = Some(destination_token_account);
                    self
    }
            #[inline(always)]
    pub fn lock_config(&mut self, lock_config: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.lock_config = Some(lock_config);
                    self
    }
            #[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: solana_program::pubkey::Pubkey) -> &mut Self {
                        self.token2022_program = Some(token2022_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_program::instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_program::instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_program::instruction::Instruction {
    let accounts = TransferLockedPosition {
                              position_authority: self.position_authority.expect("position_authority is not set"),
                                        receiver: self.receiver.expect("receiver is not set"),
                                        position: self.position.expect("position is not set"),
                                        position_mint: self.position_mint.expect("position_mint is not set"),
                                        position_token_account: self.position_token_account.expect("position_token_account is not set"),
                                        destination_token_account: self.destination_token_account.expect("destination_token_account is not set"),
                                        lock_config: self.lock_config.expect("lock_config is not set"),
                                        token2022_program: self.token2022_program.expect("token2022_program is not set"),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `transfer_locked_position` CPI accounts.
  pub struct TransferLockedPositionCpiAccounts<'a, 'b> {
          
                    
              pub position_authority: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub receiver: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position_mint: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub position_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub lock_config: &'b solana_program::account_info::AccountInfo<'a>,
                
                    
              pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
            }

/// `transfer_locked_position` CPI instruction.
pub struct TransferLockedPositionCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_program::account_info::AccountInfo<'a>,
      
              
          pub position_authority: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub receiver: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position_mint: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub position_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub destination_token_account: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub lock_config: &'b solana_program::account_info::AccountInfo<'a>,
          
              
          pub token2022_program: &'b solana_program::account_info::AccountInfo<'a>,
        }

impl<'a, 'b> TransferLockedPositionCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_program::account_info::AccountInfo<'a>,
          accounts: TransferLockedPositionCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              position_authority: accounts.position_authority,
              receiver: accounts.receiver,
              position: accounts.position,
              position_mint: accounts.position_mint,
              position_token_account: accounts.position_token_account,
              destination_token_account: accounts.destination_token_account,
              lock_config: accounts.lock_config,
              token2022_program: accounts.token2022_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program::entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(8+ remaining_accounts.len());
                            accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_authority.key,
            true
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.receiver.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.position_mint.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.position_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.destination_token_account.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new(
            *self.lock_config.key,
            false
          ));
                                          accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token2022_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_program::instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&TransferLockedPositionInstructionData::new()).unwrap();
    
    let instruction = solana_program::instruction::Instruction {
      program_id: crate::WHIRLPOOL_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(9 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.position_authority.clone());
                        account_infos.push(self.receiver.clone());
                        account_infos.push(self.position.clone());
                        account_infos.push(self.position_mint.clone());
                        account_infos.push(self.position_token_account.clone());
                        account_infos.push(self.destination_token_account.clone());
                        account_infos.push(self.lock_config.clone());
                        account_infos.push(self.token2022_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_program::program::invoke(&instruction, &account_infos)
    } else {
      solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `TransferLockedPosition` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` position_authority
                ///   1. `[writable]` receiver
          ///   2. `[]` position
          ///   3. `[]` position_mint
                ///   4. `[writable]` position_token_account
                ///   5. `[writable]` destination_token_account
                ///   6. `[writable]` lock_config
          ///   7. `[]` token2022_program
#[derive(Clone, Debug)]
pub struct TransferLockedPositionCpiBuilder<'a, 'b> {
  instruction: Box<TransferLockedPositionCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> TransferLockedPositionCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(TransferLockedPositionCpiBuilderInstruction {
      __program: program,
              position_authority: None,
              receiver: None,
              position: None,
              position_mint: None,
              position_token_account: None,
              destination_token_account: None,
              lock_config: None,
              token2022_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn position_authority(&mut self, position_authority: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_authority = Some(position_authority);
                    self
    }
      #[inline(always)]
    pub fn receiver(&mut self, receiver: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.receiver = Some(receiver);
                    self
    }
      #[inline(always)]
    pub fn position(&mut self, position: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position = Some(position);
                    self
    }
      #[inline(always)]
    pub fn position_mint(&mut self, position_mint: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_mint = Some(position_mint);
                    self
    }
      #[inline(always)]
    pub fn position_token_account(&mut self, position_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_token_account = Some(position_token_account);
                    self
    }
      #[inline(always)]
    pub fn destination_token_account(&mut self, destination_token_account: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.destination_token_account = Some(destination_token_account);
                    self
    }
      #[inline(always)]
    pub fn lock_config(&mut self, lock_config: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.lock_config = Some(lock_config);
                    self
    }
      #[inline(always)]
    pub fn token2022_program(&mut self, token2022_program: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token2022_program = Some(token2022_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_program::account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program::entrypoint::ProgramResult {
        let instruction = TransferLockedPositionCpi {
        __program: self.instruction.__program,
                  
          position_authority: self.instruction.position_authority.expect("position_authority is not set"),
                  
          receiver: self.instruction.receiver.expect("receiver is not set"),
                  
          position: self.instruction.position.expect("position is not set"),
                  
          position_mint: self.instruction.position_mint.expect("position_mint is not set"),
                  
          position_token_account: self.instruction.position_token_account.expect("position_token_account is not set"),
                  
          destination_token_account: self.instruction.destination_token_account.expect("destination_token_account is not set"),
                  
          lock_config: self.instruction.lock_config.expect("lock_config is not set"),
                  
          token2022_program: self.instruction.token2022_program.expect("token2022_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct TransferLockedPositionCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_program::account_info::AccountInfo<'a>,
            position_authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                receiver: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position_mint: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                position_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                destination_token_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                lock_config: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                token2022_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_program::account_info::AccountInfo<'a>, bool, bool)>,
}

