/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const ADAPTIVE_FEE_TIER_DISCRIMINATOR = new Uint8Array([
  147, 16, 144, 116, 47, 146, 149, 46,
]);

export function getAdaptiveFeeTierDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADAPTIVE_FEE_TIER_DISCRIMINATOR,
  );
}

export type AdaptiveFeeTier = {
  discriminator: ReadonlyUint8Array;
  whirlpoolsConfig: Address;
  feeTierIndex: number;
  tickSpacing: number;
  initializePoolAuthority: Address;
  delegatedFeeAuthority: Address;
  defaultBaseFeeRate: number;
  filterPeriod: number;
  decayPeriod: number;
  reductionFactor: number;
  adaptiveFeeControlFactor: number;
  maxVolatilityAccumulator: number;
  tickGroupSize: number;
  majorSwapThresholdTicks: number;
};

export type AdaptiveFeeTierArgs = {
  whirlpoolsConfig: Address;
  feeTierIndex: number;
  tickSpacing: number;
  initializePoolAuthority: Address;
  delegatedFeeAuthority: Address;
  defaultBaseFeeRate: number;
  filterPeriod: number;
  decayPeriod: number;
  reductionFactor: number;
  adaptiveFeeControlFactor: number;
  maxVolatilityAccumulator: number;
  tickGroupSize: number;
  majorSwapThresholdTicks: number;
};

export function getAdaptiveFeeTierEncoder(): FixedSizeEncoder<AdaptiveFeeTierArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["whirlpoolsConfig", getAddressEncoder()],
      ["feeTierIndex", getU16Encoder()],
      ["tickSpacing", getU16Encoder()],
      ["initializePoolAuthority", getAddressEncoder()],
      ["delegatedFeeAuthority", getAddressEncoder()],
      ["defaultBaseFeeRate", getU16Encoder()],
      ["filterPeriod", getU16Encoder()],
      ["decayPeriod", getU16Encoder()],
      ["reductionFactor", getU16Encoder()],
      ["adaptiveFeeControlFactor", getU32Encoder()],
      ["maxVolatilityAccumulator", getU32Encoder()],
      ["tickGroupSize", getU16Encoder()],
      ["majorSwapThresholdTicks", getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: ADAPTIVE_FEE_TIER_DISCRIMINATOR }),
  );
}

export function getAdaptiveFeeTierDecoder(): FixedSizeDecoder<AdaptiveFeeTier> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["whirlpoolsConfig", getAddressDecoder()],
    ["feeTierIndex", getU16Decoder()],
    ["tickSpacing", getU16Decoder()],
    ["initializePoolAuthority", getAddressDecoder()],
    ["delegatedFeeAuthority", getAddressDecoder()],
    ["defaultBaseFeeRate", getU16Decoder()],
    ["filterPeriod", getU16Decoder()],
    ["decayPeriod", getU16Decoder()],
    ["reductionFactor", getU16Decoder()],
    ["adaptiveFeeControlFactor", getU32Decoder()],
    ["maxVolatilityAccumulator", getU32Decoder()],
    ["tickGroupSize", getU16Decoder()],
    ["majorSwapThresholdTicks", getU16Decoder()],
  ]);
}

export function getAdaptiveFeeTierCodec(): FixedSizeCodec<
  AdaptiveFeeTierArgs,
  AdaptiveFeeTier
> {
  return combineCodec(getAdaptiveFeeTierEncoder(), getAdaptiveFeeTierDecoder());
}

export function decodeAdaptiveFeeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<AdaptiveFeeTier, TAddress>;
export function decodeAdaptiveFeeTier<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<AdaptiveFeeTier, TAddress>;
export function decodeAdaptiveFeeTier<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<AdaptiveFeeTier, TAddress>
  | MaybeAccount<AdaptiveFeeTier, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getAdaptiveFeeTierDecoder(),
  );
}

export async function fetchAdaptiveFeeTier<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<AdaptiveFeeTier, TAddress>> {
  const maybeAccount = await fetchMaybeAdaptiveFeeTier(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeAdaptiveFeeTier<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<AdaptiveFeeTier, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeAdaptiveFeeTier(maybeAccount);
}

export async function fetchAllAdaptiveFeeTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<AdaptiveFeeTier>[]> {
  const maybeAccounts = await fetchAllMaybeAdaptiveFeeTier(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeAdaptiveFeeTier(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<AdaptiveFeeTier>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeAdaptiveFeeTier(maybeAccount),
  );
}

export function getAdaptiveFeeTierSize(): number {
  return 128;
}
