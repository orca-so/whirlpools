/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  getDynamicTickDecoder,
  getDynamicTickEncoder,
  type DynamicTick,
  type DynamicTickArgs,
} from "../types";

export const DYNAMIC_TICK_ARRAY_DISCRIMINATOR = new Uint8Array([
  17, 216, 246, 142, 225, 199, 218, 56,
]);

export function getDynamicTickArrayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DYNAMIC_TICK_ARRAY_DISCRIMINATOR,
  );
}

export type DynamicTickArray = {
  discriminator: ReadonlyUint8Array;
  startTickIndex: number;
  whirlpool: Address;
  tickBitmap: bigint;
  ticks: Array<DynamicTick>;
};

export type DynamicTickArrayArgs = {
  startTickIndex: number;
  whirlpool: Address;
  tickBitmap: number | bigint;
  ticks: Array<DynamicTickArgs>;
};

export function getDynamicTickArrayEncoder(): Encoder<DynamicTickArrayArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["startTickIndex", getI32Encoder()],
      ["whirlpool", getAddressEncoder()],
      ["tickBitmap", getU128Encoder()],
      ["ticks", getArrayEncoder(getDynamicTickEncoder(), { size: 88 })],
    ]),
    (value) => ({ ...value, discriminator: DYNAMIC_TICK_ARRAY_DISCRIMINATOR }),
  );
}

export function getDynamicTickArrayDecoder(): Decoder<DynamicTickArray> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["startTickIndex", getI32Decoder()],
    ["whirlpool", getAddressDecoder()],
    ["tickBitmap", getU128Decoder()],
    ["ticks", getArrayDecoder(getDynamicTickDecoder(), { size: 88 })],
  ]);
}

export function getDynamicTickArrayCodec(): Codec<
  DynamicTickArrayArgs,
  DynamicTickArray
> {
  return combineCodec(
    getDynamicTickArrayEncoder(),
    getDynamicTickArrayDecoder(),
  );
}

export function decodeDynamicTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<DynamicTickArray, TAddress>;
export function decodeDynamicTickArray<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<DynamicTickArray, TAddress>;
export function decodeDynamicTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<DynamicTickArray, TAddress>
  | MaybeAccount<DynamicTickArray, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDynamicTickArrayDecoder(),
  );
}

export async function fetchDynamicTickArray<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<DynamicTickArray, TAddress>> {
  const maybeAccount = await fetchMaybeDynamicTickArray(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDynamicTickArray<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<DynamicTickArray, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDynamicTickArray(maybeAccount);
}

export async function fetchAllDynamicTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<DynamicTickArray>[]> {
  const maybeAccounts = await fetchAllMaybeDynamicTickArray(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDynamicTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<DynamicTickArray>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeDynamicTickArray(maybeAccount),
  );
}
