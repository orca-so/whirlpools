/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  getTickDecoder,
  getTickEncoder,
  type Tick,
  type TickArgs,
} from "../types";

export const FIXED_TICK_ARRAY_DISCRIMINATOR = new Uint8Array([
  69, 97, 189, 190, 110, 7, 66, 187,
]);

export function getFixedTickArrayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    FIXED_TICK_ARRAY_DISCRIMINATOR,
  );
}

export type FixedTickArray = {
  discriminator: ReadonlyUint8Array;
  startTickIndex: number;
  ticks: Array<Tick>;
  whirlpool: Address;
};

export type FixedTickArrayArgs = {
  startTickIndex: number;
  ticks: Array<TickArgs>;
  whirlpool: Address;
};

export function getFixedTickArrayEncoder(): Encoder<FixedTickArrayArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["startTickIndex", getI32Encoder()],
      ["ticks", getArrayEncoder(getTickEncoder(), { size: 88 })],
      ["whirlpool", getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: FIXED_TICK_ARRAY_DISCRIMINATOR }),
  );
}

export function getFixedTickArrayDecoder(): Decoder<FixedTickArray> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["startTickIndex", getI32Decoder()],
    ["ticks", getArrayDecoder(getTickDecoder(), { size: 88 })],
    ["whirlpool", getAddressDecoder()],
  ]);
}

export function getFixedTickArrayCodec(): Codec<
  FixedTickArrayArgs,
  FixedTickArray
> {
  return combineCodec(getFixedTickArrayEncoder(), getFixedTickArrayDecoder());
}

export function decodeFixedTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<FixedTickArray, TAddress>;
export function decodeFixedTickArray<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<FixedTickArray, TAddress>;
export function decodeFixedTickArray<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
): Account<FixedTickArray, TAddress> | MaybeAccount<FixedTickArray, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getFixedTickArrayDecoder(),
  );
}

export async function fetchFixedTickArray<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<FixedTickArray, TAddress>> {
  const maybeAccount = await fetchMaybeFixedTickArray(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeFixedTickArray<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<FixedTickArray, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeFixedTickArray(maybeAccount);
}

export async function fetchAllFixedTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<FixedTickArray>[]> {
  const maybeAccounts = await fetchAllMaybeFixedTickArray(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeFixedTickArray(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<FixedTickArray>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeFixedTickArray(maybeAccount),
  );
}

export function getFixedTickArraySize(): number {
  return 9988;
}
