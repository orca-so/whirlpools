/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";

export const WHIRLPOOLS_CONFIG_DISCRIMINATOR = new Uint8Array([
  157, 20, 49, 224, 217, 87, 193, 254,
]);

export function getWhirlpoolsConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WHIRLPOOLS_CONFIG_DISCRIMINATOR,
  );
}

export type WhirlpoolsConfig = {
  discriminator: ReadonlyUint8Array;
  feeAuthority: Address;
  collectProtocolFeesAuthority: Address;
  rewardEmissionsSuperAuthority: Address;
  defaultProtocolFeeRate: number;
  featureFlags: number;
};

export type WhirlpoolsConfigArgs = {
  feeAuthority: Address;
  collectProtocolFeesAuthority: Address;
  rewardEmissionsSuperAuthority: Address;
  defaultProtocolFeeRate: number;
  featureFlags: number;
};

export function getWhirlpoolsConfigEncoder(): Encoder<WhirlpoolsConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["feeAuthority", getAddressEncoder()],
      ["collectProtocolFeesAuthority", getAddressEncoder()],
      ["rewardEmissionsSuperAuthority", getAddressEncoder()],
      ["defaultProtocolFeeRate", getU16Encoder()],
      ["featureFlags", getU16Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WHIRLPOOLS_CONFIG_DISCRIMINATOR }),
  );
}

export function getWhirlpoolsConfigDecoder(): Decoder<WhirlpoolsConfig> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["feeAuthority", getAddressDecoder()],
    ["collectProtocolFeesAuthority", getAddressDecoder()],
    ["rewardEmissionsSuperAuthority", getAddressDecoder()],
    ["defaultProtocolFeeRate", getU16Decoder()],
    ["featureFlags", getU16Decoder()],
  ]);
}

export function getWhirlpoolsConfigCodec(): Codec<
  WhirlpoolsConfigArgs,
  WhirlpoolsConfig
> {
  return combineCodec(
    getWhirlpoolsConfigEncoder(),
    getWhirlpoolsConfigDecoder(),
  );
}

export function decodeWhirlpoolsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>,
): Account<WhirlpoolsConfig, TAddress>;
export function decodeWhirlpoolsConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>,
): MaybeAccount<WhirlpoolsConfig, TAddress>;
export function decodeWhirlpoolsConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>,
):
  | Account<WhirlpoolsConfig, TAddress>
  | MaybeAccount<WhirlpoolsConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWhirlpoolsConfigDecoder(),
  );
}

export async function fetchWhirlpoolsConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<Account<WhirlpoolsConfig, TAddress>> {
  const maybeAccount = await fetchMaybeWhirlpoolsConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWhirlpoolsConfig<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig,
): Promise<MaybeAccount<WhirlpoolsConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWhirlpoolsConfig(maybeAccount);
}

export async function fetchAllWhirlpoolsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<Account<WhirlpoolsConfig>[]> {
  const maybeAccounts = await fetchAllMaybeWhirlpoolsConfig(
    rpc,
    addresses,
    config,
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWhirlpoolsConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig,
): Promise<MaybeAccount<WhirlpoolsConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeWhirlpoolsConfig(maybeAccount),
  );
}

export function getWhirlpoolsConfigSize(): number {
  return 108;
}
