/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_POSITION_DISCRIMINATOR = new Uint8Array([
  123, 134, 81, 0, 49, 68, 98, 98,
]);

export function getClosePositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_POSITION_DISCRIMINATOR,
  );
}

export type ClosePositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountReceiver extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionMint extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? WritableAccount<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ClosePositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClosePositionInstructionDataArgs = {};

export function getClosePositionInstructionDataEncoder(): Encoder<ClosePositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_POSITION_DISCRIMINATOR }),
  );
}

export function getClosePositionInstructionDataDecoder(): Decoder<ClosePositionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClosePositionInstructionDataCodec(): Codec<
  ClosePositionInstructionDataArgs,
  ClosePositionInstructionData
> {
  return combineCodec(
    getClosePositionInstructionDataEncoder(),
    getClosePositionInstructionDataDecoder(),
  );
}

export type ClosePositionInput<
  TAccountPositionAuthority extends string = string,
  TAccountReceiver extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  receiver: Address<TAccountReceiver>;
  position: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  tokenProgram?: Address<TAccountTokenProgram>;
};

export function getClosePositionInstruction<
  TAccountPositionAuthority extends string,
  TAccountReceiver extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: ClosePositionInput<
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ClosePositionInstruction<
  TProgramAddress,
  TAccountPositionAuthority,
  TAccountReceiver,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getClosePositionInstructionDataEncoder().encode({}),
  } as ClosePositionInstruction<
    TProgramAddress,
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedClosePositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    positionAuthority: TAccountMetas[0];
    receiver: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
  };
  data: ClosePositionInstructionData;
};

export function parseClosePositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedClosePositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      positionAuthority: getNextAccount(),
      receiver: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getClosePositionInstructionDataDecoder().decode(instruction.data),
  };
}
