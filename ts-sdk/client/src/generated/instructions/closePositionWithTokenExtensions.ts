/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const CLOSE_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR =
  new Uint8Array([1, 182, 135, 59, 155, 25, 99, 223]);

export function getClosePositionWithTokenExtensionsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR,
  );
}

export type ClosePositionWithTokenExtensionsInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountReceiver extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionMint extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? WritableAccount<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      ...TRemainingAccounts,
    ]
  >;

export type ClosePositionWithTokenExtensionsInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ClosePositionWithTokenExtensionsInstructionDataArgs = {};

export function getClosePositionWithTokenExtensionsInstructionDataEncoder(): Encoder<ClosePositionWithTokenExtensionsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR,
    }),
  );
}

export function getClosePositionWithTokenExtensionsInstructionDataDecoder(): Decoder<ClosePositionWithTokenExtensionsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getClosePositionWithTokenExtensionsInstructionDataCodec(): Codec<
  ClosePositionWithTokenExtensionsInstructionDataArgs,
  ClosePositionWithTokenExtensionsInstructionData
> {
  return combineCodec(
    getClosePositionWithTokenExtensionsInstructionDataEncoder(),
    getClosePositionWithTokenExtensionsInstructionDataDecoder(),
  );
}

export type ClosePositionWithTokenExtensionsInput<
  TAccountPositionAuthority extends string = string,
  TAccountReceiver extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountToken2022Program extends string = string,
> = {
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  receiver: Address<TAccountReceiver>;
  position: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  token2022Program: Address<TAccountToken2022Program>;
};

export function getClosePositionWithTokenExtensionsInstruction<
  TAccountPositionAuthority extends string,
  TAccountReceiver extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountToken2022Program extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: ClosePositionWithTokenExtensionsInput<
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountToken2022Program
  >,
  config?: { programAddress?: TProgramAddress },
): ClosePositionWithTokenExtensionsInstruction<
  TProgramAddress,
  TAccountPositionAuthority,
  TAccountReceiver,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountToken2022Program
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.token2022Program),
    ],
    programAddress,
    data: getClosePositionWithTokenExtensionsInstructionDataEncoder().encode(
      {},
    ),
  } as ClosePositionWithTokenExtensionsInstruction<
    TProgramAddress,
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountToken2022Program
  >;

  return instruction;
}

export type ParsedClosePositionWithTokenExtensionsInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    positionAuthority: TAccountMetas[0];
    receiver: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    token2022Program: TAccountMetas[5];
  };
  data: ClosePositionWithTokenExtensionsInstructionData;
};

export function parseClosePositionWithTokenExtensionsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedClosePositionWithTokenExtensionsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      positionAuthority: getNextAccount(),
      receiver: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      token2022Program: getNextAccount(),
    },
    data: getClosePositionWithTokenExtensionsInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
