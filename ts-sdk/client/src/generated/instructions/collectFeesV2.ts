/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from "../types";

export const COLLECT_FEES_V2_DISCRIMINATOR = new Uint8Array([
  207, 117, 95, 191, 229, 180, 226, 15,
]);

export function getCollectFeesV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_FEES_V2_DISCRIMINATOR,
  );
}

export type CollectFeesV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountPositionAuthority extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenMintA extends string | AccountMeta<string> = string,
  TAccountTokenMintB extends string | AccountMeta<string> = string,
  TAccountTokenOwnerAccountA extends string | AccountMeta<string> = string,
  TAccountTokenVaultA extends string | AccountMeta<string> = string,
  TAccountTokenOwnerAccountB extends string | AccountMeta<string> = string,
  TAccountTokenVaultB extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountTokenProgramB extends string | AccountMeta<string> = string,
  TAccountMemoProgram extends
    | string
    | AccountMeta<string> = "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            AccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountTokenOwnerAccountA extends string
        ? WritableAccount<TAccountTokenOwnerAccountA>
        : TAccountTokenOwnerAccountA,
      TAccountTokenVaultA extends string
        ? WritableAccount<TAccountTokenVaultA>
        : TAccountTokenVaultA,
      TAccountTokenOwnerAccountB extends string
        ? WritableAccount<TAccountTokenOwnerAccountB>
        : TAccountTokenOwnerAccountB,
      TAccountTokenVaultB extends string
        ? WritableAccount<TAccountTokenVaultB>
        : TAccountTokenVaultB,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectFeesV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type CollectFeesV2InstructionDataArgs = {
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getCollectFeesV2InstructionDataEncoder(): Encoder<CollectFeesV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      [
        "remainingAccountsInfo",
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_FEES_V2_DISCRIMINATOR }),
  );
}

export function getCollectFeesV2InstructionDataDecoder(): Decoder<CollectFeesV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    [
      "remainingAccountsInfo",
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCollectFeesV2InstructionDataCodec(): Codec<
  CollectFeesV2InstructionDataArgs,
  CollectFeesV2InstructionData
> {
  return combineCodec(
    getCollectFeesV2InstructionDataEncoder(),
    getCollectFeesV2InstructionDataDecoder(),
  );
}

export type CollectFeesV2Input<
  TAccountWhirlpool extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenOwnerAccountA extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenOwnerAccountB extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
  tokenVaultA: Address<TAccountTokenVaultA>;
  tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
  tokenVaultB: Address<TAccountTokenVaultB>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  memoProgram?: Address<TAccountMemoProgram>;
  remainingAccountsInfo: CollectFeesV2InstructionDataArgs["remainingAccountsInfo"];
};

export function getCollectFeesV2Instruction<
  TAccountWhirlpool extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenOwnerAccountA extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenOwnerAccountB extends string,
  TAccountTokenVaultB extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: CollectFeesV2Input<
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenOwnerAccountA,
    TAccountTokenVaultA,
    TAccountTokenOwnerAccountB,
    TAccountTokenVaultB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CollectFeesV2Instruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountTokenOwnerAccountA,
  TAccountTokenVaultA,
  TAccountTokenOwnerAccountB,
  TAccountTokenVaultB,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenOwnerAccountA: {
      value: input.tokenOwnerAccountA ?? null,
      isWritable: true,
    },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenOwnerAccountB: {
      value: input.tokenOwnerAccountB ?? null,
      isWritable: true,
    },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      "MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr" as Address<"MemoSq4gqABAXKb96qnH8TysNcWxMyWCqXgDLGmfcHr">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenOwnerAccountA),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenOwnerAccountB),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.memoProgram),
    ],
    data: getCollectFeesV2InstructionDataEncoder().encode(
      args as CollectFeesV2InstructionDataArgs,
    ),
    programAddress,
  } as CollectFeesV2Instruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenOwnerAccountA,
    TAccountTokenVaultA,
    TAccountTokenOwnerAccountB,
    TAccountTokenVaultB,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountMemoProgram
  >);
}

export type ParsedCollectFeesV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    position: TAccountMetas[2];
    positionTokenAccount: TAccountMetas[3];
    tokenMintA: TAccountMetas[4];
    tokenMintB: TAccountMetas[5];
    tokenOwnerAccountA: TAccountMetas[6];
    tokenVaultA: TAccountMetas[7];
    tokenOwnerAccountB: TAccountMetas[8];
    tokenVaultB: TAccountMetas[9];
    tokenProgramA: TAccountMetas[10];
    tokenProgramB: TAccountMetas[11];
    memoProgram: TAccountMetas[12];
  };
  data: CollectFeesV2InstructionData;
};

export function parseCollectFeesV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedCollectFeesV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      tokenOwnerAccountA: getNextAccount(),
      tokenVaultA: getNextAccount(),
      tokenOwnerAccountB: getNextAccount(),
      tokenVaultB: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getCollectFeesV2InstructionDataDecoder().decode(instruction.data),
  };
}
