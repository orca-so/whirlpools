/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const COLLECT_REWARD_DISCRIMINATOR = new Uint8Array([
  70, 5, 132, 87, 86, 235, 177, 34,
]);

export function getCollectRewardDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_REWARD_DISCRIMINATOR,
  );
}

export type CollectRewardInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardOwnerAccount extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountRewardOwnerAccount extends string
        ? WritableAccount<TAccountRewardOwnerAccount>
        : TAccountRewardOwnerAccount,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectRewardInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
};

export type CollectRewardInstructionDataArgs = { rewardIndex: number };

export function getCollectRewardInstructionDataEncoder(): Encoder<CollectRewardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_REWARD_DISCRIMINATOR }),
  );
}

export function getCollectRewardInstructionDataDecoder(): Decoder<CollectRewardInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
  ]);
}

export function getCollectRewardInstructionDataCodec(): Codec<
  CollectRewardInstructionDataArgs,
  CollectRewardInstructionData
> {
  return combineCodec(
    getCollectRewardInstructionDataEncoder(),
    getCollectRewardInstructionDataDecoder(),
  );
}

export type CollectRewardInput<
  TAccountWhirlpool extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountRewardOwnerAccount extends string = string,
  TAccountRewardVault extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  rewardOwnerAccount: Address<TAccountRewardOwnerAccount>;
  rewardVault: Address<TAccountRewardVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  rewardIndex: CollectRewardInstructionDataArgs["rewardIndex"];
};

export function getCollectRewardInstruction<
  TAccountWhirlpool extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountRewardOwnerAccount extends string,
  TAccountRewardVault extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: CollectRewardInput<
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardVault,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CollectRewardInstruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountRewardOwnerAccount,
  TAccountRewardVault,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    rewardOwnerAccount: {
      value: input.rewardOwnerAccount ?? null,
      isWritable: true,
    },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.rewardOwnerAccount),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getCollectRewardInstructionDataEncoder().encode(
      args as CollectRewardInstructionDataArgs,
    ),
  } as CollectRewardInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardVault,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedCollectRewardInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    position: TAccountMetas[2];
    positionTokenAccount: TAccountMetas[3];
    rewardOwnerAccount: TAccountMetas[4];
    rewardVault: TAccountMetas[5];
    tokenProgram: TAccountMetas[6];
  };
  data: CollectRewardInstructionData;
};

export function parseCollectRewardInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCollectRewardInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      rewardOwnerAccount: getNextAccount(),
      rewardVault: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getCollectRewardInstructionDataDecoder().decode(instruction.data),
  };
}
