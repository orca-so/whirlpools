/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from "../types";

export const COLLECT_REWARD_V2_DISCRIMINATOR = new Uint8Array([
  177, 107, 37, 180, 160, 19, 49, 209,
]);

export function getCollectRewardV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    COLLECT_REWARD_V2_DISCRIMINATOR,
  );
}

export type CollectRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRewardOwnerAccount extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountRewardOwnerAccount extends string
        ? WritableAccount<TAccountRewardOwnerAccount>
        : TAccountRewardOwnerAccount,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardVault extends string
        ? WritableAccount<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CollectRewardV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type CollectRewardV2InstructionDataArgs = {
  rewardIndex: number;
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getCollectRewardV2InstructionDataEncoder(): Encoder<CollectRewardV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
      [
        "remainingAccountsInfo",
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: COLLECT_REWARD_V2_DISCRIMINATOR }),
  );
}

export function getCollectRewardV2InstructionDataDecoder(): Decoder<CollectRewardV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
    [
      "remainingAccountsInfo",
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getCollectRewardV2InstructionDataCodec(): Codec<
  CollectRewardV2InstructionDataArgs,
  CollectRewardV2InstructionData
> {
  return combineCodec(
    getCollectRewardV2InstructionDataEncoder(),
    getCollectRewardV2InstructionDataDecoder(),
  );
}

export type CollectRewardV2Input<
  TAccountWhirlpool extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountRewardOwnerAccount extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  rewardOwnerAccount: Address<TAccountRewardOwnerAccount>;
  rewardMint: Address<TAccountRewardMint>;
  rewardVault: Address<TAccountRewardVault>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  memoProgram: Address<TAccountMemoProgram>;
  rewardIndex: CollectRewardV2InstructionDataArgs["rewardIndex"];
  remainingAccountsInfo: CollectRewardV2InstructionDataArgs["remainingAccountsInfo"];
};

export function getCollectRewardV2Instruction<
  TAccountWhirlpool extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountRewardOwnerAccount extends string,
  TAccountRewardMint extends string,
  TAccountRewardVault extends string,
  TAccountRewardTokenProgram extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: CollectRewardV2Input<
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress },
): CollectRewardV2Instruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountRewardOwnerAccount,
  TAccountRewardMint,
  TAccountRewardVault,
  TAccountRewardTokenProgram,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    rewardOwnerAccount: {
      value: input.rewardOwnerAccount ?? null,
      isWritable: true,
    },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.rewardOwnerAccount),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getCollectRewardV2InstructionDataEncoder().encode(
      args as CollectRewardV2InstructionDataArgs,
    ),
  } as CollectRewardV2Instruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountRewardOwnerAccount,
    TAccountRewardMint,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedCollectRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    position: TAccountMetas[2];
    positionTokenAccount: TAccountMetas[3];
    rewardOwnerAccount: TAccountMetas[4];
    rewardMint: TAccountMetas[5];
    rewardVault: TAccountMetas[6];
    rewardTokenProgram: TAccountMetas[7];
    memoProgram: TAccountMetas[8];
  };
  data: CollectRewardV2InstructionData;
};

export function parseCollectRewardV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedCollectRewardV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      rewardOwnerAccount: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getCollectRewardV2InstructionDataDecoder().decode(instruction.data),
  };
}
