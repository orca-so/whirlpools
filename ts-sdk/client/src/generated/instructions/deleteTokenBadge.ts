/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const DELETE_TOKEN_BADGE_DISCRIMINATOR = new Uint8Array([
  53, 146, 68, 8, 18, 117, 17, 185,
]);

export function getDeleteTokenBadgeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELETE_TOKEN_BADGE_DISCRIMINATOR,
  );
}

export type DeleteTokenBadgeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountWhirlpoolsConfigExtension extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenBadgeAuthority extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountTokenBadge extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountWhirlpoolsConfigExtension extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfigExtension>
        : TAccountWhirlpoolsConfigExtension,
      TAccountTokenBadgeAuthority extends string
        ? ReadonlySignerAccount<TAccountTokenBadgeAuthority> &
            AccountSignerMeta<TAccountTokenBadgeAuthority>
        : TAccountTokenBadgeAuthority,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenBadge extends string
        ? WritableAccount<TAccountTokenBadge>
        : TAccountTokenBadge,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteTokenBadgeInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type DeleteTokenBadgeInstructionDataArgs = {};

export function getDeleteTokenBadgeInstructionDataEncoder(): FixedSizeEncoder<DeleteTokenBadgeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: DELETE_TOKEN_BADGE_DISCRIMINATOR }),
  );
}

export function getDeleteTokenBadgeInstructionDataDecoder(): FixedSizeDecoder<DeleteTokenBadgeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getDeleteTokenBadgeInstructionDataCodec(): FixedSizeCodec<
  DeleteTokenBadgeInstructionDataArgs,
  DeleteTokenBadgeInstructionData
> {
  return combineCodec(
    getDeleteTokenBadgeInstructionDataEncoder(),
    getDeleteTokenBadgeInstructionDataDecoder(),
  );
}

export type DeleteTokenBadgeAsyncInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpoolsConfigExtension extends string = string,
  TAccountTokenBadgeAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenBadge extends string = string,
  TAccountReceiver extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
  tokenBadgeAuthority: TransactionSigner<TAccountTokenBadgeAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  tokenBadge?: Address<TAccountTokenBadge>;
  receiver: Address<TAccountReceiver>;
};

export async function getDeleteTokenBadgeInstructionAsync<
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpoolsConfigExtension extends string,
  TAccountTokenBadgeAuthority extends string,
  TAccountTokenMint extends string,
  TAccountTokenBadge extends string,
  TAccountReceiver extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: DeleteTokenBadgeAsyncInput<
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge,
    TAccountReceiver
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  DeleteTokenBadgeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge,
    TAccountReceiver
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpoolsConfigExtension: {
      value: input.whirlpoolsConfigExtension ?? null,
      isWritable: false,
    },
    tokenBadgeAuthority: {
      value: input.tokenBadgeAuthority ?? null,
      isWritable: false,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenBadge: { value: input.tokenBadge ?? null, isWritable: true },
    receiver: { value: input.receiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenBadge.value) {
    accounts.tokenBadge.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMint.value)),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpoolsConfigExtension),
      getAccountMeta(accounts.tokenBadgeAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenBadge),
      getAccountMeta(accounts.receiver),
    ],
    data: getDeleteTokenBadgeInstructionDataEncoder().encode({}),
    programAddress,
  } as DeleteTokenBadgeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge,
    TAccountReceiver
  >);
}

export type DeleteTokenBadgeInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpoolsConfigExtension extends string = string,
  TAccountTokenBadgeAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenBadge extends string = string,
  TAccountReceiver extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
  tokenBadgeAuthority: TransactionSigner<TAccountTokenBadgeAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  tokenBadge: Address<TAccountTokenBadge>;
  receiver: Address<TAccountReceiver>;
};

export function getDeleteTokenBadgeInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpoolsConfigExtension extends string,
  TAccountTokenBadgeAuthority extends string,
  TAccountTokenMint extends string,
  TAccountTokenBadge extends string,
  TAccountReceiver extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: DeleteTokenBadgeInput<
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge,
    TAccountReceiver
  >,
  config?: { programAddress?: TProgramAddress },
): DeleteTokenBadgeInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountWhirlpoolsConfigExtension,
  TAccountTokenBadgeAuthority,
  TAccountTokenMint,
  TAccountTokenBadge,
  TAccountReceiver
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpoolsConfigExtension: {
      value: input.whirlpoolsConfigExtension ?? null,
      isWritable: false,
    },
    tokenBadgeAuthority: {
      value: input.tokenBadgeAuthority ?? null,
      isWritable: false,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenBadge: { value: input.tokenBadge ?? null, isWritable: true },
    receiver: { value: input.receiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpoolsConfigExtension),
      getAccountMeta(accounts.tokenBadgeAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenBadge),
      getAccountMeta(accounts.receiver),
    ],
    data: getDeleteTokenBadgeInstructionDataEncoder().encode({}),
    programAddress,
  } as DeleteTokenBadgeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge,
    TAccountReceiver
  >);
}

export type ParsedDeleteTokenBadgeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    whirlpoolsConfigExtension: TAccountMetas[1];
    tokenBadgeAuthority: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenBadge: TAccountMetas[4];
    receiver: TAccountMetas[5];
  };
  data: DeleteTokenBadgeInstructionData;
};

export function parseDeleteTokenBadgeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedDeleteTokenBadgeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      whirlpoolsConfigExtension: getNextAccount(),
      tokenBadgeAuthority: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenBadge: getNextAccount(),
      receiver: getNextAccount(),
    },
    data: getDeleteTokenBadgeInstructionDataDecoder().decode(instruction.data),
  };
}
