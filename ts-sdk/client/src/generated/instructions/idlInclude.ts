/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const IDL_INCLUDE_DISCRIMINATOR = new Uint8Array([
  223, 253, 121, 121, 60, 193, 129, 31,
]);

export function getIdlIncludeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(IDL_INCLUDE_DISCRIMINATOR);
}

export type IdlIncludeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountTickArray extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTickArray extends string
        ? ReadonlyAccount<TAccountTickArray>
        : TAccountTickArray,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type IdlIncludeInstructionData = { discriminator: ReadonlyUint8Array };

export type IdlIncludeInstructionDataArgs = {};

export function getIdlIncludeInstructionDataEncoder(): FixedSizeEncoder<IdlIncludeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: IDL_INCLUDE_DISCRIMINATOR }),
  );
}

export function getIdlIncludeInstructionDataDecoder(): FixedSizeDecoder<IdlIncludeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getIdlIncludeInstructionDataCodec(): FixedSizeCodec<
  IdlIncludeInstructionDataArgs,
  IdlIncludeInstructionData
> {
  return combineCodec(
    getIdlIncludeInstructionDataEncoder(),
    getIdlIncludeInstructionDataDecoder(),
  );
}

export type IdlIncludeInput<
  TAccountTickArray extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tickArray: Address<TAccountTickArray>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getIdlIncludeInstruction<
  TAccountTickArray extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: IdlIncludeInput<TAccountTickArray, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress },
): IdlIncludeInstruction<
  TProgramAddress,
  TAccountTickArray,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tickArray: { value: input.tickArray ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.tickArray),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getIdlIncludeInstructionDataEncoder().encode({}),
    programAddress,
  } as IdlIncludeInstruction<
    TProgramAddress,
    TAccountTickArray,
    TAccountSystemProgram
  >);
}

export type ParsedIdlIncludeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tickArray: TAccountMetas[0];
    systemProgram: TAccountMetas[1];
  };
  data: IdlIncludeInstructionData;
};

export function parseIdlIncludeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedIdlIncludeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { tickArray: getNextAccount(), systemProgram: getNextAccount() },
    data: getIdlIncludeInstructionDataDecoder().decode(instruction.data),
  };
}
