/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INCREASE_LIQUIDITY_DISCRIMINATOR = new Uint8Array([
  46, 156, 243, 118, 13, 205, 251, 178,
]);

export function getIncreaseLiquidityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCREASE_LIQUIDITY_DISCRIMINATOR,
  );
}

export type IncreaseLiquidityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountA extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountB extends string | IAccountMeta<string> = string,
  TAccountTokenVaultA extends string | IAccountMeta<string> = string,
  TAccountTokenVaultB extends string | IAccountMeta<string> = string,
  TAccountTickArrayLower extends string | IAccountMeta<string> = string,
  TAccountTickArrayUpper extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountTokenOwnerAccountA extends string
        ? WritableAccount<TAccountTokenOwnerAccountA>
        : TAccountTokenOwnerAccountA,
      TAccountTokenOwnerAccountB extends string
        ? WritableAccount<TAccountTokenOwnerAccountB>
        : TAccountTokenOwnerAccountB,
      TAccountTokenVaultA extends string
        ? WritableAccount<TAccountTokenVaultA>
        : TAccountTokenVaultA,
      TAccountTokenVaultB extends string
        ? WritableAccount<TAccountTokenVaultB>
        : TAccountTokenVaultB,
      TAccountTickArrayLower extends string
        ? WritableAccount<TAccountTickArrayLower>
        : TAccountTickArrayLower,
      TAccountTickArrayUpper extends string
        ? WritableAccount<TAccountTickArrayUpper>
        : TAccountTickArrayUpper,
      ...TRemainingAccounts,
    ]
  >;

export type IncreaseLiquidityInstructionData = {
  discriminator: ReadonlyUint8Array;
  liquidityAmount: bigint;
  tokenMaxA: bigint;
  tokenMaxB: bigint;
};

export type IncreaseLiquidityInstructionDataArgs = {
  liquidityAmount: number | bigint;
  tokenMaxA: number | bigint;
  tokenMaxB: number | bigint;
};

export function getIncreaseLiquidityInstructionDataEncoder(): Encoder<IncreaseLiquidityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["liquidityAmount", getU128Encoder()],
      ["tokenMaxA", getU64Encoder()],
      ["tokenMaxB", getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INCREASE_LIQUIDITY_DISCRIMINATOR }),
  );
}

export function getIncreaseLiquidityInstructionDataDecoder(): Decoder<IncreaseLiquidityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["liquidityAmount", getU128Decoder()],
    ["tokenMaxA", getU64Decoder()],
    ["tokenMaxB", getU64Decoder()],
  ]);
}

export function getIncreaseLiquidityInstructionDataCodec(): Codec<
  IncreaseLiquidityInstructionDataArgs,
  IncreaseLiquidityInstructionData
> {
  return combineCodec(
    getIncreaseLiquidityInstructionDataEncoder(),
    getIncreaseLiquidityInstructionDataDecoder(),
  );
}

export type IncreaseLiquidityInput<
  TAccountWhirlpool extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountTokenOwnerAccountA extends string = string,
  TAccountTokenOwnerAccountB extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountTickArrayLower extends string = string,
  TAccountTickArrayUpper extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  tokenProgram?: Address<TAccountTokenProgram>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  tokenOwnerAccountA: Address<TAccountTokenOwnerAccountA>;
  tokenOwnerAccountB: Address<TAccountTokenOwnerAccountB>;
  tokenVaultA: Address<TAccountTokenVaultA>;
  tokenVaultB: Address<TAccountTokenVaultB>;
  tickArrayLower: Address<TAccountTickArrayLower>;
  tickArrayUpper: Address<TAccountTickArrayUpper>;
  liquidityAmount: IncreaseLiquidityInstructionDataArgs["liquidityAmount"];
  tokenMaxA: IncreaseLiquidityInstructionDataArgs["tokenMaxA"];
  tokenMaxB: IncreaseLiquidityInstructionDataArgs["tokenMaxB"];
};

export function getIncreaseLiquidityInstruction<
  TAccountWhirlpool extends string,
  TAccountTokenProgram extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountTokenOwnerAccountA extends string,
  TAccountTokenOwnerAccountB extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountTickArrayLower extends string,
  TAccountTickArrayUpper extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: IncreaseLiquidityInput<
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountTickArrayLower,
    TAccountTickArrayUpper
  >,
  config?: { programAddress?: TProgramAddress },
): IncreaseLiquidityInstruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountTokenProgram,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountTokenOwnerAccountA,
  TAccountTokenOwnerAccountB,
  TAccountTokenVaultA,
  TAccountTokenVaultB,
  TAccountTickArrayLower,
  TAccountTickArrayUpper
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    tokenOwnerAccountA: {
      value: input.tokenOwnerAccountA ?? null,
      isWritable: true,
    },
    tokenOwnerAccountB: {
      value: input.tokenOwnerAccountB ?? null,
      isWritable: true,
    },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    tickArrayLower: { value: input.tickArrayLower ?? null, isWritable: true },
    tickArrayUpper: { value: input.tickArrayUpper ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.tokenOwnerAccountA),
      getAccountMeta(accounts.tokenOwnerAccountB),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.tickArrayLower),
      getAccountMeta(accounts.tickArrayUpper),
    ],
    programAddress,
    data: getIncreaseLiquidityInstructionDataEncoder().encode(
      args as IncreaseLiquidityInstructionDataArgs,
    ),
  } as IncreaseLiquidityInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountTokenOwnerAccountA,
    TAccountTokenOwnerAccountB,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountTickArrayLower,
    TAccountTickArrayUpper
  >;

  return instruction;
}

export type ParsedIncreaseLiquidityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    tokenProgram: TAccountMetas[1];
    positionAuthority: TAccountMetas[2];
    position: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    tokenOwnerAccountA: TAccountMetas[5];
    tokenOwnerAccountB: TAccountMetas[6];
    tokenVaultA: TAccountMetas[7];
    tokenVaultB: TAccountMetas[8];
    tickArrayLower: TAccountMetas[9];
    tickArrayUpper: TAccountMetas[10];
  };
  data: IncreaseLiquidityInstructionData;
};

export function parseIncreaseLiquidityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedIncreaseLiquidityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      tokenProgram: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      tokenOwnerAccountA: getNextAccount(),
      tokenOwnerAccountB: getNextAccount(),
      tokenVaultA: getNextAccount(),
      tokenVaultB: getNextAccount(),
      tickArrayLower: getNextAccount(),
      tickArrayUpper: getNextAccount(),
    },
    data: getIncreaseLiquidityInstructionDataDecoder().decode(instruction.data),
  };
}
