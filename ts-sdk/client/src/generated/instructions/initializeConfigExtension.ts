/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const INITIALIZE_CONFIG_EXTENSION_DISCRIMINATOR = new Uint8Array([
  55, 9, 53, 9, 114, 57, 209, 52,
]);

export function getInitializeConfigExtensionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CONFIG_EXTENSION_DISCRIMINATOR,
  );
}

export type InitializeConfigExtensionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountConfig extends string | AccountMeta<string> = string,
  TAccountConfigExtension extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountFeeAuthority extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountConfig extends string
        ? ReadonlyAccount<TAccountConfig>
        : TAccountConfig,
      TAccountConfigExtension extends string
        ? WritableAccount<TAccountConfigExtension>
        : TAccountConfigExtension,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountFeeAuthority extends string
        ? ReadonlySignerAccount<TAccountFeeAuthority> &
            AccountSignerMeta<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfigExtensionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeConfigExtensionInstructionDataArgs = {};

export function getInitializeConfigExtensionInstructionDataEncoder(): FixedSizeEncoder<InitializeConfigExtensionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_CONFIG_EXTENSION_DISCRIMINATOR,
    }),
  );
}

export function getInitializeConfigExtensionInstructionDataDecoder(): FixedSizeDecoder<InitializeConfigExtensionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeConfigExtensionInstructionDataCodec(): FixedSizeCodec<
  InitializeConfigExtensionInstructionDataArgs,
  InitializeConfigExtensionInstructionData
> {
  return combineCodec(
    getInitializeConfigExtensionInstructionDataEncoder(),
    getInitializeConfigExtensionInstructionDataDecoder(),
  );
}

export type InitializeConfigExtensionAsyncInput<
  TAccountConfig extends string = string,
  TAccountConfigExtension extends string = string,
  TAccountFunder extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  configExtension?: Address<TAccountConfigExtension>;
  funder: TransactionSigner<TAccountFunder>;
  feeAuthority: TransactionSigner<TAccountFeeAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeConfigExtensionInstructionAsync<
  TAccountConfig extends string,
  TAccountConfigExtension extends string,
  TAccountFunder extends string,
  TAccountFeeAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeConfigExtensionAsyncInput<
    TAccountConfig,
    TAccountConfigExtension,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializeConfigExtensionInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountConfigExtension,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    configExtension: { value: input.configExtension ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.configExtension.value) {
    accounts.configExtension.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            99, 111, 110, 102, 105, 103, 95, 101, 120, 116, 101, 110, 115, 105,
            111, 110,
          ]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.config.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.configExtension),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeConfigExtensionInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeConfigExtensionInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountConfigExtension,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >);
}

export type InitializeConfigExtensionInput<
  TAccountConfig extends string = string,
  TAccountConfigExtension extends string = string,
  TAccountFunder extends string = string,
  TAccountFeeAuthority extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  config: Address<TAccountConfig>;
  configExtension: Address<TAccountConfigExtension>;
  funder: TransactionSigner<TAccountFunder>;
  feeAuthority: TransactionSigner<TAccountFeeAuthority>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeConfigExtensionInstruction<
  TAccountConfig extends string,
  TAccountConfigExtension extends string,
  TAccountFunder extends string,
  TAccountFeeAuthority extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeConfigExtensionInput<
    TAccountConfig,
    TAccountConfigExtension,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeConfigExtensionInstruction<
  TProgramAddress,
  TAccountConfig,
  TAccountConfigExtension,
  TAccountFunder,
  TAccountFeeAuthority,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    config: { value: input.config ?? null, isWritable: false },
    configExtension: { value: input.configExtension ?? null, isWritable: true },
    funder: { value: input.funder ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.config),
      getAccountMeta(accounts.configExtension),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.feeAuthority),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeConfigExtensionInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeConfigExtensionInstruction<
    TProgramAddress,
    TAccountConfig,
    TAccountConfigExtension,
    TAccountFunder,
    TAccountFeeAuthority,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeConfigExtensionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    config: TAccountMetas[0];
    configExtension: TAccountMetas[1];
    funder: TAccountMetas[2];
    feeAuthority: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeConfigExtensionInstructionData;
};

export function parseInitializeConfigExtensionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeConfigExtensionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      config: getNextAccount(),
      configExtension: getNextAccount(),
      funder: getNextAccount(),
      feeAuthority: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeConfigExtensionInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
