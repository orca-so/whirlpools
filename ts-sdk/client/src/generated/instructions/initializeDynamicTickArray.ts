/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INITIALIZE_DYNAMIC_TICK_ARRAY_DISCRIMINATOR = new Uint8Array([
  41, 33, 165, 200, 120, 231, 142, 50,
]);

export function getInitializeDynamicTickArrayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_DYNAMIC_TICK_ARRAY_DISCRIMINATOR,
  );
}

export type InitializeDynamicTickArrayInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountTickArray extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTickArray extends string
        ? WritableAccount<TAccountTickArray>
        : TAccountTickArray,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeDynamicTickArrayInstructionData = {
  discriminator: ReadonlyUint8Array;
  startTickIndex: number;
  idempotent: boolean;
};

export type InitializeDynamicTickArrayInstructionDataArgs = {
  startTickIndex: number;
  idempotent: boolean;
};

export function getInitializeDynamicTickArrayInstructionDataEncoder(): Encoder<InitializeDynamicTickArrayInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["startTickIndex", getI32Encoder()],
      ["idempotent", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_DYNAMIC_TICK_ARRAY_DISCRIMINATOR,
    }),
  );
}

export function getInitializeDynamicTickArrayInstructionDataDecoder(): Decoder<InitializeDynamicTickArrayInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["startTickIndex", getI32Decoder()],
    ["idempotent", getBooleanDecoder()],
  ]);
}

export function getInitializeDynamicTickArrayInstructionDataCodec(): Codec<
  InitializeDynamicTickArrayInstructionDataArgs,
  InitializeDynamicTickArrayInstructionData
> {
  return combineCodec(
    getInitializeDynamicTickArrayInstructionDataEncoder(),
    getInitializeDynamicTickArrayInstructionDataDecoder(),
  );
}

export type InitializeDynamicTickArrayInput<
  TAccountWhirlpool extends string = string,
  TAccountFunder extends string = string,
  TAccountTickArray extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  funder: TransactionSigner<TAccountFunder>;
  tickArray: Address<TAccountTickArray>;
  systemProgram?: Address<TAccountSystemProgram>;
  startTickIndex: InitializeDynamicTickArrayInstructionDataArgs["startTickIndex"];
  idempotent: InitializeDynamicTickArrayInstructionDataArgs["idempotent"];
};

export function getInitializeDynamicTickArrayInstruction<
  TAccountWhirlpool extends string,
  TAccountFunder extends string,
  TAccountTickArray extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeDynamicTickArrayInput<
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeDynamicTickArrayInstruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountFunder,
  TAccountTickArray,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    tickArray: { value: input.tickArray ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tickArray),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeDynamicTickArrayInstructionDataEncoder().encode(
      args as InitializeDynamicTickArrayInstructionDataArgs,
    ),
  } as InitializeDynamicTickArrayInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeDynamicTickArrayInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    funder: TAccountMetas[1];
    tickArray: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeDynamicTickArrayInstructionData;
};

export function parseInitializeDynamicTickArrayInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializeDynamicTickArrayInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      funder: getNextAccount(),
      tickArray: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeDynamicTickArrayInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
