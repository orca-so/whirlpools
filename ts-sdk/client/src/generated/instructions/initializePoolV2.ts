/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const INITIALIZE_POOL_V2_DISCRIMINATOR = new Uint8Array([
  207, 45, 87, 242, 27, 63, 204, 67,
]);

export function getInitializePoolV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POOL_V2_DISCRIMINATOR,
  );
}

export type InitializePoolV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountTokenMintA extends string | AccountMeta<string> = string,
  TAccountTokenMintB extends string | AccountMeta<string> = string,
  TAccountTokenBadgeA extends string | AccountMeta<string> = string,
  TAccountTokenBadgeB extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountTokenVaultA extends string | AccountMeta<string> = string,
  TAccountTokenVaultB extends string | AccountMeta<string> = string,
  TAccountFeeTier extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountTokenProgramB extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountTokenBadgeA extends string
        ? ReadonlyAccount<TAccountTokenBadgeA>
        : TAccountTokenBadgeA,
      TAccountTokenBadgeB extends string
        ? ReadonlyAccount<TAccountTokenBadgeB>
        : TAccountTokenBadgeB,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountTokenVaultA extends string
        ? WritableSignerAccount<TAccountTokenVaultA> &
            AccountSignerMeta<TAccountTokenVaultA>
        : TAccountTokenVaultA,
      TAccountTokenVaultB extends string
        ? WritableSignerAccount<TAccountTokenVaultB> &
            AccountSignerMeta<TAccountTokenVaultB>
        : TAccountTokenVaultB,
      TAccountFeeTier extends string
        ? ReadonlyAccount<TAccountFeeTier>
        : TAccountFeeTier,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePoolV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  tickSpacing: number;
  initialSqrtPrice: bigint;
};

export type InitializePoolV2InstructionDataArgs = {
  tickSpacing: number;
  initialSqrtPrice: number | bigint;
};

export function getInitializePoolV2InstructionDataEncoder(): FixedSizeEncoder<InitializePoolV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["tickSpacing", getU16Encoder()],
      ["initialSqrtPrice", getU128Encoder()],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_POOL_V2_DISCRIMINATOR }),
  );
}

export function getInitializePoolV2InstructionDataDecoder(): FixedSizeDecoder<InitializePoolV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["tickSpacing", getU16Decoder()],
    ["initialSqrtPrice", getU128Decoder()],
  ]);
}

export function getInitializePoolV2InstructionDataCodec(): FixedSizeCodec<
  InitializePoolV2InstructionDataArgs,
  InitializePoolV2InstructionData
> {
  return combineCodec(
    getInitializePoolV2InstructionDataEncoder(),
    getInitializePoolV2InstructionDataDecoder(),
  );
}

export type InitializePoolV2AsyncInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenBadgeA extends string = string,
  TAccountTokenBadgeB extends string = string,
  TAccountFunder extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountFeeTier extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenBadgeA?: Address<TAccountTokenBadgeA>;
  tokenBadgeB?: Address<TAccountTokenBadgeB>;
  funder: TransactionSigner<TAccountFunder>;
  whirlpool?: Address<TAccountWhirlpool>;
  tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
  tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
  feeTier: Address<TAccountFeeTier>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  tickSpacing: InitializePoolV2InstructionDataArgs["tickSpacing"];
  initialSqrtPrice: InitializePoolV2InstructionDataArgs["initialSqrtPrice"];
};

export async function getInitializePoolV2InstructionAsync<
  TAccountWhirlpoolsConfig extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenBadgeA extends string,
  TAccountTokenBadgeB extends string,
  TAccountFunder extends string,
  TAccountWhirlpool extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountFeeTier extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePoolV2AsyncInput<
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializePoolV2Instruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenBadgeA: { value: input.tokenBadgeA ?? null, isWritable: false },
    tokenBadgeB: { value: input.tokenBadgeB ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    feeTier: { value: input.feeTier ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenBadgeA.value) {
    accounts.tokenBadgeA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.tokenBadgeB.value) {
    accounts.tokenBadgeB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }
  if (!accounts.whirlpool.value) {
    accounts.whirlpool.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([119, 104, 105, 114, 108, 112, 111, 111, 108]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
        getU16Encoder().encode(expectSome(args.tickSpacing)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenBadgeA),
      getAccountMeta(accounts.tokenBadgeB),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.feeTier),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializePoolV2InstructionDataEncoder().encode(
      args as InitializePoolV2InstructionDataArgs,
    ),
    programAddress,
  } as InitializePoolV2Instruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type InitializePoolV2Input<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenBadgeA extends string = string,
  TAccountTokenBadgeB extends string = string,
  TAccountFunder extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountFeeTier extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenBadgeA: Address<TAccountTokenBadgeA>;
  tokenBadgeB: Address<TAccountTokenBadgeB>;
  funder: TransactionSigner<TAccountFunder>;
  whirlpool: Address<TAccountWhirlpool>;
  tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
  tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
  feeTier: Address<TAccountFeeTier>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  tickSpacing: InitializePoolV2InstructionDataArgs["tickSpacing"];
  initialSqrtPrice: InitializePoolV2InstructionDataArgs["initialSqrtPrice"];
};

export function getInitializePoolV2Instruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenBadgeA extends string,
  TAccountTokenBadgeB extends string,
  TAccountFunder extends string,
  TAccountWhirlpool extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountFeeTier extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePoolV2Input<
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePoolV2Instruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountTokenBadgeA,
  TAccountTokenBadgeB,
  TAccountFunder,
  TAccountWhirlpool,
  TAccountTokenVaultA,
  TAccountTokenVaultB,
  TAccountFeeTier,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenBadgeA: { value: input.tokenBadgeA ?? null, isWritable: false },
    tokenBadgeB: { value: input.tokenBadgeB ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    feeTier: { value: input.feeTier ?? null, isWritable: false },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenBadgeA),
      getAccountMeta(accounts.tokenBadgeB),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.feeTier),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializePoolV2InstructionDataEncoder().encode(
      args as InitializePoolV2InstructionDataArgs,
    ),
    programAddress,
  } as InitializePoolV2Instruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedInitializePoolV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    tokenMintA: TAccountMetas[1];
    tokenMintB: TAccountMetas[2];
    tokenBadgeA: TAccountMetas[3];
    tokenBadgeB: TAccountMetas[4];
    funder: TAccountMetas[5];
    whirlpool: TAccountMetas[6];
    tokenVaultA: TAccountMetas[7];
    tokenVaultB: TAccountMetas[8];
    feeTier: TAccountMetas[9];
    tokenProgramA: TAccountMetas[10];
    tokenProgramB: TAccountMetas[11];
    systemProgram: TAccountMetas[12];
    rent: TAccountMetas[13];
  };
  data: InitializePoolV2InstructionData;
};

export function parseInitializePoolV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializePoolV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 14) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      tokenBadgeA: getNextAccount(),
      tokenBadgeB: getNextAccount(),
      funder: getNextAccount(),
      whirlpool: getNextAccount(),
      tokenVaultA: getNextAccount(),
      tokenVaultB: getNextAccount(),
      feeTier: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializePoolV2InstructionDataDecoder().decode(instruction.data),
  };
}
