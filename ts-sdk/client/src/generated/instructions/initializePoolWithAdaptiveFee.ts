/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const INITIALIZE_POOL_WITH_ADAPTIVE_FEE_DISCRIMINATOR = new Uint8Array([
  143, 94, 96, 76, 172, 124, 119, 199,
]);

export function getInitializePoolWithAdaptiveFeeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POOL_WITH_ADAPTIVE_FEE_DISCRIMINATOR,
  );
}

export type InitializePoolWithAdaptiveFeeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountTokenMintA extends string | AccountMeta<string> = string,
  TAccountTokenMintB extends string | AccountMeta<string> = string,
  TAccountTokenBadgeA extends string | AccountMeta<string> = string,
  TAccountTokenBadgeB extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountInitializePoolAuthority extends string | AccountMeta<string> = string,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountOracle extends string | AccountMeta<string> = string,
  TAccountTokenVaultA extends string | AccountMeta<string> = string,
  TAccountTokenVaultB extends string | AccountMeta<string> = string,
  TAccountAdaptiveFeeTier extends string | AccountMeta<string> = string,
  TAccountTokenProgramA extends string | AccountMeta<string> = string,
  TAccountTokenProgramB extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountTokenMintA extends string
        ? ReadonlyAccount<TAccountTokenMintA>
        : TAccountTokenMintA,
      TAccountTokenMintB extends string
        ? ReadonlyAccount<TAccountTokenMintB>
        : TAccountTokenMintB,
      TAccountTokenBadgeA extends string
        ? ReadonlyAccount<TAccountTokenBadgeA>
        : TAccountTokenBadgeA,
      TAccountTokenBadgeB extends string
        ? ReadonlyAccount<TAccountTokenBadgeB>
        : TAccountTokenBadgeB,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountInitializePoolAuthority extends string
        ? ReadonlySignerAccount<TAccountInitializePoolAuthority> &
            AccountSignerMeta<TAccountInitializePoolAuthority>
        : TAccountInitializePoolAuthority,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountOracle extends string
        ? WritableAccount<TAccountOracle>
        : TAccountOracle,
      TAccountTokenVaultA extends string
        ? WritableSignerAccount<TAccountTokenVaultA> &
            AccountSignerMeta<TAccountTokenVaultA>
        : TAccountTokenVaultA,
      TAccountTokenVaultB extends string
        ? WritableSignerAccount<TAccountTokenVaultB> &
            AccountSignerMeta<TAccountTokenVaultB>
        : TAccountTokenVaultB,
      TAccountAdaptiveFeeTier extends string
        ? ReadonlyAccount<TAccountAdaptiveFeeTier>
        : TAccountAdaptiveFeeTier,
      TAccountTokenProgramA extends string
        ? ReadonlyAccount<TAccountTokenProgramA>
        : TAccountTokenProgramA,
      TAccountTokenProgramB extends string
        ? ReadonlyAccount<TAccountTokenProgramB>
        : TAccountTokenProgramB,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePoolWithAdaptiveFeeInstructionData = {
  discriminator: ReadonlyUint8Array;
  initialSqrtPrice: bigint;
  tradeEnableTimestamp: Option<bigint>;
};

export type InitializePoolWithAdaptiveFeeInstructionDataArgs = {
  initialSqrtPrice: number | bigint;
  tradeEnableTimestamp: OptionOrNullable<number | bigint>;
};

export function getInitializePoolWithAdaptiveFeeInstructionDataEncoder(): Encoder<InitializePoolWithAdaptiveFeeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["initialSqrtPrice", getU128Encoder()],
      ["tradeEnableTimestamp", getOptionEncoder(getU64Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_POOL_WITH_ADAPTIVE_FEE_DISCRIMINATOR,
    }),
  );
}

export function getInitializePoolWithAdaptiveFeeInstructionDataDecoder(): Decoder<InitializePoolWithAdaptiveFeeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["initialSqrtPrice", getU128Decoder()],
    ["tradeEnableTimestamp", getOptionDecoder(getU64Decoder())],
  ]);
}

export function getInitializePoolWithAdaptiveFeeInstructionDataCodec(): Codec<
  InitializePoolWithAdaptiveFeeInstructionDataArgs,
  InitializePoolWithAdaptiveFeeInstructionData
> {
  return combineCodec(
    getInitializePoolWithAdaptiveFeeInstructionDataEncoder(),
    getInitializePoolWithAdaptiveFeeInstructionDataDecoder(),
  );
}

export type InitializePoolWithAdaptiveFeeAsyncInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenBadgeA extends string = string,
  TAccountTokenBadgeB extends string = string,
  TAccountFunder extends string = string,
  TAccountInitializePoolAuthority extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountOracle extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountAdaptiveFeeTier extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenBadgeA?: Address<TAccountTokenBadgeA>;
  tokenBadgeB?: Address<TAccountTokenBadgeB>;
  funder: TransactionSigner<TAccountFunder>;
  initializePoolAuthority: TransactionSigner<TAccountInitializePoolAuthority>;
  whirlpool: Address<TAccountWhirlpool>;
  oracle?: Address<TAccountOracle>;
  tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
  tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
  adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  initialSqrtPrice: InitializePoolWithAdaptiveFeeInstructionDataArgs["initialSqrtPrice"];
  tradeEnableTimestamp: InitializePoolWithAdaptiveFeeInstructionDataArgs["tradeEnableTimestamp"];
};

export async function getInitializePoolWithAdaptiveFeeInstructionAsync<
  TAccountWhirlpoolsConfig extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenBadgeA extends string,
  TAccountTokenBadgeB extends string,
  TAccountFunder extends string,
  TAccountInitializePoolAuthority extends string,
  TAccountWhirlpool extends string,
  TAccountOracle extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountAdaptiveFeeTier extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePoolWithAdaptiveFeeAsyncInput<
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountInitializePoolAuthority,
    TAccountWhirlpool,
    TAccountOracle,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountAdaptiveFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializePoolWithAdaptiveFeeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountInitializePoolAuthority,
    TAccountWhirlpool,
    TAccountOracle,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountAdaptiveFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenBadgeA: { value: input.tokenBadgeA ?? null, isWritable: false },
    tokenBadgeB: { value: input.tokenBadgeB ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    initializePoolAuthority: {
      value: input.initializePoolAuthority ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    adaptiveFeeTier: {
      value: input.adaptiveFeeTier ?? null,
      isWritable: false,
    },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenBadgeA.value) {
    accounts.tokenBadgeA.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintA.value)),
      ],
    });
  }
  if (!accounts.tokenBadgeB.value) {
    accounts.tokenBadgeB.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 111, 107, 101, 110, 95, 98, 97, 100, 103, 101]),
        ),
        getAddressEncoder().encode(
          expectAddress(accounts.whirlpoolsConfig.value),
        ),
        getAddressEncoder().encode(expectAddress(accounts.tokenMintB.value)),
      ],
    });
  }
  if (!accounts.oracle.value) {
    accounts.oracle.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([111, 114, 97, 99, 108, 101])),
        getAddressEncoder().encode(expectAddress(accounts.whirlpool.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenBadgeA),
      getAccountMeta(accounts.tokenBadgeB),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.initializePoolAuthority),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.adaptiveFeeTier),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializePoolWithAdaptiveFeeInstructionDataEncoder().encode(
      args as InitializePoolWithAdaptiveFeeInstructionDataArgs,
    ),
    programAddress,
  } as InitializePoolWithAdaptiveFeeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountInitializePoolAuthority,
    TAccountWhirlpool,
    TAccountOracle,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountAdaptiveFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type InitializePoolWithAdaptiveFeeInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountTokenMintA extends string = string,
  TAccountTokenMintB extends string = string,
  TAccountTokenBadgeA extends string = string,
  TAccountTokenBadgeB extends string = string,
  TAccountFunder extends string = string,
  TAccountInitializePoolAuthority extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountOracle extends string = string,
  TAccountTokenVaultA extends string = string,
  TAccountTokenVaultB extends string = string,
  TAccountAdaptiveFeeTier extends string = string,
  TAccountTokenProgramA extends string = string,
  TAccountTokenProgramB extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  tokenMintA: Address<TAccountTokenMintA>;
  tokenMintB: Address<TAccountTokenMintB>;
  tokenBadgeA: Address<TAccountTokenBadgeA>;
  tokenBadgeB: Address<TAccountTokenBadgeB>;
  funder: TransactionSigner<TAccountFunder>;
  initializePoolAuthority: TransactionSigner<TAccountInitializePoolAuthority>;
  whirlpool: Address<TAccountWhirlpool>;
  oracle: Address<TAccountOracle>;
  tokenVaultA: TransactionSigner<TAccountTokenVaultA>;
  tokenVaultB: TransactionSigner<TAccountTokenVaultB>;
  adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
  tokenProgramA: Address<TAccountTokenProgramA>;
  tokenProgramB: Address<TAccountTokenProgramB>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  initialSqrtPrice: InitializePoolWithAdaptiveFeeInstructionDataArgs["initialSqrtPrice"];
  tradeEnableTimestamp: InitializePoolWithAdaptiveFeeInstructionDataArgs["tradeEnableTimestamp"];
};

export function getInitializePoolWithAdaptiveFeeInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountTokenMintA extends string,
  TAccountTokenMintB extends string,
  TAccountTokenBadgeA extends string,
  TAccountTokenBadgeB extends string,
  TAccountFunder extends string,
  TAccountInitializePoolAuthority extends string,
  TAccountWhirlpool extends string,
  TAccountOracle extends string,
  TAccountTokenVaultA extends string,
  TAccountTokenVaultB extends string,
  TAccountAdaptiveFeeTier extends string,
  TAccountTokenProgramA extends string,
  TAccountTokenProgramB extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePoolWithAdaptiveFeeInput<
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountInitializePoolAuthority,
    TAccountWhirlpool,
    TAccountOracle,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountAdaptiveFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePoolWithAdaptiveFeeInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountTokenMintA,
  TAccountTokenMintB,
  TAccountTokenBadgeA,
  TAccountTokenBadgeB,
  TAccountFunder,
  TAccountInitializePoolAuthority,
  TAccountWhirlpool,
  TAccountOracle,
  TAccountTokenVaultA,
  TAccountTokenVaultB,
  TAccountAdaptiveFeeTier,
  TAccountTokenProgramA,
  TAccountTokenProgramB,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    tokenMintA: { value: input.tokenMintA ?? null, isWritable: false },
    tokenMintB: { value: input.tokenMintB ?? null, isWritable: false },
    tokenBadgeA: { value: input.tokenBadgeA ?? null, isWritable: false },
    tokenBadgeB: { value: input.tokenBadgeB ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    initializePoolAuthority: {
      value: input.initializePoolAuthority ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    oracle: { value: input.oracle ?? null, isWritable: true },
    tokenVaultA: { value: input.tokenVaultA ?? null, isWritable: true },
    tokenVaultB: { value: input.tokenVaultB ?? null, isWritable: true },
    adaptiveFeeTier: {
      value: input.adaptiveFeeTier ?? null,
      isWritable: false,
    },
    tokenProgramA: { value: input.tokenProgramA ?? null, isWritable: false },
    tokenProgramB: { value: input.tokenProgramB ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.tokenMintA),
      getAccountMeta(accounts.tokenMintB),
      getAccountMeta(accounts.tokenBadgeA),
      getAccountMeta(accounts.tokenBadgeB),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.initializePoolAuthority),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.oracle),
      getAccountMeta(accounts.tokenVaultA),
      getAccountMeta(accounts.tokenVaultB),
      getAccountMeta(accounts.adaptiveFeeTier),
      getAccountMeta(accounts.tokenProgramA),
      getAccountMeta(accounts.tokenProgramB),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    data: getInitializePoolWithAdaptiveFeeInstructionDataEncoder().encode(
      args as InitializePoolWithAdaptiveFeeInstructionDataArgs,
    ),
    programAddress,
  } as InitializePoolWithAdaptiveFeeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountTokenMintA,
    TAccountTokenMintB,
    TAccountTokenBadgeA,
    TAccountTokenBadgeB,
    TAccountFunder,
    TAccountInitializePoolAuthority,
    TAccountWhirlpool,
    TAccountOracle,
    TAccountTokenVaultA,
    TAccountTokenVaultB,
    TAccountAdaptiveFeeTier,
    TAccountTokenProgramA,
    TAccountTokenProgramB,
    TAccountSystemProgram,
    TAccountRent
  >);
}

export type ParsedInitializePoolWithAdaptiveFeeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    tokenMintA: TAccountMetas[1];
    tokenMintB: TAccountMetas[2];
    tokenBadgeA: TAccountMetas[3];
    tokenBadgeB: TAccountMetas[4];
    funder: TAccountMetas[5];
    initializePoolAuthority: TAccountMetas[6];
    whirlpool: TAccountMetas[7];
    oracle: TAccountMetas[8];
    tokenVaultA: TAccountMetas[9];
    tokenVaultB: TAccountMetas[10];
    adaptiveFeeTier: TAccountMetas[11];
    tokenProgramA: TAccountMetas[12];
    tokenProgramB: TAccountMetas[13];
    systemProgram: TAccountMetas[14];
    rent: TAccountMetas[15];
  };
  data: InitializePoolWithAdaptiveFeeInstructionData;
};

export function parseInitializePoolWithAdaptiveFeeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializePoolWithAdaptiveFeeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 16) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      tokenMintA: getNextAccount(),
      tokenMintB: getNextAccount(),
      tokenBadgeA: getNextAccount(),
      tokenBadgeB: getNextAccount(),
      funder: getNextAccount(),
      initializePoolAuthority: getNextAccount(),
      whirlpool: getNextAccount(),
      oracle: getNextAccount(),
      tokenVaultA: getNextAccount(),
      tokenVaultB: getNextAccount(),
      adaptiveFeeTier: getNextAccount(),
      tokenProgramA: getNextAccount(),
      tokenProgramB: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializePoolWithAdaptiveFeeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
