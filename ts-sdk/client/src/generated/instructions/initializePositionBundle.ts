/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INITIALIZE_POSITION_BUNDLE_DISCRIMINATOR = new Uint8Array([
  117, 45, 241, 149, 24, 18, 194, 65,
]);

export function getInitializePositionBundleDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_POSITION_BUNDLE_DISCRIMINATOR,
  );
}

export type InitializePositionBundleInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountPositionBundle extends string | IAccountMeta<string> = string,
  TAccountPositionBundleMint extends string | IAccountMeta<string> = string,
  TAccountPositionBundleTokenAccount extends
    | string
    | IAccountMeta<string> = string,
  TAccountPositionBundleOwner extends string | IAccountMeta<string> = string,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | IAccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPositionBundle extends string
        ? WritableAccount<TAccountPositionBundle>
        : TAccountPositionBundle,
      TAccountPositionBundleMint extends string
        ? WritableSignerAccount<TAccountPositionBundleMint> &
            IAccountSignerMeta<TAccountPositionBundleMint>
        : TAccountPositionBundleMint,
      TAccountPositionBundleTokenAccount extends string
        ? WritableAccount<TAccountPositionBundleTokenAccount>
        : TAccountPositionBundleTokenAccount,
      TAccountPositionBundleOwner extends string
        ? ReadonlyAccount<TAccountPositionBundleOwner>
        : TAccountPositionBundleOwner,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePositionBundleInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializePositionBundleInstructionDataArgs = {};

export function getInitializePositionBundleInstructionDataEncoder(): Encoder<InitializePositionBundleInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_POSITION_BUNDLE_DISCRIMINATOR,
    }),
  );
}

export function getInitializePositionBundleInstructionDataDecoder(): Decoder<InitializePositionBundleInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializePositionBundleInstructionDataCodec(): Codec<
  InitializePositionBundleInstructionDataArgs,
  InitializePositionBundleInstructionData
> {
  return combineCodec(
    getInitializePositionBundleInstructionDataEncoder(),
    getInitializePositionBundleInstructionDataDecoder(),
  );
}

export type InitializePositionBundleInput<
  TAccountPositionBundle extends string = string,
  TAccountPositionBundleMint extends string = string,
  TAccountPositionBundleTokenAccount extends string = string,
  TAccountPositionBundleOwner extends string = string,
  TAccountFunder extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
> = {
  positionBundle: Address<TAccountPositionBundle>;
  positionBundleMint: TransactionSigner<TAccountPositionBundleMint>;
  positionBundleTokenAccount: Address<TAccountPositionBundleTokenAccount>;
  positionBundleOwner: Address<TAccountPositionBundleOwner>;
  funder: TransactionSigner<TAccountFunder>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
};

export function getInitializePositionBundleInstruction<
  TAccountPositionBundle extends string,
  TAccountPositionBundleMint extends string,
  TAccountPositionBundleTokenAccount extends string,
  TAccountPositionBundleOwner extends string,
  TAccountFunder extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountAssociatedTokenProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializePositionBundleInput<
    TAccountPositionBundle,
    TAccountPositionBundleMint,
    TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializePositionBundleInstruction<
  TProgramAddress,
  TAccountPositionBundle,
  TAccountPositionBundleMint,
  TAccountPositionBundleTokenAccount,
  TAccountPositionBundleOwner,
  TAccountFunder,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountAssociatedTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionBundle: { value: input.positionBundle ?? null, isWritable: true },
    positionBundleMint: {
      value: input.positionBundleMint ?? null,
      isWritable: true,
    },
    positionBundleTokenAccount: {
      value: input.positionBundleTokenAccount ?? null,
      isWritable: true,
    },
    positionBundleOwner: {
      value: input.positionBundleOwner ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.positionBundle),
      getAccountMeta(accounts.positionBundleMint),
      getAccountMeta(accounts.positionBundleTokenAccount),
      getAccountMeta(accounts.positionBundleOwner),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.associatedTokenProgram),
    ],
    programAddress,
    data: getInitializePositionBundleInstructionDataEncoder().encode({}),
  } as InitializePositionBundleInstruction<
    TProgramAddress,
    TAccountPositionBundle,
    TAccountPositionBundleMint,
    TAccountPositionBundleTokenAccount,
    TAccountPositionBundleOwner,
    TAccountFunder,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram
  >;

  return instruction;
}

export type ParsedInitializePositionBundleInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    positionBundle: TAccountMetas[0];
    positionBundleMint: TAccountMetas[1];
    positionBundleTokenAccount: TAccountMetas[2];
    positionBundleOwner: TAccountMetas[3];
    funder: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
    rent: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
  };
  data: InitializePositionBundleInstructionData;
};

export function parseInitializePositionBundleInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializePositionBundleInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      positionBundle: getNextAccount(),
      positionBundleMint: getNextAccount(),
      positionBundleTokenAccount: getNextAccount(),
      positionBundleOwner: getNextAccount(),
      funder: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
    },
    data: getInitializePositionBundleInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
