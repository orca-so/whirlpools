/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const INITIALIZE_REWARD_V2_DISCRIMINATOR = new Uint8Array([
  91, 1, 77, 50, 235, 229, 133, 49,
]);

export function getInitializeRewardV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_REWARD_V2_DISCRIMINATOR,
  );
}

export type InitializeRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountRewardAuthority extends string | IAccountMeta<string> = string,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountRewardMint extends string | IAccountMeta<string> = string,
  TAccountRewardTokenBadge extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TAccountRewardTokenProgram extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | IAccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountRewardAuthority extends string
        ? ReadonlySignerAccount<TAccountRewardAuthority> &
            IAccountSignerMeta<TAccountRewardAuthority>
        : TAccountRewardAuthority,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountRewardMint extends string
        ? ReadonlyAccount<TAccountRewardMint>
        : TAccountRewardMint,
      TAccountRewardTokenBadge extends string
        ? ReadonlyAccount<TAccountRewardTokenBadge>
        : TAccountRewardTokenBadge,
      TAccountRewardVault extends string
        ? WritableSignerAccount<TAccountRewardVault> &
            IAccountSignerMeta<TAccountRewardVault>
        : TAccountRewardVault,
      TAccountRewardTokenProgram extends string
        ? ReadonlyAccount<TAccountRewardTokenProgram>
        : TAccountRewardTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeRewardV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
};

export type InitializeRewardV2InstructionDataArgs = { rewardIndex: number };

export function getInitializeRewardV2InstructionDataEncoder(): Encoder<InitializeRewardV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_REWARD_V2_DISCRIMINATOR,
    }),
  );
}

export function getInitializeRewardV2InstructionDataDecoder(): Decoder<InitializeRewardV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
  ]);
}

export function getInitializeRewardV2InstructionDataCodec(): Codec<
  InitializeRewardV2InstructionDataArgs,
  InitializeRewardV2InstructionData
> {
  return combineCodec(
    getInitializeRewardV2InstructionDataEncoder(),
    getInitializeRewardV2InstructionDataDecoder(),
  );
}

export type InitializeRewardV2Input<
  TAccountRewardAuthority extends string = string,
  TAccountFunder extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountRewardMint extends string = string,
  TAccountRewardTokenBadge extends string = string,
  TAccountRewardVault extends string = string,
  TAccountRewardTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
> = {
  rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
  funder: TransactionSigner<TAccountFunder>;
  whirlpool: Address<TAccountWhirlpool>;
  rewardMint: Address<TAccountRewardMint>;
  rewardTokenBadge: Address<TAccountRewardTokenBadge>;
  rewardVault: TransactionSigner<TAccountRewardVault>;
  rewardTokenProgram: Address<TAccountRewardTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  rewardIndex: InitializeRewardV2InstructionDataArgs["rewardIndex"];
};

export function getInitializeRewardV2Instruction<
  TAccountRewardAuthority extends string,
  TAccountFunder extends string,
  TAccountWhirlpool extends string,
  TAccountRewardMint extends string,
  TAccountRewardTokenBadge extends string,
  TAccountRewardVault extends string,
  TAccountRewardTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeRewardV2Input<
    TAccountRewardAuthority,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountRewardMint,
    TAccountRewardTokenBadge,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeRewardV2Instruction<
  TProgramAddress,
  TAccountRewardAuthority,
  TAccountFunder,
  TAccountWhirlpool,
  TAccountRewardMint,
  TAccountRewardTokenBadge,
  TAccountRewardVault,
  TAccountRewardTokenProgram,
  TAccountSystemProgram,
  TAccountRent
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    funder: { value: input.funder ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    rewardMint: { value: input.rewardMint ?? null, isWritable: false },
    rewardTokenBadge: {
      value: input.rewardTokenBadge ?? null,
      isWritable: false,
    },
    rewardVault: { value: input.rewardVault ?? null, isWritable: true },
    rewardTokenProgram: {
      value: input.rewardTokenProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.rewardMint),
      getAccountMeta(accounts.rewardTokenBadge),
      getAccountMeta(accounts.rewardVault),
      getAccountMeta(accounts.rewardTokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
    ],
    programAddress,
    data: getInitializeRewardV2InstructionDataEncoder().encode(
      args as InitializeRewardV2InstructionDataArgs,
    ),
  } as InitializeRewardV2Instruction<
    TProgramAddress,
    TAccountRewardAuthority,
    TAccountFunder,
    TAccountWhirlpool,
    TAccountRewardMint,
    TAccountRewardTokenBadge,
    TAccountRewardVault,
    TAccountRewardTokenProgram,
    TAccountSystemProgram,
    TAccountRent
  >;

  return instruction;
}

export type ParsedInitializeRewardV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    rewardAuthority: TAccountMetas[0];
    funder: TAccountMetas[1];
    whirlpool: TAccountMetas[2];
    rewardMint: TAccountMetas[3];
    rewardTokenBadge: TAccountMetas[4];
    rewardVault: TAccountMetas[5];
    rewardTokenProgram: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    rent: TAccountMetas[8];
  };
  data: InitializeRewardV2InstructionData;
};

export function parseInitializeRewardV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedInitializeRewardV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      rewardAuthority: getNextAccount(),
      funder: getNextAccount(),
      whirlpool: getNextAccount(),
      rewardMint: getNextAccount(),
      rewardTokenBadge: getNextAccount(),
      rewardVault: getNextAccount(),
      rewardTokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
    },
    data: getInitializeRewardV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
