/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const INITIALIZE_TICK_ARRAY_DISCRIMINATOR = new Uint8Array([
  11, 188, 193, 214, 141, 91, 149, 184,
]);

export function getInitializeTickArrayDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_TICK_ARRAY_DISCRIMINATOR,
  );
}

export type InitializeTickArrayInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountTickArray extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountTickArray extends string
        ? WritableAccount<TAccountTickArray>
        : TAccountTickArray,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeTickArrayInstructionData = {
  discriminator: ReadonlyUint8Array;
  startTickIndex: number;
};

export type InitializeTickArrayInstructionDataArgs = { startTickIndex: number };

export function getInitializeTickArrayInstructionDataEncoder(): FixedSizeEncoder<InitializeTickArrayInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["startTickIndex", getI32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_TICK_ARRAY_DISCRIMINATOR,
    }),
  );
}

export function getInitializeTickArrayInstructionDataDecoder(): FixedSizeDecoder<InitializeTickArrayInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["startTickIndex", getI32Decoder()],
  ]);
}

export function getInitializeTickArrayInstructionDataCodec(): FixedSizeCodec<
  InitializeTickArrayInstructionDataArgs,
  InitializeTickArrayInstructionData
> {
  return combineCodec(
    getInitializeTickArrayInstructionDataEncoder(),
    getInitializeTickArrayInstructionDataDecoder(),
  );
}

export type InitializeTickArrayAsyncInput<
  TAccountWhirlpool extends string = string,
  TAccountFunder extends string = string,
  TAccountTickArray extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  funder: TransactionSigner<TAccountFunder>;
  tickArray?: Address<TAccountTickArray>;
  systemProgram?: Address<TAccountSystemProgram>;
  startTickIndex: InitializeTickArrayInstructionDataArgs["startTickIndex"];
};

export async function getInitializeTickArrayInstructionAsync<
  TAccountWhirlpool extends string,
  TAccountFunder extends string,
  TAccountTickArray extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeTickArrayAsyncInput<
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  InitializeTickArrayInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    tickArray: { value: input.tickArray ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tickArray.value) {
    accounts.tickArray.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([116, 105, 99, 107, 95, 97, 114, 114, 97, 121]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.whirlpool.value)),
        getI32Encoder().encode(expectSome(args.startTickIndex)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tickArray),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeTickArrayInstructionDataEncoder().encode(
      args as InitializeTickArrayInstructionDataArgs,
    ),
    programAddress,
  } as InitializeTickArrayInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >);
}

export type InitializeTickArrayInput<
  TAccountWhirlpool extends string = string,
  TAccountFunder extends string = string,
  TAccountTickArray extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  funder: TransactionSigner<TAccountFunder>;
  tickArray: Address<TAccountTickArray>;
  systemProgram?: Address<TAccountSystemProgram>;
  startTickIndex: InitializeTickArrayInstructionDataArgs["startTickIndex"];
};

export function getInitializeTickArrayInstruction<
  TAccountWhirlpool extends string,
  TAccountFunder extends string,
  TAccountTickArray extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: InitializeTickArrayInput<
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): InitializeTickArrayInstruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountFunder,
  TAccountTickArray,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    tickArray: { value: input.tickArray ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.tickArray),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeTickArrayInstructionDataEncoder().encode(
      args as InitializeTickArrayInstructionDataArgs,
    ),
    programAddress,
  } as InitializeTickArrayInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountFunder,
    TAccountTickArray,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeTickArrayInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    funder: TAccountMetas[1];
    tickArray: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: InitializeTickArrayInstructionData;
};

export function parseInitializeTickArrayInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedInitializeTickArrayInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      funder: getNextAccount(),
      tickArray: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeTickArrayInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
