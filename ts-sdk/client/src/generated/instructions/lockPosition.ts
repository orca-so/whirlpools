/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";
import {
  getLockTypeDecoder,
  getLockTypeEncoder,
  type LockType,
  type LockTypeArgs,
} from "../types";

export const LOCK_POSITION_DISCRIMINATOR = new Uint8Array([
  227, 62, 2, 252, 247, 10, 171, 185,
]);

export function getLockPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    LOCK_POSITION_DISCRIMINATOR,
  );
}

export type LockPositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountPositionAuthority extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionMint extends string | AccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | AccountMeta<string> = string,
  TAccountLockConfig extends string | AccountMeta<string> = string,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountToken2022Program extends
    | string
    | AccountMeta<string> = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            AccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountPosition extends string
        ? ReadonlyAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? ReadonlyAccount<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountLockConfig extends string
        ? WritableAccount<TAccountLockConfig>
        : TAccountLockConfig,
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type LockPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
  lockType: LockType;
};

export type LockPositionInstructionDataArgs = { lockType: LockTypeArgs };

export function getLockPositionInstructionDataEncoder(): FixedSizeEncoder<LockPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["lockType", getLockTypeEncoder()],
    ]),
    (value) => ({ ...value, discriminator: LOCK_POSITION_DISCRIMINATOR }),
  );
}

export function getLockPositionInstructionDataDecoder(): FixedSizeDecoder<LockPositionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["lockType", getLockTypeDecoder()],
  ]);
}

export function getLockPositionInstructionDataCodec(): FixedSizeCodec<
  LockPositionInstructionDataArgs,
  LockPositionInstructionData
> {
  return combineCodec(
    getLockPositionInstructionDataEncoder(),
    getLockPositionInstructionDataDecoder(),
  );
}

export type LockPositionAsyncInput<
  TAccountFunder extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountLockConfig extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position?: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  lockConfig?: Address<TAccountLockConfig>;
  whirlpool: Address<TAccountWhirlpool>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  lockType: LockPositionInstructionDataArgs["lockType"];
};

export async function getLockPositionInstructionAsync<
  TAccountFunder extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountLockConfig extends string,
  TAccountWhirlpool extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: LockPositionAsyncInput<
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountLockConfig,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  LockPositionInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountLockConfig,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: false },
    positionMint: { value: input.positionMint ?? null, isWritable: false },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    lockConfig: { value: input.lockConfig ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.position.value) {
    accounts.position.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.positionMint.value)),
      ],
    });
  }
  if (!accounts.lockConfig.value) {
    accounts.lockConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([108, 111, 99, 107, 95, 99, 111, 110, 102, 105, 103]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.position.value)),
      ],
    });
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.lockConfig),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getLockPositionInstructionDataEncoder().encode(
      args as LockPositionInstructionDataArgs,
    ),
    programAddress,
  } as LockPositionInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountLockConfig,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram
  >);
}

export type LockPositionInput<
  TAccountFunder extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountLockConfig extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  position: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  lockConfig: Address<TAccountLockConfig>;
  whirlpool: Address<TAccountWhirlpool>;
  token2022Program?: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  lockType: LockPositionInstructionDataArgs["lockType"];
};

export function getLockPositionInstruction<
  TAccountFunder extends string,
  TAccountPositionAuthority extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountLockConfig extends string,
  TAccountWhirlpool extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: LockPositionInput<
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountLockConfig,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): LockPositionInstruction<
  TProgramAddress,
  TAccountFunder,
  TAccountPositionAuthority,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountLockConfig,
  TAccountWhirlpool,
  TAccountToken2022Program,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    position: { value: input.position ?? null, isWritable: false },
    positionMint: { value: input.positionMint ?? null, isWritable: false },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    lockConfig: { value: input.lockConfig ?? null, isWritable: true },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.lockConfig),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getLockPositionInstructionDataEncoder().encode(
      args as LockPositionInstructionDataArgs,
    ),
    programAddress,
  } as LockPositionInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountLockConfig,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram
  >);
}

export type ParsedLockPositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    funder: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    lockConfig: TAccountMetas[5];
    whirlpool: TAccountMetas[6];
    token2022Program: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
  };
  data: LockPositionInstructionData;
};

export function parseLockPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedLockPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      funder: getNextAccount(),
      positionAuthority: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      lockConfig: getNextAccount(),
      whirlpool: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getLockPositionInstructionDataDecoder().decode(instruction.data),
  };
}
