/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const OPEN_POSITION_WITH_METADATA_DISCRIMINATOR = new Uint8Array([
  242, 29, 134, 48, 58, 110, 14, 60,
]);

export function getOpenPositionWithMetadataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_POSITION_WITH_METADATA_DISCRIMINATOR,
  );
}

export type OpenPositionWithMetadataInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountOwner extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionMint extends string | AccountMeta<string> = string,
  TAccountPositionMetadataAccount extends string | AccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | AccountMeta<string> = string,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA",
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = "11111111111111111111111111111111",
  TAccountRent extends
    | string
    | AccountMeta<string> = "SysvarRent111111111111111111111111111111111",
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL",
  TAccountMetadataProgram extends
    | string
    | AccountMeta<string> = "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s",
  TAccountMetadataUpdateAuth extends
    | string
    | AccountMeta<string> = "3axbTs2z5GBy6usVbNVoqEgZMng3vZvMnAoX29BFfwhr",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? WritableSignerAccount<TAccountPositionMint> &
            AccountSignerMeta<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionMetadataAccount extends string
        ? WritableAccount<TAccountPositionMetadataAccount>
        : TAccountPositionMetadataAccount,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountRent extends string
        ? ReadonlyAccount<TAccountRent>
        : TAccountRent,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataProgram extends string
        ? ReadonlyAccount<TAccountMetadataProgram>
        : TAccountMetadataProgram,
      TAccountMetadataUpdateAuth extends string
        ? ReadonlyAccount<TAccountMetadataUpdateAuth>
        : TAccountMetadataUpdateAuth,
      ...TRemainingAccounts,
    ]
  >;

export type OpenPositionWithMetadataInstructionData = {
  discriminator: ReadonlyUint8Array;
  positionBump: number;
  metadataBump: number;
  tickLowerIndex: number;
  tickUpperIndex: number;
};

export type OpenPositionWithMetadataInstructionDataArgs = {
  positionBump: number;
  metadataBump: number;
  tickLowerIndex: number;
  tickUpperIndex: number;
};

export function getOpenPositionWithMetadataInstructionDataEncoder(): FixedSizeEncoder<OpenPositionWithMetadataInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["positionBump", getU8Encoder()],
      ["metadataBump", getU8Encoder()],
      ["tickLowerIndex", getI32Encoder()],
      ["tickUpperIndex", getI32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: OPEN_POSITION_WITH_METADATA_DISCRIMINATOR,
    }),
  );
}

export function getOpenPositionWithMetadataInstructionDataDecoder(): FixedSizeDecoder<OpenPositionWithMetadataInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["positionBump", getU8Decoder()],
    ["metadataBump", getU8Decoder()],
    ["tickLowerIndex", getI32Decoder()],
    ["tickUpperIndex", getI32Decoder()],
  ]);
}

export function getOpenPositionWithMetadataInstructionDataCodec(): FixedSizeCodec<
  OpenPositionWithMetadataInstructionDataArgs,
  OpenPositionWithMetadataInstructionData
> {
  return combineCodec(
    getOpenPositionWithMetadataInstructionDataEncoder(),
    getOpenPositionWithMetadataInstructionDataDecoder(),
  );
}

export type OpenPositionWithMetadataAsyncInput<
  TAccountFunder extends string = string,
  TAccountOwner extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionMetadataAccount extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  owner: Address<TAccountOwner>;
  position?: Address<TAccountPosition>;
  positionMint: TransactionSigner<TAccountPositionMint>;
  /** https://github.com/metaplex-foundation/mpl-token-metadata/blob/master/programs/token-metadata/program/src/utils/metadata.rs#L78 */
  positionMetadataAccount: Address<TAccountPositionMetadataAccount>;
  positionTokenAccount?: Address<TAccountPositionTokenAccount>;
  whirlpool: Address<TAccountWhirlpool>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  metadataUpdateAuth?: Address<TAccountMetadataUpdateAuth>;
  positionBump: OpenPositionWithMetadataInstructionDataArgs["positionBump"];
  metadataBump: OpenPositionWithMetadataInstructionDataArgs["metadataBump"];
  tickLowerIndex: OpenPositionWithMetadataInstructionDataArgs["tickLowerIndex"];
  tickUpperIndex: OpenPositionWithMetadataInstructionDataArgs["tickUpperIndex"];
};

export async function getOpenPositionWithMetadataInstructionAsync<
  TAccountFunder extends string,
  TAccountOwner extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionMetadataAccount extends string,
  TAccountPositionTokenAccount extends string,
  TAccountWhirlpool extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountMetadataUpdateAuth extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: OpenPositionWithMetadataAsyncInput<
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountMetadataUpdateAuth
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  OpenPositionWithMetadataInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountMetadataUpdateAuth
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionMetadataAccount: {
      value: input.positionMetadataAccount ?? null,
      isWritable: true,
    },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.position.value) {
    accounts.position.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.positionMint.value)),
      ],
    });
  }
  if (!accounts.positionTokenAccount.value) {
    accounts.positionTokenAccount.value = await getProgramDerivedAddress({
      programAddress:
        "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.owner.value)),
        getBytesEncoder().encode(
          new Uint8Array([
            6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235,
            121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133,
            126, 255, 0, 169,
          ]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.positionMint.value)),
      ],
    });
  }
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" as Address<"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s">;
  }
  if (!accounts.metadataUpdateAuth.value) {
    accounts.metadataUpdateAuth.value =
      "3axbTs2z5GBy6usVbNVoqEgZMng3vZvMnAoX29BFfwhr" as Address<"3axbTs2z5GBy6usVbNVoqEgZMng3vZvMnAoX29BFfwhr">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionMetadataAccount),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.metadataUpdateAuth),
    ],
    data: getOpenPositionWithMetadataInstructionDataEncoder().encode(
      args as OpenPositionWithMetadataInstructionDataArgs,
    ),
    programAddress,
  } as OpenPositionWithMetadataInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountMetadataUpdateAuth
  >);
}

export type OpenPositionWithMetadataInput<
  TAccountFunder extends string = string,
  TAccountOwner extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionMetadataAccount extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountRent extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataProgram extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  owner: Address<TAccountOwner>;
  position: Address<TAccountPosition>;
  positionMint: TransactionSigner<TAccountPositionMint>;
  /** https://github.com/metaplex-foundation/mpl-token-metadata/blob/master/programs/token-metadata/program/src/utils/metadata.rs#L78 */
  positionMetadataAccount: Address<TAccountPositionMetadataAccount>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  whirlpool: Address<TAccountWhirlpool>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  rent?: Address<TAccountRent>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  metadataProgram?: Address<TAccountMetadataProgram>;
  metadataUpdateAuth?: Address<TAccountMetadataUpdateAuth>;
  positionBump: OpenPositionWithMetadataInstructionDataArgs["positionBump"];
  metadataBump: OpenPositionWithMetadataInstructionDataArgs["metadataBump"];
  tickLowerIndex: OpenPositionWithMetadataInstructionDataArgs["tickLowerIndex"];
  tickUpperIndex: OpenPositionWithMetadataInstructionDataArgs["tickUpperIndex"];
};

export function getOpenPositionWithMetadataInstruction<
  TAccountFunder extends string,
  TAccountOwner extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionMetadataAccount extends string,
  TAccountPositionTokenAccount extends string,
  TAccountWhirlpool extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountRent extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataProgram extends string,
  TAccountMetadataUpdateAuth extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: OpenPositionWithMetadataInput<
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountMetadataUpdateAuth
  >,
  config?: { programAddress?: TProgramAddress },
): OpenPositionWithMetadataInstruction<
  TProgramAddress,
  TAccountFunder,
  TAccountOwner,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionMetadataAccount,
  TAccountPositionTokenAccount,
  TAccountWhirlpool,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountRent,
  TAccountAssociatedTokenProgram,
  TAccountMetadataProgram,
  TAccountMetadataUpdateAuth
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionMetadataAccount: {
      value: input.positionMetadataAccount ?? null,
      isWritable: true,
    },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    rent: { value: input.rent ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataProgram: {
      value: input.metadataProgram ?? null,
      isWritable: false,
    },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA" as Address<"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA">;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }
  if (!accounts.rent.value) {
    accounts.rent.value =
      "SysvarRent111111111111111111111111111111111" as Address<"SysvarRent111111111111111111111111111111111">;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL" as Address<"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL">;
  }
  if (!accounts.metadataProgram.value) {
    accounts.metadataProgram.value =
      "metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s" as Address<"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s">;
  }
  if (!accounts.metadataUpdateAuth.value) {
    accounts.metadataUpdateAuth.value =
      "3axbTs2z5GBy6usVbNVoqEgZMng3vZvMnAoX29BFfwhr" as Address<"3axbTs2z5GBy6usVbNVoqEgZMng3vZvMnAoX29BFfwhr">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionMetadataAccount),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.rent),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataProgram),
      getAccountMeta(accounts.metadataUpdateAuth),
    ],
    data: getOpenPositionWithMetadataInstructionDataEncoder().encode(
      args as OpenPositionWithMetadataInstructionDataArgs,
    ),
    programAddress,
  } as OpenPositionWithMetadataInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionMetadataAccount,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountRent,
    TAccountAssociatedTokenProgram,
    TAccountMetadataProgram,
    TAccountMetadataUpdateAuth
  >);
}

export type ParsedOpenPositionWithMetadataInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    funder: TAccountMetas[0];
    owner: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    /** https://github.com/metaplex-foundation/mpl-token-metadata/blob/master/programs/token-metadata/program/src/utils/metadata.rs#L78 */
    positionMetadataAccount: TAccountMetas[4];
    positionTokenAccount: TAccountMetas[5];
    whirlpool: TAccountMetas[6];
    tokenProgram: TAccountMetas[7];
    systemProgram: TAccountMetas[8];
    rent: TAccountMetas[9];
    associatedTokenProgram: TAccountMetas[10];
    metadataProgram: TAccountMetas[11];
    metadataUpdateAuth: TAccountMetas[12];
  };
  data: OpenPositionWithMetadataInstructionData;
};

export function parseOpenPositionWithMetadataInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedOpenPositionWithMetadataInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 13) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      funder: getNextAccount(),
      owner: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionMetadataAccount: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      whirlpool: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      rent: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataProgram: getNextAccount(),
      metadataUpdateAuth: getNextAccount(),
    },
    data: getOpenPositionWithMetadataInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
