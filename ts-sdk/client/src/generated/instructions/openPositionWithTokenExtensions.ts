/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const OPEN_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR = new Uint8Array(
  [212, 47, 95, 92, 114, 102, 131, 250],
);

export function getOpenPositionWithTokenExtensionsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPEN_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR,
  );
}

export type OpenPositionWithTokenExtensionsInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionMint extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountToken2022Program extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TAccountAssociatedTokenProgram extends string | IAccountMeta<string> = string,
  TAccountMetadataUpdateAuth extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? WritableSignerAccount<TAccountPositionMint> &
            IAccountSignerMeta<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountMetadataUpdateAuth extends string
        ? ReadonlyAccount<TAccountMetadataUpdateAuth>
        : TAccountMetadataUpdateAuth,
      ...TRemainingAccounts,
    ]
  >;

export type OpenPositionWithTokenExtensionsInstructionData = {
  discriminator: ReadonlyUint8Array;
  tickLowerIndex: number;
  tickUpperIndex: number;
  withTokenMetadataExtension: boolean;
};

export type OpenPositionWithTokenExtensionsInstructionDataArgs = {
  tickLowerIndex: number;
  tickUpperIndex: number;
  withTokenMetadataExtension: boolean;
};

export function getOpenPositionWithTokenExtensionsInstructionDataEncoder(): Encoder<OpenPositionWithTokenExtensionsInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["tickLowerIndex", getI32Encoder()],
      ["tickUpperIndex", getI32Encoder()],
      ["withTokenMetadataExtension", getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: OPEN_POSITION_WITH_TOKEN_EXTENSIONS_DISCRIMINATOR,
    }),
  );
}

export function getOpenPositionWithTokenExtensionsInstructionDataDecoder(): Decoder<OpenPositionWithTokenExtensionsInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["tickLowerIndex", getI32Decoder()],
    ["tickUpperIndex", getI32Decoder()],
    ["withTokenMetadataExtension", getBooleanDecoder()],
  ]);
}

export function getOpenPositionWithTokenExtensionsInstructionDataCodec(): Codec<
  OpenPositionWithTokenExtensionsInstructionDataArgs,
  OpenPositionWithTokenExtensionsInstructionData
> {
  return combineCodec(
    getOpenPositionWithTokenExtensionsInstructionDataEncoder(),
    getOpenPositionWithTokenExtensionsInstructionDataDecoder(),
  );
}

export type OpenPositionWithTokenExtensionsInput<
  TAccountFunder extends string = string,
  TAccountOwner extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountToken2022Program extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountMetadataUpdateAuth extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  owner: Address<TAccountOwner>;
  position: Address<TAccountPosition>;
  positionMint: TransactionSigner<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  whirlpool: Address<TAccountWhirlpool>;
  token2022Program: Address<TAccountToken2022Program>;
  systemProgram?: Address<TAccountSystemProgram>;
  associatedTokenProgram: Address<TAccountAssociatedTokenProgram>;
  metadataUpdateAuth: Address<TAccountMetadataUpdateAuth>;
  tickLowerIndex: OpenPositionWithTokenExtensionsInstructionDataArgs["tickLowerIndex"];
  tickUpperIndex: OpenPositionWithTokenExtensionsInstructionDataArgs["tickUpperIndex"];
  withTokenMetadataExtension: OpenPositionWithTokenExtensionsInstructionDataArgs["withTokenMetadataExtension"];
};

export function getOpenPositionWithTokenExtensionsInstruction<
  TAccountFunder extends string,
  TAccountOwner extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountWhirlpool extends string,
  TAccountToken2022Program extends string,
  TAccountSystemProgram extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountMetadataUpdateAuth extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: OpenPositionWithTokenExtensionsInput<
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataUpdateAuth
  >,
  config?: { programAddress?: TProgramAddress },
): OpenPositionWithTokenExtensionsInstruction<
  TProgramAddress,
  TAccountFunder,
  TAccountOwner,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountWhirlpool,
  TAccountToken2022Program,
  TAccountSystemProgram,
  TAccountAssociatedTokenProgram,
  TAccountMetadataUpdateAuth
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionMint: { value: input.positionMint ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    metadataUpdateAuth: {
      value: input.metadataUpdateAuth ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.token2022Program),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.metadataUpdateAuth),
    ],
    programAddress,
    data: getOpenPositionWithTokenExtensionsInstructionDataEncoder().encode(
      args as OpenPositionWithTokenExtensionsInstructionDataArgs,
    ),
  } as OpenPositionWithTokenExtensionsInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountOwner,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountWhirlpool,
    TAccountToken2022Program,
    TAccountSystemProgram,
    TAccountAssociatedTokenProgram,
    TAccountMetadataUpdateAuth
  >;

  return instruction;
}

export type ParsedOpenPositionWithTokenExtensionsInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    funder: TAccountMetas[0];
    owner: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    whirlpool: TAccountMetas[5];
    token2022Program: TAccountMetas[6];
    systemProgram: TAccountMetas[7];
    associatedTokenProgram: TAccountMetas[8];
    metadataUpdateAuth: TAccountMetas[9];
  };
  data: OpenPositionWithTokenExtensionsInstructionData;
};

export function parseOpenPositionWithTokenExtensionsInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedOpenPositionWithTokenExtensionsInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      funder: getNextAccount(),
      owner: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      whirlpool: getNextAccount(),
      token2022Program: getNextAccount(),
      systemProgram: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      metadataUpdateAuth: getNextAccount(),
    },
    data: getOpenPositionWithTokenExtensionsInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
