/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const RESET_POSITION_RANGE_DISCRIMINATOR = new Uint8Array([
  164, 123, 180, 141, 194, 100, 160, 175,
]);

export function getResetPositionRangeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RESET_POSITION_RANGE_DISCRIMINATOR,
  );
}

export type ResetPositionRangeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountFunder extends string | IAccountMeta<string> = string,
  TAccountPositionAuthority extends string | IAccountMeta<string> = string,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountPosition extends string | IAccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = "11111111111111111111111111111111",
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            IAccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            IAccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountWhirlpool extends string
        ? ReadonlyAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountPosition extends string
        ? WritableAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionTokenAccount extends string
        ? ReadonlyAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResetPositionRangeInstructionData = {
  discriminator: ReadonlyUint8Array;
  newTickLowerIndex: number;
  newTickUpperIndex: number;
};

export type ResetPositionRangeInstructionDataArgs = {
  newTickLowerIndex: number;
  newTickUpperIndex: number;
};

export function getResetPositionRangeInstructionDataEncoder(): Encoder<ResetPositionRangeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["newTickLowerIndex", getI32Encoder()],
      ["newTickUpperIndex", getI32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: RESET_POSITION_RANGE_DISCRIMINATOR,
    }),
  );
}

export function getResetPositionRangeInstructionDataDecoder(): Decoder<ResetPositionRangeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["newTickLowerIndex", getI32Decoder()],
    ["newTickUpperIndex", getI32Decoder()],
  ]);
}

export function getResetPositionRangeInstructionDataCodec(): Codec<
  ResetPositionRangeInstructionDataArgs,
  ResetPositionRangeInstructionData
> {
  return combineCodec(
    getResetPositionRangeInstructionDataEncoder(),
    getResetPositionRangeInstructionDataDecoder(),
  );
}

export type ResetPositionRangeInput<
  TAccountFunder extends string = string,
  TAccountPositionAuthority extends string = string,
  TAccountWhirlpool extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  funder: TransactionSigner<TAccountFunder>;
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  whirlpool: Address<TAccountWhirlpool>;
  position: Address<TAccountPosition>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  systemProgram?: Address<TAccountSystemProgram>;
  newTickLowerIndex: ResetPositionRangeInstructionDataArgs["newTickLowerIndex"];
  newTickUpperIndex: ResetPositionRangeInstructionDataArgs["newTickUpperIndex"];
};

export function getResetPositionRangeInstruction<
  TAccountFunder extends string,
  TAccountPositionAuthority extends string,
  TAccountWhirlpool extends string,
  TAccountPosition extends string,
  TAccountPositionTokenAccount extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: ResetPositionRangeInput<
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountWhirlpool,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): ResetPositionRangeInstruction<
  TProgramAddress,
  TAccountFunder,
  TAccountPositionAuthority,
  TAccountWhirlpool,
  TAccountPosition,
  TAccountPositionTokenAccount,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    funder: { value: input.funder ?? null, isWritable: true },
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    whirlpool: { value: input.whirlpool ?? null, isWritable: false },
    position: { value: input.position ?? null, isWritable: true },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      "11111111111111111111111111111111" as Address<"11111111111111111111111111111111">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResetPositionRangeInstructionDataEncoder().encode(
      args as ResetPositionRangeInstructionDataArgs,
    ),
  } as ResetPositionRangeInstruction<
    TProgramAddress,
    TAccountFunder,
    TAccountPositionAuthority,
    TAccountWhirlpool,
    TAccountPosition,
    TAccountPositionTokenAccount,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResetPositionRangeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    funder: TAccountMetas[0];
    positionAuthority: TAccountMetas[1];
    whirlpool: TAccountMetas[2];
    position: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: ResetPositionRangeInstructionData;
};

export function parseResetPositionRangeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedResetPositionRangeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      funder: getNextAccount(),
      positionAuthority: getNextAccount(),
      whirlpool: getNextAccount(),
      position: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResetPositionRangeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
