/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const SET_CONFIG_EXTENSION_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  44, 94, 241, 116, 24, 188, 60, 143,
]);

export function getSetConfigExtensionAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_CONFIG_EXTENSION_AUTHORITY_DISCRIMINATOR,
  );
}

export type SetConfigExtensionAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountWhirlpoolsConfigExtension extends
    | string
    | AccountMeta<string> = string,
  TAccountConfigExtensionAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountNewConfigExtensionAuthority extends
    | string
    | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountWhirlpoolsConfigExtension extends string
        ? WritableAccount<TAccountWhirlpoolsConfigExtension>
        : TAccountWhirlpoolsConfigExtension,
      TAccountConfigExtensionAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigExtensionAuthority> &
            AccountSignerMeta<TAccountConfigExtensionAuthority>
        : TAccountConfigExtensionAuthority,
      TAccountNewConfigExtensionAuthority extends string
        ? ReadonlyAccount<TAccountNewConfigExtensionAuthority>
        : TAccountNewConfigExtensionAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetConfigExtensionAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type SetConfigExtensionAuthorityInstructionDataArgs = {};

export function getSetConfigExtensionAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetConfigExtensionAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: SET_CONFIG_EXTENSION_AUTHORITY_DISCRIMINATOR,
    }),
  );
}

export function getSetConfigExtensionAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetConfigExtensionAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetConfigExtensionAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetConfigExtensionAuthorityInstructionDataArgs,
  SetConfigExtensionAuthorityInstructionData
> {
  return combineCodec(
    getSetConfigExtensionAuthorityInstructionDataEncoder(),
    getSetConfigExtensionAuthorityInstructionDataDecoder(),
  );
}

export type SetConfigExtensionAuthorityInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpoolsConfigExtension extends string = string,
  TAccountConfigExtensionAuthority extends string = string,
  TAccountNewConfigExtensionAuthority extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
  configExtensionAuthority: TransactionSigner<TAccountConfigExtensionAuthority>;
  newConfigExtensionAuthority: Address<TAccountNewConfigExtensionAuthority>;
};

export function getSetConfigExtensionAuthorityInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpoolsConfigExtension extends string,
  TAccountConfigExtensionAuthority extends string,
  TAccountNewConfigExtensionAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetConfigExtensionAuthorityInput<
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority,
    TAccountNewConfigExtensionAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetConfigExtensionAuthorityInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountWhirlpoolsConfigExtension,
  TAccountConfigExtensionAuthority,
  TAccountNewConfigExtensionAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpoolsConfigExtension: {
      value: input.whirlpoolsConfigExtension ?? null,
      isWritable: true,
    },
    configExtensionAuthority: {
      value: input.configExtensionAuthority ?? null,
      isWritable: false,
    },
    newConfigExtensionAuthority: {
      value: input.newConfigExtensionAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpoolsConfigExtension),
      getAccountMeta(accounts.configExtensionAuthority),
      getAccountMeta(accounts.newConfigExtensionAuthority),
    ],
    data: getSetConfigExtensionAuthorityInstructionDataEncoder().encode({}),
    programAddress,
  } as SetConfigExtensionAuthorityInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority,
    TAccountNewConfigExtensionAuthority
  >);
}

export type ParsedSetConfigExtensionAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    whirlpoolsConfigExtension: TAccountMetas[1];
    configExtensionAuthority: TAccountMetas[2];
    newConfigExtensionAuthority: TAccountMetas[3];
  };
  data: SetConfigExtensionAuthorityInstructionData;
};

export function parseSetConfigExtensionAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetConfigExtensionAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      whirlpoolsConfigExtension: getNextAccount(),
      configExtensionAuthority: getNextAccount(),
      newConfigExtensionAuthority: getNextAccount(),
    },
    data: getSetConfigExtensionAuthorityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
