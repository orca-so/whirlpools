/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getConfigFeatureFlagDecoder,
  getConfigFeatureFlagEncoder,
  type ConfigFeatureFlag,
  type ConfigFeatureFlagArgs,
} from "../types";

export const SET_CONFIG_FEATURE_FLAG_DISCRIMINATOR = new Uint8Array([
  71, 173, 228, 18, 67, 247, 210, 57,
]);

export function getSetConfigFeatureFlagDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_CONFIG_FEATURE_FLAG_DISCRIMINATOR,
  );
}

export type SetConfigFeatureFlagInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? WritableAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetConfigFeatureFlagInstructionData = {
  discriminator: ReadonlyUint8Array;
  featureFlag: ConfigFeatureFlag;
};

export type SetConfigFeatureFlagInstructionDataArgs = {
  featureFlag: ConfigFeatureFlagArgs;
};

export function getSetConfigFeatureFlagInstructionDataEncoder(): FixedSizeEncoder<SetConfigFeatureFlagInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["featureFlag", getConfigFeatureFlagEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_CONFIG_FEATURE_FLAG_DISCRIMINATOR,
    }),
  );
}

export function getSetConfigFeatureFlagInstructionDataDecoder(): FixedSizeDecoder<SetConfigFeatureFlagInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["featureFlag", getConfigFeatureFlagDecoder()],
  ]);
}

export function getSetConfigFeatureFlagInstructionDataCodec(): FixedSizeCodec<
  SetConfigFeatureFlagInstructionDataArgs,
  SetConfigFeatureFlagInstructionData
> {
  return combineCodec(
    getSetConfigFeatureFlagInstructionDataEncoder(),
    getSetConfigFeatureFlagInstructionDataDecoder(),
  );
}

export type SetConfigFeatureFlagInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  featureFlag: SetConfigFeatureFlagInstructionDataArgs["featureFlag"];
};

export function getSetConfigFeatureFlagInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetConfigFeatureFlagInput<TAccountWhirlpoolsConfig, TAccountAuthority>,
  config?: { programAddress?: TProgramAddress },
): SetConfigFeatureFlagInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: true,
    },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.authority),
    ],
    data: getSetConfigFeatureFlagInstructionDataEncoder().encode(
      args as SetConfigFeatureFlagInstructionDataArgs,
    ),
    programAddress,
  } as SetConfigFeatureFlagInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountAuthority
  >);
}

export type ParsedSetConfigFeatureFlagInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: SetConfigFeatureFlagInstructionData;
};

export function parseSetConfigFeatureFlagInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetConfigFeatureFlagInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      authority: getNextAccount(),
    },
    data: getSetConfigFeatureFlagInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
