/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const SET_DEFAULT_BASE_FEE_RATE_DISCRIMINATOR = new Uint8Array([
  229, 66, 84, 251, 164, 134, 183, 7,
]);

export function getSetDefaultBaseFeeRateDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_DEFAULT_BASE_FEE_RATE_DISCRIMINATOR,
  );
}

export type SetDefaultBaseFeeRateInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountAdaptiveFeeTier extends string | IAccountMeta<string> = string,
  TAccountFeeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountAdaptiveFeeTier extends string
        ? WritableAccount<TAccountAdaptiveFeeTier>
        : TAccountAdaptiveFeeTier,
      TAccountFeeAuthority extends string
        ? ReadonlySignerAccount<TAccountFeeAuthority> &
            IAccountSignerMeta<TAccountFeeAuthority>
        : TAccountFeeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetDefaultBaseFeeRateInstructionData = {
  discriminator: ReadonlyUint8Array;
  defaultBaseFeeRate: number;
};

export type SetDefaultBaseFeeRateInstructionDataArgs = {
  defaultBaseFeeRate: number;
};

export function getSetDefaultBaseFeeRateInstructionDataEncoder(): Encoder<SetDefaultBaseFeeRateInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["defaultBaseFeeRate", getU16Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_DEFAULT_BASE_FEE_RATE_DISCRIMINATOR,
    }),
  );
}

export function getSetDefaultBaseFeeRateInstructionDataDecoder(): Decoder<SetDefaultBaseFeeRateInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["defaultBaseFeeRate", getU16Decoder()],
  ]);
}

export function getSetDefaultBaseFeeRateInstructionDataCodec(): Codec<
  SetDefaultBaseFeeRateInstructionDataArgs,
  SetDefaultBaseFeeRateInstructionData
> {
  return combineCodec(
    getSetDefaultBaseFeeRateInstructionDataEncoder(),
    getSetDefaultBaseFeeRateInstructionDataDecoder(),
  );
}

export type SetDefaultBaseFeeRateInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountAdaptiveFeeTier extends string = string,
  TAccountFeeAuthority extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  adaptiveFeeTier: Address<TAccountAdaptiveFeeTier>;
  feeAuthority: TransactionSigner<TAccountFeeAuthority>;
  defaultBaseFeeRate: SetDefaultBaseFeeRateInstructionDataArgs["defaultBaseFeeRate"];
};

export function getSetDefaultBaseFeeRateInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountAdaptiveFeeTier extends string,
  TAccountFeeAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetDefaultBaseFeeRateInput<
    TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier,
    TAccountFeeAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetDefaultBaseFeeRateInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountAdaptiveFeeTier,
  TAccountFeeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    adaptiveFeeTier: { value: input.adaptiveFeeTier ?? null, isWritable: true },
    feeAuthority: { value: input.feeAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.adaptiveFeeTier),
      getAccountMeta(accounts.feeAuthority),
    ],
    programAddress,
    data: getSetDefaultBaseFeeRateInstructionDataEncoder().encode(
      args as SetDefaultBaseFeeRateInstructionDataArgs,
    ),
  } as SetDefaultBaseFeeRateInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountAdaptiveFeeTier,
    TAccountFeeAuthority
  >;

  return instruction;
}

export type ParsedSetDefaultBaseFeeRateInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    adaptiveFeeTier: TAccountMetas[1];
    feeAuthority: TAccountMetas[2];
  };
  data: SetDefaultBaseFeeRateInstructionData;
};

export function parseSetDefaultBaseFeeRateInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedSetDefaultBaseFeeRateInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      adaptiveFeeTier: getNextAccount(),
      feeAuthority: getNextAccount(),
    },
    data: getSetDefaultBaseFeeRateInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
