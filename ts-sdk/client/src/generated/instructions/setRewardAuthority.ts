/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const SET_REWARD_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  34, 39, 183, 252, 83, 28, 85, 127,
]);

export function getSetRewardAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_REWARD_AUTHORITY_DISCRIMINATOR,
  );
}

export type SetRewardAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | AccountMeta<string> = string,
  TAccountRewardAuthority extends string | AccountMeta<string> = string,
  TAccountNewRewardAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountRewardAuthority extends string
        ? ReadonlySignerAccount<TAccountRewardAuthority> &
            AccountSignerMeta<TAccountRewardAuthority>
        : TAccountRewardAuthority,
      TAccountNewRewardAuthority extends string
        ? ReadonlyAccount<TAccountNewRewardAuthority>
        : TAccountNewRewardAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetRewardAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
};

export type SetRewardAuthorityInstructionDataArgs = { rewardIndex: number };

export function getSetRewardAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetRewardAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_REWARD_AUTHORITY_DISCRIMINATOR,
    }),
  );
}

export function getSetRewardAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetRewardAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
  ]);
}

export function getSetRewardAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetRewardAuthorityInstructionDataArgs,
  SetRewardAuthorityInstructionData
> {
  return combineCodec(
    getSetRewardAuthorityInstructionDataEncoder(),
    getSetRewardAuthorityInstructionDataDecoder(),
  );
}

export type SetRewardAuthorityInput<
  TAccountWhirlpool extends string = string,
  TAccountRewardAuthority extends string = string,
  TAccountNewRewardAuthority extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
  newRewardAuthority: Address<TAccountNewRewardAuthority>;
  rewardIndex: SetRewardAuthorityInstructionDataArgs["rewardIndex"];
};

export function getSetRewardAuthorityInstruction<
  TAccountWhirlpool extends string,
  TAccountRewardAuthority extends string,
  TAccountNewRewardAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetRewardAuthorityInput<
    TAccountWhirlpool,
    TAccountRewardAuthority,
    TAccountNewRewardAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetRewardAuthorityInstruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountRewardAuthority,
  TAccountNewRewardAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    newRewardAuthority: {
      value: input.newRewardAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.newRewardAuthority),
    ],
    data: getSetRewardAuthorityInstructionDataEncoder().encode(
      args as SetRewardAuthorityInstructionDataArgs,
    ),
    programAddress,
  } as SetRewardAuthorityInstruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountRewardAuthority,
    TAccountNewRewardAuthority
  >);
}

export type ParsedSetRewardAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    rewardAuthority: TAccountMetas[1];
    newRewardAuthority: TAccountMetas[2];
  };
  data: SetRewardAuthorityInstructionData;
};

export function parseSetRewardAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetRewardAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      rewardAuthority: getNextAccount(),
      newRewardAuthority: getNextAccount(),
    },
    data: getSetRewardAuthorityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
