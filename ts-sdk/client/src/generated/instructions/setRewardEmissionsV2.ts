/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const SET_REWARD_EMISSIONS_V2_DISCRIMINATOR = new Uint8Array([
  114, 228, 72, 32, 193, 48, 160, 102,
]);

export function getSetRewardEmissionsV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_REWARD_EMISSIONS_V2_DISCRIMINATOR,
  );
}

export type SetRewardEmissionsV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpool extends string | IAccountMeta<string> = string,
  TAccountRewardAuthority extends string | IAccountMeta<string> = string,
  TAccountRewardVault extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpool extends string
        ? WritableAccount<TAccountWhirlpool>
        : TAccountWhirlpool,
      TAccountRewardAuthority extends string
        ? ReadonlySignerAccount<TAccountRewardAuthority> &
            IAccountSignerMeta<TAccountRewardAuthority>
        : TAccountRewardAuthority,
      TAccountRewardVault extends string
        ? ReadonlyAccount<TAccountRewardVault>
        : TAccountRewardVault,
      ...TRemainingAccounts,
    ]
  >;

export type SetRewardEmissionsV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  rewardIndex: number;
  emissionsPerSecondX64: bigint;
};

export type SetRewardEmissionsV2InstructionDataArgs = {
  rewardIndex: number;
  emissionsPerSecondX64: number | bigint;
};

export function getSetRewardEmissionsV2InstructionDataEncoder(): Encoder<SetRewardEmissionsV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["rewardIndex", getU8Encoder()],
      ["emissionsPerSecondX64", getU128Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_REWARD_EMISSIONS_V2_DISCRIMINATOR,
    }),
  );
}

export function getSetRewardEmissionsV2InstructionDataDecoder(): Decoder<SetRewardEmissionsV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["rewardIndex", getU8Decoder()],
    ["emissionsPerSecondX64", getU128Decoder()],
  ]);
}

export function getSetRewardEmissionsV2InstructionDataCodec(): Codec<
  SetRewardEmissionsV2InstructionDataArgs,
  SetRewardEmissionsV2InstructionData
> {
  return combineCodec(
    getSetRewardEmissionsV2InstructionDataEncoder(),
    getSetRewardEmissionsV2InstructionDataDecoder(),
  );
}

export type SetRewardEmissionsV2Input<
  TAccountWhirlpool extends string = string,
  TAccountRewardAuthority extends string = string,
  TAccountRewardVault extends string = string,
> = {
  whirlpool: Address<TAccountWhirlpool>;
  rewardAuthority: TransactionSigner<TAccountRewardAuthority>;
  rewardVault: Address<TAccountRewardVault>;
  rewardIndex: SetRewardEmissionsV2InstructionDataArgs["rewardIndex"];
  emissionsPerSecondX64: SetRewardEmissionsV2InstructionDataArgs["emissionsPerSecondX64"];
};

export function getSetRewardEmissionsV2Instruction<
  TAccountWhirlpool extends string,
  TAccountRewardAuthority extends string,
  TAccountRewardVault extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetRewardEmissionsV2Input<
    TAccountWhirlpool,
    TAccountRewardAuthority,
    TAccountRewardVault
  >,
  config?: { programAddress?: TProgramAddress },
): SetRewardEmissionsV2Instruction<
  TProgramAddress,
  TAccountWhirlpool,
  TAccountRewardAuthority,
  TAccountRewardVault
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpool: { value: input.whirlpool ?? null, isWritable: true },
    rewardAuthority: {
      value: input.rewardAuthority ?? null,
      isWritable: false,
    },
    rewardVault: { value: input.rewardVault ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpool),
      getAccountMeta(accounts.rewardAuthority),
      getAccountMeta(accounts.rewardVault),
    ],
    programAddress,
    data: getSetRewardEmissionsV2InstructionDataEncoder().encode(
      args as SetRewardEmissionsV2InstructionDataArgs,
    ),
  } as SetRewardEmissionsV2Instruction<
    TProgramAddress,
    TAccountWhirlpool,
    TAccountRewardAuthority,
    TAccountRewardVault
  >;

  return instruction;
}

export type ParsedSetRewardEmissionsV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpool: TAccountMetas[0];
    rewardAuthority: TAccountMetas[1];
    rewardVault: TAccountMetas[2];
  };
  data: SetRewardEmissionsV2InstructionData;
};

export function parseSetRewardEmissionsV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedSetRewardEmissionsV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpool: getNextAccount(),
      rewardAuthority: getNextAccount(),
      rewardVault: getNextAccount(),
    },
    data: getSetRewardEmissionsV2InstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
