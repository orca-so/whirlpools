/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getTokenBadgeAttributeDecoder,
  getTokenBadgeAttributeEncoder,
  type TokenBadgeAttribute,
  type TokenBadgeAttributeArgs,
} from "../types";

export const SET_TOKEN_BADGE_ATTRIBUTE_DISCRIMINATOR = new Uint8Array([
  224, 88, 65, 33, 138, 147, 246, 137,
]);

export function getSetTokenBadgeAttributeDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_TOKEN_BADGE_ATTRIBUTE_DISCRIMINATOR,
  );
}

export type SetTokenBadgeAttributeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | AccountMeta<string> = string,
  TAccountWhirlpoolsConfigExtension extends
    | string
    | AccountMeta<string> = string,
  TAccountTokenBadgeAuthority extends string | AccountMeta<string> = string,
  TAccountTokenMint extends string | AccountMeta<string> = string,
  TAccountTokenBadge extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountWhirlpoolsConfigExtension extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfigExtension>
        : TAccountWhirlpoolsConfigExtension,
      TAccountTokenBadgeAuthority extends string
        ? ReadonlySignerAccount<TAccountTokenBadgeAuthority> &
            AccountSignerMeta<TAccountTokenBadgeAuthority>
        : TAccountTokenBadgeAuthority,
      TAccountTokenMint extends string
        ? ReadonlyAccount<TAccountTokenMint>
        : TAccountTokenMint,
      TAccountTokenBadge extends string
        ? WritableAccount<TAccountTokenBadge>
        : TAccountTokenBadge,
      ...TRemainingAccounts,
    ]
  >;

export type SetTokenBadgeAttributeInstructionData = {
  discriminator: ReadonlyUint8Array;
  attribute: TokenBadgeAttribute;
};

export type SetTokenBadgeAttributeInstructionDataArgs = {
  attribute: TokenBadgeAttributeArgs;
};

export function getSetTokenBadgeAttributeInstructionDataEncoder(): FixedSizeEncoder<SetTokenBadgeAttributeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["attribute", getTokenBadgeAttributeEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_TOKEN_BADGE_ATTRIBUTE_DISCRIMINATOR,
    }),
  );
}

export function getSetTokenBadgeAttributeInstructionDataDecoder(): FixedSizeDecoder<SetTokenBadgeAttributeInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["attribute", getTokenBadgeAttributeDecoder()],
  ]);
}

export function getSetTokenBadgeAttributeInstructionDataCodec(): FixedSizeCodec<
  SetTokenBadgeAttributeInstructionDataArgs,
  SetTokenBadgeAttributeInstructionData
> {
  return combineCodec(
    getSetTokenBadgeAttributeInstructionDataEncoder(),
    getSetTokenBadgeAttributeInstructionDataDecoder(),
  );
}

export type SetTokenBadgeAttributeInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpoolsConfigExtension extends string = string,
  TAccountTokenBadgeAuthority extends string = string,
  TAccountTokenMint extends string = string,
  TAccountTokenBadge extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
  tokenBadgeAuthority: TransactionSigner<TAccountTokenBadgeAuthority>;
  tokenMint: Address<TAccountTokenMint>;
  tokenBadge: Address<TAccountTokenBadge>;
  attribute: SetTokenBadgeAttributeInstructionDataArgs["attribute"];
};

export function getSetTokenBadgeAttributeInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpoolsConfigExtension extends string,
  TAccountTokenBadgeAuthority extends string,
  TAccountTokenMint extends string,
  TAccountTokenBadge extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetTokenBadgeAttributeInput<
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge
  >,
  config?: { programAddress?: TProgramAddress },
): SetTokenBadgeAttributeInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountWhirlpoolsConfigExtension,
  TAccountTokenBadgeAuthority,
  TAccountTokenMint,
  TAccountTokenBadge
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpoolsConfigExtension: {
      value: input.whirlpoolsConfigExtension ?? null,
      isWritable: false,
    },
    tokenBadgeAuthority: {
      value: input.tokenBadgeAuthority ?? null,
      isWritable: false,
    },
    tokenMint: { value: input.tokenMint ?? null, isWritable: false },
    tokenBadge: { value: input.tokenBadge ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpoolsConfigExtension),
      getAccountMeta(accounts.tokenBadgeAuthority),
      getAccountMeta(accounts.tokenMint),
      getAccountMeta(accounts.tokenBadge),
    ],
    data: getSetTokenBadgeAttributeInstructionDataEncoder().encode(
      args as SetTokenBadgeAttributeInstructionDataArgs,
    ),
    programAddress,
  } as SetTokenBadgeAttributeInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountTokenBadgeAuthority,
    TAccountTokenMint,
    TAccountTokenBadge
  >);
}

export type ParsedSetTokenBadgeAttributeInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    whirlpoolsConfigExtension: TAccountMetas[1];
    tokenBadgeAuthority: TAccountMetas[2];
    tokenMint: TAccountMetas[3];
    tokenBadge: TAccountMetas[4];
  };
  data: SetTokenBadgeAttributeInstructionData;
};

export function parseSetTokenBadgeAttributeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSetTokenBadgeAttributeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      whirlpoolsConfigExtension: getNextAccount(),
      tokenBadgeAuthority: getNextAccount(),
      tokenMint: getNextAccount(),
      tokenBadge: getNextAccount(),
    },
    data: getSetTokenBadgeAttributeInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
