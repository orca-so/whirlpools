/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";

export const SET_TOKEN_BADGE_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  207, 202, 4, 32, 205, 79, 13, 178,
]);

export function getSetTokenBadgeAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_TOKEN_BADGE_AUTHORITY_DISCRIMINATOR,
  );
}

export type SetTokenBadgeAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolsConfig extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolsConfigExtension extends
    | string
    | IAccountMeta<string> = string,
  TAccountConfigExtensionAuthority extends
    | string
    | IAccountMeta<string> = string,
  TAccountNewTokenBadgeAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpoolsConfig extends string
        ? ReadonlyAccount<TAccountWhirlpoolsConfig>
        : TAccountWhirlpoolsConfig,
      TAccountWhirlpoolsConfigExtension extends string
        ? WritableAccount<TAccountWhirlpoolsConfigExtension>
        : TAccountWhirlpoolsConfigExtension,
      TAccountConfigExtensionAuthority extends string
        ? ReadonlySignerAccount<TAccountConfigExtensionAuthority> &
            IAccountSignerMeta<TAccountConfigExtensionAuthority>
        : TAccountConfigExtensionAuthority,
      TAccountNewTokenBadgeAuthority extends string
        ? ReadonlyAccount<TAccountNewTokenBadgeAuthority>
        : TAccountNewTokenBadgeAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetTokenBadgeAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type SetTokenBadgeAuthorityInstructionDataArgs = {};

export function getSetTokenBadgeAuthorityInstructionDataEncoder(): Encoder<SetTokenBadgeAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: SET_TOKEN_BADGE_AUTHORITY_DISCRIMINATOR,
    }),
  );
}

export function getSetTokenBadgeAuthorityInstructionDataDecoder(): Decoder<SetTokenBadgeAuthorityInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getSetTokenBadgeAuthorityInstructionDataCodec(): Codec<
  SetTokenBadgeAuthorityInstructionDataArgs,
  SetTokenBadgeAuthorityInstructionData
> {
  return combineCodec(
    getSetTokenBadgeAuthorityInstructionDataEncoder(),
    getSetTokenBadgeAuthorityInstructionDataDecoder(),
  );
}

export type SetTokenBadgeAuthorityInput<
  TAccountWhirlpoolsConfig extends string = string,
  TAccountWhirlpoolsConfigExtension extends string = string,
  TAccountConfigExtensionAuthority extends string = string,
  TAccountNewTokenBadgeAuthority extends string = string,
> = {
  whirlpoolsConfig: Address<TAccountWhirlpoolsConfig>;
  whirlpoolsConfigExtension: Address<TAccountWhirlpoolsConfigExtension>;
  configExtensionAuthority: TransactionSigner<TAccountConfigExtensionAuthority>;
  newTokenBadgeAuthority: Address<TAccountNewTokenBadgeAuthority>;
};

export function getSetTokenBadgeAuthorityInstruction<
  TAccountWhirlpoolsConfig extends string,
  TAccountWhirlpoolsConfigExtension extends string,
  TAccountConfigExtensionAuthority extends string,
  TAccountNewTokenBadgeAuthority extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: SetTokenBadgeAuthorityInput<
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority,
    TAccountNewTokenBadgeAuthority
  >,
  config?: { programAddress?: TProgramAddress },
): SetTokenBadgeAuthorityInstruction<
  TProgramAddress,
  TAccountWhirlpoolsConfig,
  TAccountWhirlpoolsConfigExtension,
  TAccountConfigExtensionAuthority,
  TAccountNewTokenBadgeAuthority
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolsConfig: {
      value: input.whirlpoolsConfig ?? null,
      isWritable: false,
    },
    whirlpoolsConfigExtension: {
      value: input.whirlpoolsConfigExtension ?? null,
      isWritable: true,
    },
    configExtensionAuthority: {
      value: input.configExtensionAuthority ?? null,
      isWritable: false,
    },
    newTokenBadgeAuthority: {
      value: input.newTokenBadgeAuthority ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpoolsConfig),
      getAccountMeta(accounts.whirlpoolsConfigExtension),
      getAccountMeta(accounts.configExtensionAuthority),
      getAccountMeta(accounts.newTokenBadgeAuthority),
    ],
    programAddress,
    data: getSetTokenBadgeAuthorityInstructionDataEncoder().encode({}),
  } as SetTokenBadgeAuthorityInstruction<
    TProgramAddress,
    TAccountWhirlpoolsConfig,
    TAccountWhirlpoolsConfigExtension,
    TAccountConfigExtensionAuthority,
    TAccountNewTokenBadgeAuthority
  >;

  return instruction;
}

export type ParsedSetTokenBadgeAuthorityInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolsConfig: TAccountMetas[0];
    whirlpoolsConfigExtension: TAccountMetas[1];
    configExtensionAuthority: TAccountMetas[2];
    newTokenBadgeAuthority: TAccountMetas[3];
  };
  data: SetTokenBadgeAuthorityInstructionData;
};

export function parseSetTokenBadgeAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedSetTokenBadgeAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolsConfig: getNextAccount(),
      whirlpoolsConfigExtension: getNextAccount(),
      configExtensionAuthority: getNextAccount(),
      newTokenBadgeAuthority: getNextAccount(),
    },
    data: getSetTokenBadgeAuthorityInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
