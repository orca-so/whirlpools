/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from "../shared";

export const TRANSFER_LOCKED_POSITION_DISCRIMINATOR = new Uint8Array([
  179, 121, 229, 46, 67, 138, 194, 138,
]);

export function getTransferLockedPositionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSFER_LOCKED_POSITION_DISCRIMINATOR,
  );
}

export type TransferLockedPositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountPositionAuthority extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TAccountPosition extends string | AccountMeta<string> = string,
  TAccountPositionMint extends string | AccountMeta<string> = string,
  TAccountPositionTokenAccount extends string | AccountMeta<string> = string,
  TAccountDestinationTokenAccount extends string | AccountMeta<string> = string,
  TAccountLockConfig extends string | AccountMeta<string> = string,
  TAccountToken2022Program extends
    | string
    | AccountMeta<string> = "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPositionAuthority extends string
        ? ReadonlySignerAccount<TAccountPositionAuthority> &
            AccountSignerMeta<TAccountPositionAuthority>
        : TAccountPositionAuthority,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      TAccountPosition extends string
        ? ReadonlyAccount<TAccountPosition>
        : TAccountPosition,
      TAccountPositionMint extends string
        ? ReadonlyAccount<TAccountPositionMint>
        : TAccountPositionMint,
      TAccountPositionTokenAccount extends string
        ? WritableAccount<TAccountPositionTokenAccount>
        : TAccountPositionTokenAccount,
      TAccountDestinationTokenAccount extends string
        ? WritableAccount<TAccountDestinationTokenAccount>
        : TAccountDestinationTokenAccount,
      TAccountLockConfig extends string
        ? WritableAccount<TAccountLockConfig>
        : TAccountLockConfig,
      TAccountToken2022Program extends string
        ? ReadonlyAccount<TAccountToken2022Program>
        : TAccountToken2022Program,
      ...TRemainingAccounts,
    ]
  >;

export type TransferLockedPositionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type TransferLockedPositionInstructionDataArgs = {};

export function getTransferLockedPositionInstructionDataEncoder(): FixedSizeEncoder<TransferLockedPositionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: TRANSFER_LOCKED_POSITION_DISCRIMINATOR,
    }),
  );
}

export function getTransferLockedPositionInstructionDataDecoder(): FixedSizeDecoder<TransferLockedPositionInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTransferLockedPositionInstructionDataCodec(): FixedSizeCodec<
  TransferLockedPositionInstructionDataArgs,
  TransferLockedPositionInstructionData
> {
  return combineCodec(
    getTransferLockedPositionInstructionDataEncoder(),
    getTransferLockedPositionInstructionDataDecoder(),
  );
}

export type TransferLockedPositionAsyncInput<
  TAccountPositionAuthority extends string = string,
  TAccountReceiver extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountLockConfig extends string = string,
  TAccountToken2022Program extends string = string,
> = {
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  receiver: Address<TAccountReceiver>;
  position?: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  lockConfig: Address<TAccountLockConfig>;
  token2022Program?: Address<TAccountToken2022Program>;
};

export async function getTransferLockedPositionInstructionAsync<
  TAccountPositionAuthority extends string,
  TAccountReceiver extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountLockConfig extends string,
  TAccountToken2022Program extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: TransferLockedPositionAsyncInput<
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountLockConfig,
    TAccountToken2022Program
  >,
  config?: { programAddress?: TProgramAddress },
): Promise<
  TransferLockedPositionInstruction<
    TProgramAddress,
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountLockConfig,
    TAccountToken2022Program
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: false },
    positionMint: { value: input.positionMint ?? null, isWritable: false },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    lockConfig: { value: input.lockConfig ?? null, isWritable: true },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.position.value) {
    accounts.position.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([112, 111, 115, 105, 116, 105, 111, 110]),
        ),
        getAddressEncoder().encode(expectAddress(accounts.positionMint.value)),
      ],
    });
  }
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.lockConfig),
      getAccountMeta(accounts.token2022Program),
    ],
    data: getTransferLockedPositionInstructionDataEncoder().encode({}),
    programAddress,
  } as TransferLockedPositionInstruction<
    TProgramAddress,
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountLockConfig,
    TAccountToken2022Program
  >);
}

export type TransferLockedPositionInput<
  TAccountPositionAuthority extends string = string,
  TAccountReceiver extends string = string,
  TAccountPosition extends string = string,
  TAccountPositionMint extends string = string,
  TAccountPositionTokenAccount extends string = string,
  TAccountDestinationTokenAccount extends string = string,
  TAccountLockConfig extends string = string,
  TAccountToken2022Program extends string = string,
> = {
  positionAuthority: TransactionSigner<TAccountPositionAuthority>;
  receiver: Address<TAccountReceiver>;
  position: Address<TAccountPosition>;
  positionMint: Address<TAccountPositionMint>;
  positionTokenAccount: Address<TAccountPositionTokenAccount>;
  destinationTokenAccount: Address<TAccountDestinationTokenAccount>;
  lockConfig: Address<TAccountLockConfig>;
  token2022Program?: Address<TAccountToken2022Program>;
};

export function getTransferLockedPositionInstruction<
  TAccountPositionAuthority extends string,
  TAccountReceiver extends string,
  TAccountPosition extends string,
  TAccountPositionMint extends string,
  TAccountPositionTokenAccount extends string,
  TAccountDestinationTokenAccount extends string,
  TAccountLockConfig extends string,
  TAccountToken2022Program extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: TransferLockedPositionInput<
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountLockConfig,
    TAccountToken2022Program
  >,
  config?: { programAddress?: TProgramAddress },
): TransferLockedPositionInstruction<
  TProgramAddress,
  TAccountPositionAuthority,
  TAccountReceiver,
  TAccountPosition,
  TAccountPositionMint,
  TAccountPositionTokenAccount,
  TAccountDestinationTokenAccount,
  TAccountLockConfig,
  TAccountToken2022Program
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    positionAuthority: {
      value: input.positionAuthority ?? null,
      isWritable: false,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
    position: { value: input.position ?? null, isWritable: false },
    positionMint: { value: input.positionMint ?? null, isWritable: false },
    positionTokenAccount: {
      value: input.positionTokenAccount ?? null,
      isWritable: true,
    },
    destinationTokenAccount: {
      value: input.destinationTokenAccount ?? null,
      isWritable: true,
    },
    lockConfig: { value: input.lockConfig ?? null, isWritable: true },
    token2022Program: {
      value: input.token2022Program ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.token2022Program.value) {
    accounts.token2022Program.value =
      "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb" as Address<"TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb">;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.positionAuthority),
      getAccountMeta(accounts.receiver),
      getAccountMeta(accounts.position),
      getAccountMeta(accounts.positionMint),
      getAccountMeta(accounts.positionTokenAccount),
      getAccountMeta(accounts.destinationTokenAccount),
      getAccountMeta(accounts.lockConfig),
      getAccountMeta(accounts.token2022Program),
    ],
    data: getTransferLockedPositionInstructionDataEncoder().encode({}),
    programAddress,
  } as TransferLockedPositionInstruction<
    TProgramAddress,
    TAccountPositionAuthority,
    TAccountReceiver,
    TAccountPosition,
    TAccountPositionMint,
    TAccountPositionTokenAccount,
    TAccountDestinationTokenAccount,
    TAccountLockConfig,
    TAccountToken2022Program
  >);
}

export type ParsedTransferLockedPositionInstruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    positionAuthority: TAccountMetas[0];
    receiver: TAccountMetas[1];
    position: TAccountMetas[2];
    positionMint: TAccountMetas[3];
    positionTokenAccount: TAccountMetas[4];
    destinationTokenAccount: TAccountMetas[5];
    lockConfig: TAccountMetas[6];
    token2022Program: TAccountMetas[7];
  };
  data: TransferLockedPositionInstructionData;
};

export function parseTransferLockedPositionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedTransferLockedPositionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      positionAuthority: getNextAccount(),
      receiver: getNextAccount(),
      position: getNextAccount(),
      positionMint: getNextAccount(),
      positionTokenAccount: getNextAccount(),
      destinationTokenAccount: getNextAccount(),
      lockConfig: getNextAccount(),
      token2022Program: getNextAccount(),
    },
    data: getTransferLockedPositionInstructionDataDecoder().decode(
      instruction.data,
    ),
  };
}
