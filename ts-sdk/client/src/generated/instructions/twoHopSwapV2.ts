/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from "@solana/kit";
import { WHIRLPOOL_PROGRAM_ADDRESS } from "../programs";
import { getAccountMetaFactory, type ResolvedAccount } from "../shared";
import {
  getRemainingAccountsInfoDecoder,
  getRemainingAccountsInfoEncoder,
  type RemainingAccountsInfo,
  type RemainingAccountsInfoArgs,
} from "../types";

export const TWO_HOP_SWAP_V2_DISCRIMINATOR = new Uint8Array([
  186, 143, 209, 29, 254, 2, 194, 117,
]);

export function getTwoHopSwapV2DiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TWO_HOP_SWAP_V2_DISCRIMINATOR,
  );
}

export type TwoHopSwapV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountWhirlpoolOne extends string | IAccountMeta<string> = string,
  TAccountWhirlpoolTwo extends string | IAccountMeta<string> = string,
  TAccountTokenMintInput extends string | IAccountMeta<string> = string,
  TAccountTokenMintIntermediate extends string | IAccountMeta<string> = string,
  TAccountTokenMintOutput extends string | IAccountMeta<string> = string,
  TAccountTokenProgramInput extends string | IAccountMeta<string> = string,
  TAccountTokenProgramIntermediate extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenProgramOutput extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountInput extends string | IAccountMeta<string> = string,
  TAccountTokenVaultOneInput extends string | IAccountMeta<string> = string,
  TAccountTokenVaultOneIntermediate extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenVaultTwoIntermediate extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenVaultTwoOutput extends string | IAccountMeta<string> = string,
  TAccountTokenOwnerAccountOutput extends
    | string
    | IAccountMeta<string> = string,
  TAccountTokenAuthority extends string | IAccountMeta<string> = string,
  TAccountTickArrayOne0 extends string | IAccountMeta<string> = string,
  TAccountTickArrayOne1 extends string | IAccountMeta<string> = string,
  TAccountTickArrayOne2 extends string | IAccountMeta<string> = string,
  TAccountTickArrayTwo0 extends string | IAccountMeta<string> = string,
  TAccountTickArrayTwo1 extends string | IAccountMeta<string> = string,
  TAccountTickArrayTwo2 extends string | IAccountMeta<string> = string,
  TAccountOracleOne extends string | IAccountMeta<string> = string,
  TAccountOracleTwo extends string | IAccountMeta<string> = string,
  TAccountMemoProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWhirlpoolOne extends string
        ? WritableAccount<TAccountWhirlpoolOne>
        : TAccountWhirlpoolOne,
      TAccountWhirlpoolTwo extends string
        ? WritableAccount<TAccountWhirlpoolTwo>
        : TAccountWhirlpoolTwo,
      TAccountTokenMintInput extends string
        ? ReadonlyAccount<TAccountTokenMintInput>
        : TAccountTokenMintInput,
      TAccountTokenMintIntermediate extends string
        ? ReadonlyAccount<TAccountTokenMintIntermediate>
        : TAccountTokenMintIntermediate,
      TAccountTokenMintOutput extends string
        ? ReadonlyAccount<TAccountTokenMintOutput>
        : TAccountTokenMintOutput,
      TAccountTokenProgramInput extends string
        ? ReadonlyAccount<TAccountTokenProgramInput>
        : TAccountTokenProgramInput,
      TAccountTokenProgramIntermediate extends string
        ? ReadonlyAccount<TAccountTokenProgramIntermediate>
        : TAccountTokenProgramIntermediate,
      TAccountTokenProgramOutput extends string
        ? ReadonlyAccount<TAccountTokenProgramOutput>
        : TAccountTokenProgramOutput,
      TAccountTokenOwnerAccountInput extends string
        ? WritableAccount<TAccountTokenOwnerAccountInput>
        : TAccountTokenOwnerAccountInput,
      TAccountTokenVaultOneInput extends string
        ? WritableAccount<TAccountTokenVaultOneInput>
        : TAccountTokenVaultOneInput,
      TAccountTokenVaultOneIntermediate extends string
        ? WritableAccount<TAccountTokenVaultOneIntermediate>
        : TAccountTokenVaultOneIntermediate,
      TAccountTokenVaultTwoIntermediate extends string
        ? WritableAccount<TAccountTokenVaultTwoIntermediate>
        : TAccountTokenVaultTwoIntermediate,
      TAccountTokenVaultTwoOutput extends string
        ? WritableAccount<TAccountTokenVaultTwoOutput>
        : TAccountTokenVaultTwoOutput,
      TAccountTokenOwnerAccountOutput extends string
        ? WritableAccount<TAccountTokenOwnerAccountOutput>
        : TAccountTokenOwnerAccountOutput,
      TAccountTokenAuthority extends string
        ? ReadonlySignerAccount<TAccountTokenAuthority> &
            IAccountSignerMeta<TAccountTokenAuthority>
        : TAccountTokenAuthority,
      TAccountTickArrayOne0 extends string
        ? WritableAccount<TAccountTickArrayOne0>
        : TAccountTickArrayOne0,
      TAccountTickArrayOne1 extends string
        ? WritableAccount<TAccountTickArrayOne1>
        : TAccountTickArrayOne1,
      TAccountTickArrayOne2 extends string
        ? WritableAccount<TAccountTickArrayOne2>
        : TAccountTickArrayOne2,
      TAccountTickArrayTwo0 extends string
        ? WritableAccount<TAccountTickArrayTwo0>
        : TAccountTickArrayTwo0,
      TAccountTickArrayTwo1 extends string
        ? WritableAccount<TAccountTickArrayTwo1>
        : TAccountTickArrayTwo1,
      TAccountTickArrayTwo2 extends string
        ? WritableAccount<TAccountTickArrayTwo2>
        : TAccountTickArrayTwo2,
      TAccountOracleOne extends string
        ? WritableAccount<TAccountOracleOne>
        : TAccountOracleOne,
      TAccountOracleTwo extends string
        ? WritableAccount<TAccountOracleTwo>
        : TAccountOracleTwo,
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TwoHopSwapV2InstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
  otherAmountThreshold: bigint;
  amountSpecifiedIsInput: boolean;
  aToBOne: boolean;
  aToBTwo: boolean;
  sqrtPriceLimitOne: bigint;
  sqrtPriceLimitTwo: bigint;
  remainingAccountsInfo: Option<RemainingAccountsInfo>;
};

export type TwoHopSwapV2InstructionDataArgs = {
  amount: number | bigint;
  otherAmountThreshold: number | bigint;
  amountSpecifiedIsInput: boolean;
  aToBOne: boolean;
  aToBTwo: boolean;
  sqrtPriceLimitOne: number | bigint;
  sqrtPriceLimitTwo: number | bigint;
  remainingAccountsInfo: OptionOrNullable<RemainingAccountsInfoArgs>;
};

export function getTwoHopSwapV2InstructionDataEncoder(): Encoder<TwoHopSwapV2InstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ["discriminator", fixEncoderSize(getBytesEncoder(), 8)],
      ["amount", getU64Encoder()],
      ["otherAmountThreshold", getU64Encoder()],
      ["amountSpecifiedIsInput", getBooleanEncoder()],
      ["aToBOne", getBooleanEncoder()],
      ["aToBTwo", getBooleanEncoder()],
      ["sqrtPriceLimitOne", getU128Encoder()],
      ["sqrtPriceLimitTwo", getU128Encoder()],
      [
        "remainingAccountsInfo",
        getOptionEncoder(getRemainingAccountsInfoEncoder()),
      ],
    ]),
    (value) => ({ ...value, discriminator: TWO_HOP_SWAP_V2_DISCRIMINATOR }),
  );
}

export function getTwoHopSwapV2InstructionDataDecoder(): Decoder<TwoHopSwapV2InstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
    ["amount", getU64Decoder()],
    ["otherAmountThreshold", getU64Decoder()],
    ["amountSpecifiedIsInput", getBooleanDecoder()],
    ["aToBOne", getBooleanDecoder()],
    ["aToBTwo", getBooleanDecoder()],
    ["sqrtPriceLimitOne", getU128Decoder()],
    ["sqrtPriceLimitTwo", getU128Decoder()],
    [
      "remainingAccountsInfo",
      getOptionDecoder(getRemainingAccountsInfoDecoder()),
    ],
  ]);
}

export function getTwoHopSwapV2InstructionDataCodec(): Codec<
  TwoHopSwapV2InstructionDataArgs,
  TwoHopSwapV2InstructionData
> {
  return combineCodec(
    getTwoHopSwapV2InstructionDataEncoder(),
    getTwoHopSwapV2InstructionDataDecoder(),
  );
}

export type TwoHopSwapV2Input<
  TAccountWhirlpoolOne extends string = string,
  TAccountWhirlpoolTwo extends string = string,
  TAccountTokenMintInput extends string = string,
  TAccountTokenMintIntermediate extends string = string,
  TAccountTokenMintOutput extends string = string,
  TAccountTokenProgramInput extends string = string,
  TAccountTokenProgramIntermediate extends string = string,
  TAccountTokenProgramOutput extends string = string,
  TAccountTokenOwnerAccountInput extends string = string,
  TAccountTokenVaultOneInput extends string = string,
  TAccountTokenVaultOneIntermediate extends string = string,
  TAccountTokenVaultTwoIntermediate extends string = string,
  TAccountTokenVaultTwoOutput extends string = string,
  TAccountTokenOwnerAccountOutput extends string = string,
  TAccountTokenAuthority extends string = string,
  TAccountTickArrayOne0 extends string = string,
  TAccountTickArrayOne1 extends string = string,
  TAccountTickArrayOne2 extends string = string,
  TAccountTickArrayTwo0 extends string = string,
  TAccountTickArrayTwo1 extends string = string,
  TAccountTickArrayTwo2 extends string = string,
  TAccountOracleOne extends string = string,
  TAccountOracleTwo extends string = string,
  TAccountMemoProgram extends string = string,
> = {
  whirlpoolOne: Address<TAccountWhirlpoolOne>;
  whirlpoolTwo: Address<TAccountWhirlpoolTwo>;
  tokenMintInput: Address<TAccountTokenMintInput>;
  tokenMintIntermediate: Address<TAccountTokenMintIntermediate>;
  tokenMintOutput: Address<TAccountTokenMintOutput>;
  tokenProgramInput: Address<TAccountTokenProgramInput>;
  tokenProgramIntermediate: Address<TAccountTokenProgramIntermediate>;
  tokenProgramOutput: Address<TAccountTokenProgramOutput>;
  tokenOwnerAccountInput: Address<TAccountTokenOwnerAccountInput>;
  tokenVaultOneInput: Address<TAccountTokenVaultOneInput>;
  tokenVaultOneIntermediate: Address<TAccountTokenVaultOneIntermediate>;
  tokenVaultTwoIntermediate: Address<TAccountTokenVaultTwoIntermediate>;
  tokenVaultTwoOutput: Address<TAccountTokenVaultTwoOutput>;
  tokenOwnerAccountOutput: Address<TAccountTokenOwnerAccountOutput>;
  tokenAuthority: TransactionSigner<TAccountTokenAuthority>;
  tickArrayOne0: Address<TAccountTickArrayOne0>;
  tickArrayOne1: Address<TAccountTickArrayOne1>;
  tickArrayOne2: Address<TAccountTickArrayOne2>;
  tickArrayTwo0: Address<TAccountTickArrayTwo0>;
  tickArrayTwo1: Address<TAccountTickArrayTwo1>;
  tickArrayTwo2: Address<TAccountTickArrayTwo2>;
  oracleOne: Address<TAccountOracleOne>;
  oracleTwo: Address<TAccountOracleTwo>;
  memoProgram: Address<TAccountMemoProgram>;
  amount: TwoHopSwapV2InstructionDataArgs["amount"];
  otherAmountThreshold: TwoHopSwapV2InstructionDataArgs["otherAmountThreshold"];
  amountSpecifiedIsInput: TwoHopSwapV2InstructionDataArgs["amountSpecifiedIsInput"];
  aToBOne: TwoHopSwapV2InstructionDataArgs["aToBOne"];
  aToBTwo: TwoHopSwapV2InstructionDataArgs["aToBTwo"];
  sqrtPriceLimitOne: TwoHopSwapV2InstructionDataArgs["sqrtPriceLimitOne"];
  sqrtPriceLimitTwo: TwoHopSwapV2InstructionDataArgs["sqrtPriceLimitTwo"];
  remainingAccountsInfo: TwoHopSwapV2InstructionDataArgs["remainingAccountsInfo"];
};

export function getTwoHopSwapV2Instruction<
  TAccountWhirlpoolOne extends string,
  TAccountWhirlpoolTwo extends string,
  TAccountTokenMintInput extends string,
  TAccountTokenMintIntermediate extends string,
  TAccountTokenMintOutput extends string,
  TAccountTokenProgramInput extends string,
  TAccountTokenProgramIntermediate extends string,
  TAccountTokenProgramOutput extends string,
  TAccountTokenOwnerAccountInput extends string,
  TAccountTokenVaultOneInput extends string,
  TAccountTokenVaultOneIntermediate extends string,
  TAccountTokenVaultTwoIntermediate extends string,
  TAccountTokenVaultTwoOutput extends string,
  TAccountTokenOwnerAccountOutput extends string,
  TAccountTokenAuthority extends string,
  TAccountTickArrayOne0 extends string,
  TAccountTickArrayOne1 extends string,
  TAccountTickArrayOne2 extends string,
  TAccountTickArrayTwo0 extends string,
  TAccountTickArrayTwo1 extends string,
  TAccountTickArrayTwo2 extends string,
  TAccountOracleOne extends string,
  TAccountOracleTwo extends string,
  TAccountMemoProgram extends string,
  TProgramAddress extends Address = typeof WHIRLPOOL_PROGRAM_ADDRESS,
>(
  input: TwoHopSwapV2Input<
    TAccountWhirlpoolOne,
    TAccountWhirlpoolTwo,
    TAccountTokenMintInput,
    TAccountTokenMintIntermediate,
    TAccountTokenMintOutput,
    TAccountTokenProgramInput,
    TAccountTokenProgramIntermediate,
    TAccountTokenProgramOutput,
    TAccountTokenOwnerAccountInput,
    TAccountTokenVaultOneInput,
    TAccountTokenVaultOneIntermediate,
    TAccountTokenVaultTwoIntermediate,
    TAccountTokenVaultTwoOutput,
    TAccountTokenOwnerAccountOutput,
    TAccountTokenAuthority,
    TAccountTickArrayOne0,
    TAccountTickArrayOne1,
    TAccountTickArrayOne2,
    TAccountTickArrayTwo0,
    TAccountTickArrayTwo1,
    TAccountTickArrayTwo2,
    TAccountOracleOne,
    TAccountOracleTwo,
    TAccountMemoProgram
  >,
  config?: { programAddress?: TProgramAddress },
): TwoHopSwapV2Instruction<
  TProgramAddress,
  TAccountWhirlpoolOne,
  TAccountWhirlpoolTwo,
  TAccountTokenMintInput,
  TAccountTokenMintIntermediate,
  TAccountTokenMintOutput,
  TAccountTokenProgramInput,
  TAccountTokenProgramIntermediate,
  TAccountTokenProgramOutput,
  TAccountTokenOwnerAccountInput,
  TAccountTokenVaultOneInput,
  TAccountTokenVaultOneIntermediate,
  TAccountTokenVaultTwoIntermediate,
  TAccountTokenVaultTwoOutput,
  TAccountTokenOwnerAccountOutput,
  TAccountTokenAuthority,
  TAccountTickArrayOne0,
  TAccountTickArrayOne1,
  TAccountTickArrayOne2,
  TAccountTickArrayTwo0,
  TAccountTickArrayTwo1,
  TAccountTickArrayTwo2,
  TAccountOracleOne,
  TAccountOracleTwo,
  TAccountMemoProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? WHIRLPOOL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    whirlpoolOne: { value: input.whirlpoolOne ?? null, isWritable: true },
    whirlpoolTwo: { value: input.whirlpoolTwo ?? null, isWritable: true },
    tokenMintInput: { value: input.tokenMintInput ?? null, isWritable: false },
    tokenMintIntermediate: {
      value: input.tokenMintIntermediate ?? null,
      isWritable: false,
    },
    tokenMintOutput: {
      value: input.tokenMintOutput ?? null,
      isWritable: false,
    },
    tokenProgramInput: {
      value: input.tokenProgramInput ?? null,
      isWritable: false,
    },
    tokenProgramIntermediate: {
      value: input.tokenProgramIntermediate ?? null,
      isWritable: false,
    },
    tokenProgramOutput: {
      value: input.tokenProgramOutput ?? null,
      isWritable: false,
    },
    tokenOwnerAccountInput: {
      value: input.tokenOwnerAccountInput ?? null,
      isWritable: true,
    },
    tokenVaultOneInput: {
      value: input.tokenVaultOneInput ?? null,
      isWritable: true,
    },
    tokenVaultOneIntermediate: {
      value: input.tokenVaultOneIntermediate ?? null,
      isWritable: true,
    },
    tokenVaultTwoIntermediate: {
      value: input.tokenVaultTwoIntermediate ?? null,
      isWritable: true,
    },
    tokenVaultTwoOutput: {
      value: input.tokenVaultTwoOutput ?? null,
      isWritable: true,
    },
    tokenOwnerAccountOutput: {
      value: input.tokenOwnerAccountOutput ?? null,
      isWritable: true,
    },
    tokenAuthority: { value: input.tokenAuthority ?? null, isWritable: false },
    tickArrayOne0: { value: input.tickArrayOne0 ?? null, isWritable: true },
    tickArrayOne1: { value: input.tickArrayOne1 ?? null, isWritable: true },
    tickArrayOne2: { value: input.tickArrayOne2 ?? null, isWritable: true },
    tickArrayTwo0: { value: input.tickArrayTwo0 ?? null, isWritable: true },
    tickArrayTwo1: { value: input.tickArrayTwo1 ?? null, isWritable: true },
    tickArrayTwo2: { value: input.tickArrayTwo2 ?? null, isWritable: true },
    oracleOne: { value: input.oracleOne ?? null, isWritable: true },
    oracleTwo: { value: input.oracleTwo ?? null, isWritable: true },
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, "programId");
  const instruction = {
    accounts: [
      getAccountMeta(accounts.whirlpoolOne),
      getAccountMeta(accounts.whirlpoolTwo),
      getAccountMeta(accounts.tokenMintInput),
      getAccountMeta(accounts.tokenMintIntermediate),
      getAccountMeta(accounts.tokenMintOutput),
      getAccountMeta(accounts.tokenProgramInput),
      getAccountMeta(accounts.tokenProgramIntermediate),
      getAccountMeta(accounts.tokenProgramOutput),
      getAccountMeta(accounts.tokenOwnerAccountInput),
      getAccountMeta(accounts.tokenVaultOneInput),
      getAccountMeta(accounts.tokenVaultOneIntermediate),
      getAccountMeta(accounts.tokenVaultTwoIntermediate),
      getAccountMeta(accounts.tokenVaultTwoOutput),
      getAccountMeta(accounts.tokenOwnerAccountOutput),
      getAccountMeta(accounts.tokenAuthority),
      getAccountMeta(accounts.tickArrayOne0),
      getAccountMeta(accounts.tickArrayOne1),
      getAccountMeta(accounts.tickArrayOne2),
      getAccountMeta(accounts.tickArrayTwo0),
      getAccountMeta(accounts.tickArrayTwo1),
      getAccountMeta(accounts.tickArrayTwo2),
      getAccountMeta(accounts.oracleOne),
      getAccountMeta(accounts.oracleTwo),
      getAccountMeta(accounts.memoProgram),
    ],
    programAddress,
    data: getTwoHopSwapV2InstructionDataEncoder().encode(
      args as TwoHopSwapV2InstructionDataArgs,
    ),
  } as TwoHopSwapV2Instruction<
    TProgramAddress,
    TAccountWhirlpoolOne,
    TAccountWhirlpoolTwo,
    TAccountTokenMintInput,
    TAccountTokenMintIntermediate,
    TAccountTokenMintOutput,
    TAccountTokenProgramInput,
    TAccountTokenProgramIntermediate,
    TAccountTokenProgramOutput,
    TAccountTokenOwnerAccountInput,
    TAccountTokenVaultOneInput,
    TAccountTokenVaultOneIntermediate,
    TAccountTokenVaultTwoIntermediate,
    TAccountTokenVaultTwoOutput,
    TAccountTokenOwnerAccountOutput,
    TAccountTokenAuthority,
    TAccountTickArrayOne0,
    TAccountTickArrayOne1,
    TAccountTickArrayOne2,
    TAccountTickArrayTwo0,
    TAccountTickArrayTwo1,
    TAccountTickArrayTwo2,
    TAccountOracleOne,
    TAccountOracleTwo,
    TAccountMemoProgram
  >;

  return instruction;
}

export type ParsedTwoHopSwapV2Instruction<
  TProgram extends string = typeof WHIRLPOOL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    whirlpoolOne: TAccountMetas[0];
    whirlpoolTwo: TAccountMetas[1];
    tokenMintInput: TAccountMetas[2];
    tokenMintIntermediate: TAccountMetas[3];
    tokenMintOutput: TAccountMetas[4];
    tokenProgramInput: TAccountMetas[5];
    tokenProgramIntermediate: TAccountMetas[6];
    tokenProgramOutput: TAccountMetas[7];
    tokenOwnerAccountInput: TAccountMetas[8];
    tokenVaultOneInput: TAccountMetas[9];
    tokenVaultOneIntermediate: TAccountMetas[10];
    tokenVaultTwoIntermediate: TAccountMetas[11];
    tokenVaultTwoOutput: TAccountMetas[12];
    tokenOwnerAccountOutput: TAccountMetas[13];
    tokenAuthority: TAccountMetas[14];
    tickArrayOne0: TAccountMetas[15];
    tickArrayOne1: TAccountMetas[16];
    tickArrayOne2: TAccountMetas[17];
    tickArrayTwo0: TAccountMetas[18];
    tickArrayTwo1: TAccountMetas[19];
    tickArrayTwo2: TAccountMetas[20];
    oracleOne: TAccountMetas[21];
    oracleTwo: TAccountMetas[22];
    memoProgram: TAccountMetas[23];
  };
  data: TwoHopSwapV2InstructionData;
};

export function parseTwoHopSwapV2Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>,
): ParsedTwoHopSwapV2Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 24) {
    // TODO: Coded error.
    throw new Error("Not enough accounts");
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      whirlpoolOne: getNextAccount(),
      whirlpoolTwo: getNextAccount(),
      tokenMintInput: getNextAccount(),
      tokenMintIntermediate: getNextAccount(),
      tokenMintOutput: getNextAccount(),
      tokenProgramInput: getNextAccount(),
      tokenProgramIntermediate: getNextAccount(),
      tokenProgramOutput: getNextAccount(),
      tokenOwnerAccountInput: getNextAccount(),
      tokenVaultOneInput: getNextAccount(),
      tokenVaultOneIntermediate: getNextAccount(),
      tokenVaultTwoIntermediate: getNextAccount(),
      tokenVaultTwoOutput: getNextAccount(),
      tokenOwnerAccountOutput: getNextAccount(),
      tokenAuthority: getNextAccount(),
      tickArrayOne0: getNextAccount(),
      tickArrayOne1: getNextAccount(),
      tickArrayOne2: getNextAccount(),
      tickArrayTwo0: getNextAccount(),
      tickArrayTwo1: getNextAccount(),
      tickArrayTwo2: getNextAccount(),
      oracleOne: getNextAccount(),
      oracleTwo: getNextAccount(),
      memoProgram: getNextAccount(),
    },
    data: getTwoHopSwapV2InstructionDataDecoder().decode(instruction.data),
  };
}
