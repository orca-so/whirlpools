/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from "@solana/kit";
import {
  type ParsedCloseBundledPositionInstruction,
  type ParsedClosePositionInstruction,
  type ParsedClosePositionWithTokenExtensionsInstruction,
  type ParsedCollectFeesInstruction,
  type ParsedCollectFeesV2Instruction,
  type ParsedCollectProtocolFeesInstruction,
  type ParsedCollectProtocolFeesV2Instruction,
  type ParsedCollectRewardInstruction,
  type ParsedCollectRewardV2Instruction,
  type ParsedDecreaseLiquidityInstruction,
  type ParsedDecreaseLiquidityV2Instruction,
  type ParsedDeletePositionBundleInstruction,
  type ParsedDeleteTokenBadgeInstruction,
  type ParsedIdlIncludeInstruction,
  type ParsedIncreaseLiquidityInstruction,
  type ParsedIncreaseLiquidityV2Instruction,
  type ParsedInitializeAdaptiveFeeTierInstruction,
  type ParsedInitializeConfigExtensionInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializeDynamicTickArrayInstruction,
  type ParsedInitializeFeeTierInstruction,
  type ParsedInitializePoolInstruction,
  type ParsedInitializePoolV2Instruction,
  type ParsedInitializePoolWithAdaptiveFeeInstruction,
  type ParsedInitializePositionBundleInstruction,
  type ParsedInitializePositionBundleWithMetadataInstruction,
  type ParsedInitializeRewardInstruction,
  type ParsedInitializeRewardV2Instruction,
  type ParsedInitializeTickArrayInstruction,
  type ParsedInitializeTokenBadgeInstruction,
  type ParsedLockPositionInstruction,
  type ParsedMigrateRepurposeRewardAuthoritySpaceInstruction,
  type ParsedOpenBundledPositionInstruction,
  type ParsedOpenPositionInstruction,
  type ParsedOpenPositionWithMetadataInstruction,
  type ParsedOpenPositionWithTokenExtensionsInstruction,
  type ParsedResetPositionRangeInstruction,
  type ParsedSetCollectProtocolFeesAuthorityInstruction,
  type ParsedSetConfigExtensionAuthorityInstruction,
  type ParsedSetConfigFeatureFlagInstruction,
  type ParsedSetDefaultBaseFeeRateInstruction,
  type ParsedSetDefaultFeeRateInstruction,
  type ParsedSetDefaultProtocolFeeRateInstruction,
  type ParsedSetDelegatedFeeAuthorityInstruction,
  type ParsedSetFeeAuthorityInstruction,
  type ParsedSetFeeRateByDelegatedFeeAuthorityInstruction,
  type ParsedSetFeeRateInstruction,
  type ParsedSetInitializePoolAuthorityInstruction,
  type ParsedSetPresetAdaptiveFeeConstantsInstruction,
  type ParsedSetProtocolFeeRateInstruction,
  type ParsedSetRewardAuthorityBySuperAuthorityInstruction,
  type ParsedSetRewardAuthorityInstruction,
  type ParsedSetRewardEmissionsInstruction,
  type ParsedSetRewardEmissionsSuperAuthorityInstruction,
  type ParsedSetRewardEmissionsV2Instruction,
  type ParsedSetTokenBadgeAttributeInstruction,
  type ParsedSetTokenBadgeAuthorityInstruction,
  type ParsedSwapInstruction,
  type ParsedSwapV2Instruction,
  type ParsedTransferLockedPositionInstruction,
  type ParsedTwoHopSwapInstruction,
  type ParsedTwoHopSwapV2Instruction,
  type ParsedUpdateFeesAndRewardsInstruction,
} from "../instructions";

export const WHIRLPOOL_PROGRAM_ADDRESS =
  "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc" as Address<"whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc">;

export enum WhirlpoolAccount {
  AdaptiveFeeTier,
  WhirlpoolsConfig,
  WhirlpoolsConfigExtension,
  DynamicTickArray,
  FeeTier,
  FixedTickArray,
  LockConfig,
  Oracle,
  Position,
  PositionBundle,
  TokenBadge,
  Whirlpool,
}

export function identifyWhirlpoolAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): WhirlpoolAccount {
  const data = "data" in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 16, 144, 116, 47, 146, 149, 46]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.AdaptiveFeeTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([157, 20, 49, 224, 217, 87, 193, 254]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.WhirlpoolsConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 99, 215, 163, 240, 26, 153, 58]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.WhirlpoolsConfigExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 216, 246, 142, 225, 199, 218, 56]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.DynamicTickArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([56, 75, 159, 76, 142, 68, 190, 105]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.FeeTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([69, 97, 189, 190, 110, 7, 66, 187]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.FixedTickArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 47, 238, 159, 124, 12, 160, 192]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.LockConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([139, 194, 131, 179, 140, 179, 229, 244]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.Oracle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([170, 188, 143, 228, 122, 64, 247, 208]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.Position;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([129, 169, 175, 65, 185, 95, 32, 100]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.PositionBundle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([116, 219, 204, 229, 249, 116, 255, 150]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.TokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([63, 149, 209, 12, 225, 128, 99, 9]),
      ),
      0,
    )
  ) {
    return WhirlpoolAccount.Whirlpool;
  }
  throw new Error(
    "The provided account could not be identified as a whirlpool account.",
  );
}

export enum WhirlpoolInstruction {
  InitializeConfig,
  InitializePool,
  InitializeTickArray,
  InitializeDynamicTickArray,
  InitializeFeeTier,
  InitializeReward,
  SetRewardEmissions,
  OpenPosition,
  OpenPositionWithMetadata,
  IncreaseLiquidity,
  DecreaseLiquidity,
  UpdateFeesAndRewards,
  CollectFees,
  CollectReward,
  CollectProtocolFees,
  Swap,
  ClosePosition,
  SetDefaultFeeRate,
  SetDefaultProtocolFeeRate,
  SetFeeRate,
  SetProtocolFeeRate,
  SetFeeAuthority,
  SetCollectProtocolFeesAuthority,
  SetRewardAuthority,
  SetRewardAuthorityBySuperAuthority,
  SetRewardEmissionsSuperAuthority,
  TwoHopSwap,
  InitializePositionBundle,
  InitializePositionBundleWithMetadata,
  DeletePositionBundle,
  OpenBundledPosition,
  CloseBundledPosition,
  OpenPositionWithTokenExtensions,
  ClosePositionWithTokenExtensions,
  LockPosition,
  ResetPositionRange,
  TransferLockedPosition,
  InitializeAdaptiveFeeTier,
  SetDefaultBaseFeeRate,
  SetDelegatedFeeAuthority,
  SetInitializePoolAuthority,
  SetPresetAdaptiveFeeConstants,
  InitializePoolWithAdaptiveFee,
  SetFeeRateByDelegatedFeeAuthority,
  SetConfigFeatureFlag,
  MigrateRepurposeRewardAuthoritySpace,
  CollectFeesV2,
  CollectProtocolFeesV2,
  CollectRewardV2,
  DecreaseLiquidityV2,
  IncreaseLiquidityV2,
  InitializePoolV2,
  InitializeRewardV2,
  SetRewardEmissionsV2,
  SwapV2,
  TwoHopSwapV2,
  InitializeConfigExtension,
  SetConfigExtensionAuthority,
  SetTokenBadgeAuthority,
  InitializeTokenBadge,
  DeleteTokenBadge,
  SetTokenBadgeAttribute,
  IdlInclude,
}

export function identifyWhirlpoolInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): WhirlpoolInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 180, 10, 172, 84, 174, 232, 40]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializePool;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 188, 193, 214, 141, 91, 149, 184]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeTickArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 33, 165, 200, 120, 231, 142, 50]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeDynamicTickArray;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([183, 74, 156, 160, 112, 2, 42, 30]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeFeeTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 135, 192, 196, 242, 129, 230, 68]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([13, 197, 86, 168, 109, 176, 27, 244]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetRewardEmissions;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([135, 128, 47, 77, 15, 152, 240, 49]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.OpenPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([242, 29, 134, 48, 58, 110, 14, 60]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.OpenPositionWithMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([46, 156, 243, 118, 13, 205, 251, 178]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.IncreaseLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([160, 38, 208, 111, 104, 91, 44, 1]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.DecreaseLiquidity;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([154, 230, 250, 13, 236, 209, 75, 223]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.UpdateFeesAndRewards;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 152, 207, 99, 30, 186, 19, 182]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([70, 5, 132, 87, 86, 235, 177, 34]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectReward;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([22, 67, 23, 98, 150, 178, 70, 220]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectProtocolFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([248, 198, 158, 145, 225, 117, 135, 200]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.Swap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([123, 134, 81, 0, 49, 68, 98, 98]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.ClosePosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([118, 215, 214, 157, 182, 229, 208, 228]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetDefaultFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([107, 205, 249, 226, 151, 35, 86, 0]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetDefaultProtocolFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 243, 137, 65, 8, 140, 158, 6]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([95, 7, 4, 50, 154, 79, 156, 131]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetProtocolFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([31, 1, 50, 87, 237, 101, 97, 132]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetFeeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 150, 93, 244, 139, 225, 233, 67]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetCollectProtocolFeesAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([34, 39, 183, 252, 83, 28, 85, 127]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetRewardAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([240, 154, 201, 198, 148, 93, 56, 25]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetRewardAuthorityBySuperAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 5, 200, 209, 122, 56, 82, 183]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetRewardEmissionsSuperAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([195, 96, 237, 108, 68, 162, 219, 230]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.TwoHopSwap;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([117, 45, 241, 149, 24, 18, 194, 65]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializePositionBundle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([93, 124, 16, 179, 249, 131, 115, 245]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializePositionBundleWithMetadata;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([100, 25, 99, 2, 217, 239, 124, 173]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.DeletePositionBundle;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 113, 126, 171, 213, 172, 212, 49]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.OpenBundledPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 36, 216, 245, 27, 85, 103, 67]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CloseBundledPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([212, 47, 95, 92, 114, 102, 131, 250]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.OpenPositionWithTokenExtensions;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([1, 182, 135, 59, 155, 25, 99, 223]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.ClosePositionWithTokenExtensions;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 62, 2, 252, 247, 10, 171, 185]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.LockPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 123, 180, 141, 194, 100, 160, 175]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.ResetPositionRange;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([179, 121, 229, 46, 67, 138, 194, 138]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.TransferLockedPosition;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([77, 99, 208, 200, 141, 123, 117, 48]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeAdaptiveFeeTier;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([229, 66, 84, 251, 164, 134, 183, 7]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetDefaultBaseFeeRate;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([193, 234, 231, 147, 138, 57, 3, 122]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetDelegatedFeeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([125, 43, 127, 235, 149, 26, 106, 236]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetInitializePoolAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 185, 66, 148, 83, 88, 134, 198]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetPresetAdaptiveFeeConstants;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([143, 94, 96, 76, 172, 124, 119, 199]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializePoolWithAdaptiveFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([121, 121, 54, 114, 131, 230, 162, 104]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetFeeRateByDelegatedFeeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([71, 173, 228, 18, 67, 247, 210, 57]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetConfigFeatureFlag;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([214, 161, 248, 79, 152, 98, 172, 231]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.MigrateRepurposeRewardAuthoritySpace;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 117, 95, 191, 229, 180, 226, 15]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectFeesV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([103, 128, 222, 134, 114, 200, 22, 200]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectProtocolFeesV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 107, 37, 180, 160, 19, 49, 209]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.CollectRewardV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 127, 188, 62, 79, 82, 196, 96]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.DecreaseLiquidityV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([133, 29, 89, 223, 69, 238, 176, 10]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.IncreaseLiquidityV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 45, 87, 242, 27, 63, 204, 67]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializePoolV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 1, 77, 50, 235, 229, 133, 49]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeRewardV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 228, 72, 32, 193, 48, 160, 102]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetRewardEmissionsV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 4, 237, 11, 26, 201, 30, 98]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SwapV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([186, 143, 209, 29, 254, 2, 194, 117]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.TwoHopSwapV2;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 9, 53, 9, 114, 57, 209, 52]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeConfigExtension;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([44, 94, 241, 116, 24, 188, 60, 143]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetConfigExtensionAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([207, 202, 4, 32, 205, 79, 13, 178]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetTokenBadgeAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([253, 77, 205, 95, 27, 224, 89, 223]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.InitializeTokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 146, 68, 8, 18, 117, 17, 185]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.DeleteTokenBadge;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 88, 65, 33, 138, 147, 246, 137]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.SetTokenBadgeAttribute;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 253, 121, 121, 60, 193, 129, 31]),
      ),
      0,
    )
  ) {
    return WhirlpoolInstruction.IdlInclude;
  }
  throw new Error(
    "The provided instruction could not be identified as a whirlpool instruction.",
  );
}

export type ParsedWhirlpoolInstruction<
  TProgram extends string = "whirLbMiicVdio4qvUfM5KAg6Ct8VwpYzGff3uctyCc",
> =
  | ({
      instructionType: WhirlpoolInstruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializePool;
    } & ParsedInitializePoolInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeTickArray;
    } & ParsedInitializeTickArrayInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeDynamicTickArray;
    } & ParsedInitializeDynamicTickArrayInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeFeeTier;
    } & ParsedInitializeFeeTierInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeReward;
    } & ParsedInitializeRewardInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetRewardEmissions;
    } & ParsedSetRewardEmissionsInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.OpenPosition;
    } & ParsedOpenPositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.OpenPositionWithMetadata;
    } & ParsedOpenPositionWithMetadataInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.IncreaseLiquidity;
    } & ParsedIncreaseLiquidityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.DecreaseLiquidity;
    } & ParsedDecreaseLiquidityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.UpdateFeesAndRewards;
    } & ParsedUpdateFeesAndRewardsInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectFees;
    } & ParsedCollectFeesInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectReward;
    } & ParsedCollectRewardInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectProtocolFees;
    } & ParsedCollectProtocolFeesInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.Swap;
    } & ParsedSwapInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.ClosePosition;
    } & ParsedClosePositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetDefaultFeeRate;
    } & ParsedSetDefaultFeeRateInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetDefaultProtocolFeeRate;
    } & ParsedSetDefaultProtocolFeeRateInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetFeeRate;
    } & ParsedSetFeeRateInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetProtocolFeeRate;
    } & ParsedSetProtocolFeeRateInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetFeeAuthority;
    } & ParsedSetFeeAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetCollectProtocolFeesAuthority;
    } & ParsedSetCollectProtocolFeesAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetRewardAuthority;
    } & ParsedSetRewardAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetRewardAuthorityBySuperAuthority;
    } & ParsedSetRewardAuthorityBySuperAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetRewardEmissionsSuperAuthority;
    } & ParsedSetRewardEmissionsSuperAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.TwoHopSwap;
    } & ParsedTwoHopSwapInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializePositionBundle;
    } & ParsedInitializePositionBundleInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializePositionBundleWithMetadata;
    } & ParsedInitializePositionBundleWithMetadataInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.DeletePositionBundle;
    } & ParsedDeletePositionBundleInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.OpenBundledPosition;
    } & ParsedOpenBundledPositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CloseBundledPosition;
    } & ParsedCloseBundledPositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.OpenPositionWithTokenExtensions;
    } & ParsedOpenPositionWithTokenExtensionsInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.ClosePositionWithTokenExtensions;
    } & ParsedClosePositionWithTokenExtensionsInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.LockPosition;
    } & ParsedLockPositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.ResetPositionRange;
    } & ParsedResetPositionRangeInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.TransferLockedPosition;
    } & ParsedTransferLockedPositionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeAdaptiveFeeTier;
    } & ParsedInitializeAdaptiveFeeTierInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetDefaultBaseFeeRate;
    } & ParsedSetDefaultBaseFeeRateInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetDelegatedFeeAuthority;
    } & ParsedSetDelegatedFeeAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetInitializePoolAuthority;
    } & ParsedSetInitializePoolAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetPresetAdaptiveFeeConstants;
    } & ParsedSetPresetAdaptiveFeeConstantsInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializePoolWithAdaptiveFee;
    } & ParsedInitializePoolWithAdaptiveFeeInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetFeeRateByDelegatedFeeAuthority;
    } & ParsedSetFeeRateByDelegatedFeeAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetConfigFeatureFlag;
    } & ParsedSetConfigFeatureFlagInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.MigrateRepurposeRewardAuthoritySpace;
    } & ParsedMigrateRepurposeRewardAuthoritySpaceInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectFeesV2;
    } & ParsedCollectFeesV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectProtocolFeesV2;
    } & ParsedCollectProtocolFeesV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.CollectRewardV2;
    } & ParsedCollectRewardV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.DecreaseLiquidityV2;
    } & ParsedDecreaseLiquidityV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.IncreaseLiquidityV2;
    } & ParsedIncreaseLiquidityV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializePoolV2;
    } & ParsedInitializePoolV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeRewardV2;
    } & ParsedInitializeRewardV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetRewardEmissionsV2;
    } & ParsedSetRewardEmissionsV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SwapV2;
    } & ParsedSwapV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.TwoHopSwapV2;
    } & ParsedTwoHopSwapV2Instruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeConfigExtension;
    } & ParsedInitializeConfigExtensionInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetConfigExtensionAuthority;
    } & ParsedSetConfigExtensionAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetTokenBadgeAuthority;
    } & ParsedSetTokenBadgeAuthorityInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.InitializeTokenBadge;
    } & ParsedInitializeTokenBadgeInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.DeleteTokenBadge;
    } & ParsedDeleteTokenBadgeInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.SetTokenBadgeAttribute;
    } & ParsedSetTokenBadgeAttributeInstruction<TProgram>)
  | ({
      instructionType: WhirlpoolInstruction.IdlInclude;
    } & ParsedIdlIncludeInstruction<TProgram>);
