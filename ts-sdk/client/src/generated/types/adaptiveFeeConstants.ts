/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from "@solana/kit";

export type AdaptiveFeeConstants = {
  filterPeriod: number;
  decayPeriod: number;
  reductionFactor: number;
  adaptiveFeeControlFactor: number;
  maxVolatilityAccumulator: number;
  tickGroupSize: number;
  majorSwapThresholdTicks: number;
  reserved: ReadonlyUint8Array;
};

export type AdaptiveFeeConstantsArgs = AdaptiveFeeConstants;

export function getAdaptiveFeeConstantsEncoder(): Encoder<AdaptiveFeeConstantsArgs> {
  return getStructEncoder([
    ["filterPeriod", getU16Encoder()],
    ["decayPeriod", getU16Encoder()],
    ["reductionFactor", getU16Encoder()],
    ["adaptiveFeeControlFactor", getU32Encoder()],
    ["maxVolatilityAccumulator", getU32Encoder()],
    ["tickGroupSize", getU16Encoder()],
    ["majorSwapThresholdTicks", getU16Encoder()],
    ["reserved", fixEncoderSize(getBytesEncoder(), 16)],
  ]);
}

export function getAdaptiveFeeConstantsDecoder(): Decoder<AdaptiveFeeConstants> {
  return getStructDecoder([
    ["filterPeriod", getU16Decoder()],
    ["decayPeriod", getU16Decoder()],
    ["reductionFactor", getU16Decoder()],
    ["adaptiveFeeControlFactor", getU32Decoder()],
    ["maxVolatilityAccumulator", getU32Decoder()],
    ["tickGroupSize", getU16Decoder()],
    ["majorSwapThresholdTicks", getU16Decoder()],
    ["reserved", fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getAdaptiveFeeConstantsCodec(): Codec<
  AdaptiveFeeConstantsArgs,
  AdaptiveFeeConstants
> {
  return combineCodec(
    getAdaptiveFeeConstantsEncoder(),
    getAdaptiveFeeConstantsDecoder(),
  );
}
