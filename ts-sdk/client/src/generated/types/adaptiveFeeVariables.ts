/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getI32Decoder,
  getI32Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from "@solana/kit";

export type AdaptiveFeeVariables = {
  lastReferenceUpdateTimestamp: bigint;
  lastMajorSwapTimestamp: bigint;
  volatilityReference: number;
  tickGroupIndexReference: number;
  volatilityAccumulator: number;
  reserved: ReadonlyUint8Array;
};

export type AdaptiveFeeVariablesArgs = {
  lastReferenceUpdateTimestamp: number | bigint;
  lastMajorSwapTimestamp: number | bigint;
  volatilityReference: number;
  tickGroupIndexReference: number;
  volatilityAccumulator: number;
  reserved: ReadonlyUint8Array;
};

export function getAdaptiveFeeVariablesEncoder(): Encoder<AdaptiveFeeVariablesArgs> {
  return getStructEncoder([
    ["lastReferenceUpdateTimestamp", getU64Encoder()],
    ["lastMajorSwapTimestamp", getU64Encoder()],
    ["volatilityReference", getU32Encoder()],
    ["tickGroupIndexReference", getI32Encoder()],
    ["volatilityAccumulator", getU32Encoder()],
    ["reserved", fixEncoderSize(getBytesEncoder(), 16)],
  ]);
}

export function getAdaptiveFeeVariablesDecoder(): Decoder<AdaptiveFeeVariables> {
  return getStructDecoder([
    ["lastReferenceUpdateTimestamp", getU64Decoder()],
    ["lastMajorSwapTimestamp", getU64Decoder()],
    ["volatilityReference", getU32Decoder()],
    ["tickGroupIndexReference", getI32Decoder()],
    ["volatilityAccumulator", getU32Decoder()],
    ["reserved", fixDecoderSize(getBytesDecoder(), 16)],
  ]);
}

export function getAdaptiveFeeVariablesCodec(): Codec<
  AdaptiveFeeVariablesArgs,
  AdaptiveFeeVariables
> {
  return combineCodec(
    getAdaptiveFeeVariablesEncoder(),
    getAdaptiveFeeVariablesDecoder(),
  );
}
