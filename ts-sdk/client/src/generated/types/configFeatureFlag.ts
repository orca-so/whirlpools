/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from "@solana/kit";

export type ConfigFeatureFlag = {
  __kind: "TokenBadge";
  fields: readonly [boolean];
};

export type ConfigFeatureFlagArgs = ConfigFeatureFlag;

export function getConfigFeatureFlagEncoder(): FixedSizeEncoder<ConfigFeatureFlagArgs> {
  return getDiscriminatedUnionEncoder([
    [
      "TokenBadge",
      getStructEncoder([["fields", getTupleEncoder([getBooleanEncoder()])]]),
    ],
  ]) as FixedSizeEncoder<ConfigFeatureFlagArgs>;
}

export function getConfigFeatureFlagDecoder(): FixedSizeDecoder<ConfigFeatureFlag> {
  return getDiscriminatedUnionDecoder([
    [
      "TokenBadge",
      getStructDecoder([["fields", getTupleDecoder([getBooleanDecoder()])]]),
    ],
  ]) as FixedSizeDecoder<ConfigFeatureFlag>;
}

export function getConfigFeatureFlagCodec(): FixedSizeCodec<
  ConfigFeatureFlagArgs,
  ConfigFeatureFlag
> {
  return combineCodec(
    getConfigFeatureFlagEncoder(),
    getConfigFeatureFlagDecoder(),
  );
}

// Data Enum Helpers.
export function configFeatureFlag(
  kind: "TokenBadge",
  data: GetDiscriminatedUnionVariantContent<
    ConfigFeatureFlagArgs,
    "__kind",
    "TokenBadge"
  >["fields"],
): GetDiscriminatedUnionVariant<ConfigFeatureFlagArgs, "__kind", "TokenBadge">;
export function configFeatureFlag<
  K extends ConfigFeatureFlagArgs["__kind"],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isConfigFeatureFlag<K extends ConfigFeatureFlag["__kind"]>(
  kind: K,
  value: ConfigFeatureFlag,
): value is ConfigFeatureFlag & { __kind: K } {
  return value.__kind === kind;
}
