/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from "@solana/kit";
import {
  getDynamicTickDataDecoder,
  getDynamicTickDataEncoder,
  type DynamicTickData,
  type DynamicTickDataArgs,
} from ".";

export type DynamicTick =
  | { __kind: "Uninitialized" }
  | { __kind: "Initialized"; fields: readonly [DynamicTickData] };

export type DynamicTickArgs =
  | { __kind: "Uninitialized" }
  | { __kind: "Initialized"; fields: readonly [DynamicTickDataArgs] };

export function getDynamicTickEncoder(): Encoder<DynamicTickArgs> {
  return getDiscriminatedUnionEncoder([
    ["Uninitialized", getUnitEncoder()],
    [
      "Initialized",
      getStructEncoder([
        ["fields", getTupleEncoder([getDynamicTickDataEncoder()])],
      ]),
    ],
  ]);
}

export function getDynamicTickDecoder(): Decoder<DynamicTick> {
  return getDiscriminatedUnionDecoder([
    ["Uninitialized", getUnitDecoder()],
    [
      "Initialized",
      getStructDecoder([
        ["fields", getTupleDecoder([getDynamicTickDataDecoder()])],
      ]),
    ],
  ]);
}

export function getDynamicTickCodec(): Codec<DynamicTickArgs, DynamicTick> {
  return combineCodec(getDynamicTickEncoder(), getDynamicTickDecoder());
}

// Data Enum Helpers.
export function dynamicTick(
  kind: "Uninitialized",
): GetDiscriminatedUnionVariant<DynamicTickArgs, "__kind", "Uninitialized">;
export function dynamicTick(
  kind: "Initialized",
  data: GetDiscriminatedUnionVariantContent<
    DynamicTickArgs,
    "__kind",
    "Initialized"
  >["fields"],
): GetDiscriminatedUnionVariant<DynamicTickArgs, "__kind", "Initialized">;
export function dynamicTick<K extends DynamicTickArgs["__kind"], Data>(
  kind: K,
  data?: Data,
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isDynamicTick<K extends DynamicTick["__kind"]>(
  kind: K,
  value: DynamicTick,
): value is DynamicTick & { __kind: K } {
  return value.__kind === kind;
}
