/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from "@solana/kit";

export type PoolInitialized = {
  whirlpool: Address;
  whirlpoolsConfig: Address;
  tokenMintA: Address;
  tokenMintB: Address;
  tickSpacing: number;
  tokenProgramA: Address;
  tokenProgramB: Address;
  decimalsA: number;
  decimalsB: number;
  initialSqrtPrice: bigint;
};

export type PoolInitializedArgs = {
  whirlpool: Address;
  whirlpoolsConfig: Address;
  tokenMintA: Address;
  tokenMintB: Address;
  tickSpacing: number;
  tokenProgramA: Address;
  tokenProgramB: Address;
  decimalsA: number;
  decimalsB: number;
  initialSqrtPrice: number | bigint;
};

export function getPoolInitializedEncoder(): FixedSizeEncoder<PoolInitializedArgs> {
  return getStructEncoder([
    ["whirlpool", getAddressEncoder()],
    ["whirlpoolsConfig", getAddressEncoder()],
    ["tokenMintA", getAddressEncoder()],
    ["tokenMintB", getAddressEncoder()],
    ["tickSpacing", getU16Encoder()],
    ["tokenProgramA", getAddressEncoder()],
    ["tokenProgramB", getAddressEncoder()],
    ["decimalsA", getU8Encoder()],
    ["decimalsB", getU8Encoder()],
    ["initialSqrtPrice", getU128Encoder()],
  ]);
}

export function getPoolInitializedDecoder(): FixedSizeDecoder<PoolInitialized> {
  return getStructDecoder([
    ["whirlpool", getAddressDecoder()],
    ["whirlpoolsConfig", getAddressDecoder()],
    ["tokenMintA", getAddressDecoder()],
    ["tokenMintB", getAddressDecoder()],
    ["tickSpacing", getU16Decoder()],
    ["tokenProgramA", getAddressDecoder()],
    ["tokenProgramB", getAddressDecoder()],
    ["decimalsA", getU8Decoder()],
    ["decimalsB", getU8Decoder()],
    ["initialSqrtPrice", getU128Decoder()],
  ]);
}

export function getPoolInitializedCodec(): FixedSizeCodec<
  PoolInitializedArgs,
  PoolInitialized
> {
  return combineCodec(getPoolInitializedEncoder(), getPoolInitializedDecoder());
}
