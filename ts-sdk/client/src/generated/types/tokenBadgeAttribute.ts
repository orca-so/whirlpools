/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getBooleanDecoder,
  getBooleanEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
} from "@solana/kit";

export type TokenBadgeAttribute = {
  __kind: "RequireNonTransferablePosition";
  fields: readonly [boolean];
};

export type TokenBadgeAttributeArgs = TokenBadgeAttribute;

export function getTokenBadgeAttributeEncoder(): Encoder<TokenBadgeAttributeArgs> {
  return getDiscriminatedUnionEncoder([
    [
      "RequireNonTransferablePosition",
      getStructEncoder([["fields", getTupleEncoder([getBooleanEncoder()])]]),
    ],
  ]);
}

export function getTokenBadgeAttributeDecoder(): Decoder<TokenBadgeAttribute> {
  return getDiscriminatedUnionDecoder([
    [
      "RequireNonTransferablePosition",
      getStructDecoder([["fields", getTupleDecoder([getBooleanDecoder()])]]),
    ],
  ]);
}

export function getTokenBadgeAttributeCodec(): Codec<
  TokenBadgeAttributeArgs,
  TokenBadgeAttribute
> {
  return combineCodec(
    getTokenBadgeAttributeEncoder(),
    getTokenBadgeAttributeDecoder(),
  );
}

// Data Enum Helpers.
export function tokenBadgeAttribute(
  kind: "RequireNonTransferablePosition",
  data: GetDiscriminatedUnionVariantContent<
    TokenBadgeAttributeArgs,
    "__kind",
    "RequireNonTransferablePosition"
  >["fields"],
): GetDiscriminatedUnionVariant<
  TokenBadgeAttributeArgs,
  "__kind",
  "RequireNonTransferablePosition"
>;
export function tokenBadgeAttribute<
  K extends TokenBadgeAttributeArgs["__kind"],
  Data,
>(kind: K, data?: Data) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isTokenBadgeAttribute<K extends TokenBadgeAttribute["__kind"]>(
  kind: K,
  value: TokenBadgeAttribute,
): value is TokenBadgeAttribute & { __kind: K } {
  return value.__kind === kind;
}
