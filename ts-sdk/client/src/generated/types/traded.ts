/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from "@solana/kit";

export type Traded = {
  whirlpool: Address;
  aToB: boolean;
  preSqrtPrice: bigint;
  postSqrtPrice: bigint;
  inputAmount: bigint;
  outputAmount: bigint;
  inputTransferFee: bigint;
  outputTransferFee: bigint;
  lpFee: bigint;
  protocolFee: bigint;
};

export type TradedArgs = {
  whirlpool: Address;
  aToB: boolean;
  preSqrtPrice: number | bigint;
  postSqrtPrice: number | bigint;
  inputAmount: number | bigint;
  outputAmount: number | bigint;
  inputTransferFee: number | bigint;
  outputTransferFee: number | bigint;
  lpFee: number | bigint;
  protocolFee: number | bigint;
};

export function getTradedEncoder(): FixedSizeEncoder<TradedArgs> {
  return getStructEncoder([
    ["whirlpool", getAddressEncoder()],
    ["aToB", getBooleanEncoder()],
    ["preSqrtPrice", getU128Encoder()],
    ["postSqrtPrice", getU128Encoder()],
    ["inputAmount", getU64Encoder()],
    ["outputAmount", getU64Encoder()],
    ["inputTransferFee", getU64Encoder()],
    ["outputTransferFee", getU64Encoder()],
    ["lpFee", getU64Encoder()],
    ["protocolFee", getU64Encoder()],
  ]);
}

export function getTradedDecoder(): FixedSizeDecoder<Traded> {
  return getStructDecoder([
    ["whirlpool", getAddressDecoder()],
    ["aToB", getBooleanDecoder()],
    ["preSqrtPrice", getU128Decoder()],
    ["postSqrtPrice", getU128Decoder()],
    ["inputAmount", getU64Decoder()],
    ["outputAmount", getU64Decoder()],
    ["inputTransferFee", getU64Decoder()],
    ["outputTransferFee", getU64Decoder()],
    ["lpFee", getU64Decoder()],
    ["protocolFee", getU64Decoder()],
  ]);
}

export function getTradedCodec(): FixedSizeCodec<TradedArgs, Traded> {
  return combineCodec(getTradedEncoder(), getTradedDecoder());
}
