/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from "@solana/kit";

/**
 * Stores the state relevant for tracking liquidity mining rewards at the `Whirlpool` level.
 * These values are used in conjunction with `PositionRewardInfo`, `Tick.reward_growths_outside`,
 * and `Whirlpool.reward_last_updated_timestamp` to determine how many rewards are earned by open
 * positions.
 */
export type WhirlpoolRewardInfo = {
  /** Reward token mint. */
  mint: Address;
  /** Reward vault token account. */
  vault: Address;
  /**
   * reward_infos[0]: Authority account that has permission to initialize the reward and set emissions.
   * reward_infos[1]: used for a struct that contains fields for extending the functionality of Whirlpool.
   * reward_infos[2]: reserved for future use.
   *
   * Historical notes:
   * Originally, this was a field named "authority", but it was found that there was no opportunity
   * to set different authorities for the three rewards. Therefore, the use of this field was changed for Whirlpool's future extensibility.
   */
  extension: ReadonlyUint8Array;
  /** Q64.64 number that indicates how many tokens per second are earned per unit of liquidity. */
  emissionsPerSecondX64: bigint;
  /**
   * Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward
   * emissions were turned on.
   */
  growthGlobalX64: bigint;
};

export type WhirlpoolRewardInfoArgs = {
  /** Reward token mint. */
  mint: Address;
  /** Reward vault token account. */
  vault: Address;
  /**
   * reward_infos[0]: Authority account that has permission to initialize the reward and set emissions.
   * reward_infos[1]: used for a struct that contains fields for extending the functionality of Whirlpool.
   * reward_infos[2]: reserved for future use.
   *
   * Historical notes:
   * Originally, this was a field named "authority", but it was found that there was no opportunity
   * to set different authorities for the three rewards. Therefore, the use of this field was changed for Whirlpool's future extensibility.
   */
  extension: ReadonlyUint8Array;
  /** Q64.64 number that indicates how many tokens per second are earned per unit of liquidity. */
  emissionsPerSecondX64: number | bigint;
  /**
   * Q64.64 number that tracks the total tokens earned per unit of liquidity since the reward
   * emissions were turned on.
   */
  growthGlobalX64: number | bigint;
};

export function getWhirlpoolRewardInfoEncoder(): FixedSizeEncoder<WhirlpoolRewardInfoArgs> {
  return getStructEncoder([
    ["mint", getAddressEncoder()],
    ["vault", getAddressEncoder()],
    ["extension", fixEncoderSize(getBytesEncoder(), 32)],
    ["emissionsPerSecondX64", getU128Encoder()],
    ["growthGlobalX64", getU128Encoder()],
  ]);
}

export function getWhirlpoolRewardInfoDecoder(): FixedSizeDecoder<WhirlpoolRewardInfo> {
  return getStructDecoder([
    ["mint", getAddressDecoder()],
    ["vault", getAddressDecoder()],
    ["extension", fixDecoderSize(getBytesDecoder(), 32)],
    ["emissionsPerSecondX64", getU128Decoder()],
    ["growthGlobalX64", getU128Decoder()],
  ]);
}

export function getWhirlpoolRewardInfoCodec(): FixedSizeCodec<
  WhirlpoolRewardInfoArgs,
  WhirlpoolRewardInfo
> {
  return combineCodec(
    getWhirlpoolRewardInfoEncoder(),
    getWhirlpoolRewardInfoDecoder(),
  );
}
